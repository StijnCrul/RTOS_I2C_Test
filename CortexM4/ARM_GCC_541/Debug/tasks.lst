ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.global	pxCurrentTCB
  21              		.bss
  22              		.align	2
  23              		.type	pxCurrentTCB, %object
  24              		.size	pxCurrentTCB, 4
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.align	2
  28              	pxReadyTasksLists:
  29 0004 00000000 		.space	140
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.align	2
  31              	xDelayedTaskList1:
  32 0090 00000000 		.space	20
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.align	2
  34              	xDelayedTaskList2:
  35 00a4 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.align	2
  37              	pxDelayedTaskList:
  38 00b8 00000000 		.space	4
  39              		.align	2
  40              	pxOverflowDelayedTaskList:
  41 00bc 00000000 		.space	4
  42              		.align	2
  43              	xPendingReadyList:
  44 00c0 00000000 		.space	20
  44      00000000 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 2


  44      00000000 
  44      00000000 
  44      00000000 
  45              		.align	2
  46              	xTasksWaitingTermination:
  47 00d4 00000000 		.space	20
  47      00000000 
  47      00000000 
  47      00000000 
  47      00000000 
  48              		.align	2
  49              	uxDeletedTasksWaitingCleanUp:
  50 00e8 00000000 		.space	4
  51              		.align	2
  52              	xSuspendedTaskList:
  53 00ec 00000000 		.space	20
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.align	2
  55              	uxCurrentNumberOfTasks:
  56 0100 00000000 		.space	4
  57              		.align	2
  58              	xTickCount:
  59 0104 00000000 		.space	4
  60              		.align	2
  61              	uxTopReadyPriority:
  62 0108 00000000 		.space	4
  63              		.align	2
  64              	xSchedulerRunning:
  65 010c 00000000 		.space	4
  66              		.align	2
  67              	uxPendedTicks:
  68 0110 00000000 		.space	4
  69              		.align	2
  70              	xYieldPending:
  71 0114 00000000 		.space	4
  72              		.align	2
  73              	xNumOfOverflows:
  74 0118 00000000 		.space	4
  75              		.align	2
  76              	uxTaskNumber:
  77 011c 00000000 		.space	4
  78              		.align	2
  79              	xNextTaskUnblockTime:
  80 0120 00000000 		.space	4
  81              		.align	2
  82              	xIdleTaskHandle:
  83 0124 00000000 		.space	4
  84              		.align	2
  85              	uxSchedulerSuspended:
  86 0128 00000000 		.space	4
  87              		.section	.text.xTaskCreate,"ax",%progbits
  88              		.align	2
  89              		.global	xTaskCreate
  90              		.thumb
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 3


  91              		.thumb_func
  92              		.type	xTaskCreate, %function
  93              	xTaskCreate:
  94              	.LFB136:
  95              		.file 1 "Generated_Source\\PSoC6\\pdl\\rtos\\FreeRTOS\\10.0.1\\Source\\tasks.c"
   1:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
   2:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
   5:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * subject to the following conditions:
  11:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
  12:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
  15:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
  22:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
  25:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
  27:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  28:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Standard includes. */
  29:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include <stdlib.h>
  30:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include <string.h>
  31:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  32:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** task.h is included from an application file. */
  35:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  37:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* FreeRTOS includes. */
  38:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include "FreeRTOS.h"
  39:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include "task.h"
  40:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include "timers.h"
  41:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #include "stack_macros.h"
  42:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  43:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  49:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** functions but without including stdio.h here. */
  51:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 4


  53:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#include <stdio.h>
  57:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  59:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #else
  64:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
  66:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  67:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  72:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
  73:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
  76:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
  78:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #else
 106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 5


 110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * global, rather than file scope.
 121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define static
 124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	microcontroller architecture. */
 137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	state task. */
 140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
 142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
 146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
 152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																										\
 154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			--uxTopPriority;																			\
 159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
 160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																										\
 161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 6


 167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	being used. */
 172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	architecture being used. */
 180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{																								\
 188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{																									\
 203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{																								\
 205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}																								\
 207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** count overflows. */
 215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {																									\
 217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																									\
 222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 7


 224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** to its original value when it is released. */
 258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #else
 261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 8


 281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* See the comments above the definition of
 330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 9


 338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** } tskTCB;
 340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** typedef tskTCB TCB_t;
 344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** which static variables must be declared volatile. */
 347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** accessed from a critical section. */
 391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 10


 395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*lint -restore */
 401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationTickHook( void );
 414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /**
 426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * is in any other state.
 429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * creation of the first user task.
 446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
 447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
 450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 11


 452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
 459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * and its TCB deleted.
 472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * a suspended list, etc.).
 485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
 486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 12


 509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
 520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * set to a value other than 1.
 524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * will exit the Blocked state.
 534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/*
 540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	 * human readable tables of task information.
 542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	 */
 543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * under the control of the scheduler.
 563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 13


 566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
 567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * called by the function.
 570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
 571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif
 576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			structure. */
 600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			function - use them. */
 610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 14


 623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = NULL;
 627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			not static allocation is being used. */
 650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Store the stack location in the TCB. */
 653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->pcName,
 665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									pxTaskDefinition->xRegions );
 670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
 673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 15


 680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			not static allocation is being used. */
 695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxNewTCB != NULL )
 698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					this task had a statically allocated stack in case it is
 706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
 710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->pcName,
 713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										pxTaskDefinition->xRegions );
 718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
 721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							void * const pvParameters,
 736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							UBaseType_t uxPriority,
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 16


 737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
  96              		.loc 1 738 0
  97              		.cfi_startproc
  98              		@ args = 8, pretend = 0, frame = 32
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100 0000 80B5     		push	{r7, lr}
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 8CB0     		sub	sp, sp, #48
 105              		.cfi_def_cfa_offset 56
 106 0004 04AF     		add	r7, sp, #16
 107              		.cfi_def_cfa 7, 40
 108 0006 F860     		str	r0, [r7, #12]
 109 0008 B960     		str	r1, [r7, #8]
 110 000a 3B60     		str	r3, [r7]
 111 000c 1346     		mov	r3, r2	@ movhi
 112 000e FB80     		strh	r3, [r7, #6]	@ movhi
 113              	.LBB94:
 739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNewTCB;
 740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
 741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the TCB then the stack. */
 745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			allocation is being used. */
 750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxNewTCB != NULL )
 753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				be deleted later if required. */
 757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vPortFree( pxNewTCB );
 763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB = NULL;
 764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t *pxStack;
 770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 114              		.loc 1 772 0
 115 0010 FB88     		ldrh	r3, [r7, #6]
 116 0012 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 17


 117 0014 1846     		mov	r0, r3
 118 0016 FFF7FEFF 		bl	pvPortMalloc
 119 001a 7861     		str	r0, [r7, #20]
 773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxStack != NULL )
 120              		.loc 1 774 0
 121 001c 7B69     		ldr	r3, [r7, #20]
 122 001e 002B     		cmp	r3, #0
 123 0020 0ED0     		beq	.L2
 775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Allocate space for the TCB. */
 777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 124              		.loc 1 777 0
 125 0022 6020     		movs	r0, #96
 126 0024 FFF7FEFF 		bl	pvPortMalloc
 127 0028 F861     		str	r0, [r7, #28]
 778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxNewTCB != NULL )
 128              		.loc 1 779 0
 129 002a FB69     		ldr	r3, [r7, #28]
 130 002c 002B     		cmp	r3, #0
 131 002e 03D0     		beq	.L3
 780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 132              		.loc 1 782 0
 133 0030 FB69     		ldr	r3, [r7, #28]
 134 0032 7A69     		ldr	r2, [r7, #20]
 135 0034 1A63     		str	r2, [r3, #48]
 136 0036 05E0     		b	.L5
 137              	.L3:
 783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
 785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					it again. */
 788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vPortFree( pxStack );
 138              		.loc 1 788 0
 139 0038 7869     		ldr	r0, [r7, #20]
 140 003a FFF7FEFF 		bl	vPortFree
 141 003e 01E0     		b	.L5
 142              	.L2:
 789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
 792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB = NULL;
 143              		.loc 1 793 0
 144 0040 0023     		movs	r3, #0
 145 0042 FB61     		str	r3, [r7, #28]
 146              	.L5:
 147              	.LBE94:
 794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxNewTCB != NULL )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 18


 148              		.loc 1 798 0
 149 0044 FB69     		ldr	r3, [r7, #28]
 150 0046 002B     		cmp	r3, #0
 151 0048 13D0     		beq	.L6
 799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 152              		.loc 1 808 0
 153 004a FA88     		ldrh	r2, [r7, #6]
 154 004c 0023     		movs	r3, #0
 155 004e 0393     		str	r3, [sp, #12]
 156 0050 FB69     		ldr	r3, [r7, #28]
 157 0052 0293     		str	r3, [sp, #8]
 158 0054 FB6A     		ldr	r3, [r7, #44]
 159 0056 0193     		str	r3, [sp, #4]
 160 0058 BB6A     		ldr	r3, [r7, #40]
 161 005a 0093     		str	r3, [sp]
 162 005c 3B68     		ldr	r3, [r7]
 163 005e B968     		ldr	r1, [r7, #8]
 164 0060 F868     		ldr	r0, [r7, #12]
 165 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 166              		.loc 1 809 0
 167 0066 F869     		ldr	r0, [r7, #28]
 168 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
 169              		.loc 1 810 0
 170 006c 0123     		movs	r3, #1
 171 006e BB61     		str	r3, [r7, #24]
 172 0070 02E0     		b	.L7
 173              	.L6:
 811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 174              		.loc 1 814 0
 175 0072 4FF0FF33 		mov	r3, #-1
 176 0076 BB61     		str	r3, [r7, #24]
 177              	.L7:
 815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 178              		.loc 1 817 0
 179 0078 BB69     		ldr	r3, [r7, #24]
 818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 180              		.loc 1 818 0
 181 007a 1846     		mov	r0, r3
 182 007c 2037     		adds	r7, r7, #32
 183              		.cfi_def_cfa_offset 8
 184 007e BD46     		mov	sp, r7
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 19


 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 0080 80BD     		pop	{r7, pc}
 188              		.cfi_endproc
 189              	.LFE136:
 190              		.size	xTaskCreate, .-xTaskCreate
 191 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 192              		.align	2
 193              		.thumb
 194              		.thumb_func
 195              		.type	prvInitialiseNewTask, %function
 196              	prvInitialiseNewTask:
 197              	.LFB137:
 819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
 822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const uint32_t ulStackDepth,
 826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									void * const pvParameters,
 827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									UBaseType_t uxPriority,
 828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									TCB_t *pxNewTCB,
 830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 198              		.loc 1 831 0
 199              		.cfi_startproc
 200              		@ args = 16, pretend = 0, frame = 32
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 88B0     		sub	sp, sp, #32
 207              		.cfi_def_cfa_offset 40
 208 0004 00AF     		add	r7, sp, #0
 209              		.cfi_def_cfa_register 7
 210 0006 F860     		str	r0, [r7, #12]
 211 0008 B960     		str	r1, [r7, #8]
 212 000a 7A60     		str	r2, [r7, #4]
 213 000c 3B60     		str	r3, [r7]
 832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** StackType_t *pxTopOfStack;
 833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t x;
 834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 20


 847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 214              		.loc 1 853 0
 215 000e 3B6B     		ldr	r3, [r7, #48]
 216 0010 186B     		ldr	r0, [r3, #48]
 217 0012 7B68     		ldr	r3, [r7, #4]
 218 0014 9B00     		lsls	r3, r3, #2
 219 0016 1A46     		mov	r2, r3
 220 0018 A521     		movs	r1, #165
 221 001a FFF7FEFF 		bl	memset
 854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	by the port. */
 861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 222              		.loc 1 863 0
 223 001e 3B6B     		ldr	r3, [r7, #48]
 224 0020 1A6B     		ldr	r2, [r3, #48]
 225 0022 7B68     		ldr	r3, [r7, #4]
 226 0024 03F18043 		add	r3, r3, #1073741824
 227 0028 013B     		subs	r3, r3, #1
 228 002a 9B00     		lsls	r3, r3, #2
 229 002c 1344     		add	r3, r3, r2
 230 002e BB61     		str	r3, [r7, #24]
 864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 231              		.loc 1 864 0
 232 0030 BB69     		ldr	r3, [r7, #24]
 233 0032 23F00703 		bic	r3, r3, #7
 234 0036 BB61     		str	r3, [r7, #24]
 865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 235              		.loc 1 867 0
 236 0038 BB69     		ldr	r3, [r7, #24]
 237 003a 03F00703 		and	r3, r3, #7
 238 003e 002B     		cmp	r3, #0
 239 0040 09D0     		beq	.L10
 240              	.LBB95:
 241              	.LBB96:
 242              		.file 2 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h"
   1:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*
   2:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
   5:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 21


   8:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * subject to the following conditions:
  11:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  12:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  15:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  22:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  25:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  */
  27:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  28:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  29:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define PORTMACRO_H
  31:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  32:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #ifdef __cplusplus
  33:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** extern "C" {
  34:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #endif
  35:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  36:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * Port specific definitions.
  38:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  39:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * given hardware and compiler.
  41:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *
  42:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  * These settings should not be altered.
  43:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h ****  */
  45:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  46:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* Type definitions. */
  47:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portCHAR		char
  48:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portFLOAT		float
  49:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portDOUBLE		double
  50:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portLONG		long
  51:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portSHORT		short
  52:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  55:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** typedef long BaseType_t;
  57:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  59:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #else
  63:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 22


  65:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  66:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #endif
  70:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  72:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* Architecture specifics. */
  73:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  78:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portYIELD() 															\
  80:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** {																				\
  81:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 																				\
  84:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
  89:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  90:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
  96:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* Critical section management. */
  97:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 106:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 108:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 114:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 115:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 116:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #ifdef configASSERT
 117:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 118:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 119:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #endif
 120:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 121:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /* portNOP() is not required by this port. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 23


 122:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portNOP()
 123:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 124:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #define portINLINE	__inline
 125:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 126:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 127:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 128:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** #endif
 129:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 130:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 131:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** {
 132:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 133:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** BaseType_t xReturn;
 134:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 135:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 136:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 137:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 138:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 139:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	{
 140:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		xReturn = pdFALSE;
 141:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	}
 142:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	else
 143:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	{
 144:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		xReturn = pdTRUE;
 145:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	}
 146:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 147:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	return xReturn;
 148:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 149:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 150:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 151:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 152:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 153:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** {
 154:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 155:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile
 243              		.loc 2 156 0 discriminator 1
 244              		.syntax unified
 245              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 246 0042 4FF03F03 			mov r3, #63												
 247 0046 83F31188 		msr basepri, r3											
 248 004a BFF36F8F 		isb														
 249 004e BFF34F8F 		dsb														
 250              	
 251              	@ 0 "" 2
 252              		.thumb
 253              		.syntax unified
 254 0052 7B61     		str	r3, [r7, #20]
 255              	.L11:
 256              	.LBE96:
 257              	.LBE95:
 258              		.loc 1 867 0 discriminator 1
 259 0054 FEE7     		b	.L11
 260              	.L10:
 868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Also record the stack's high address, which may assist
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 24


 872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			debugging. */
 873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		performed. */
 886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the task name in the TCB. */
 891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 261              		.loc 1 891 0
 262 0056 0023     		movs	r3, #0
 263 0058 FB61     		str	r3, [r7, #28]
 264 005a 12E0     		b	.L12
 265              	.L15:
 892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 266              		.loc 1 893 0
 267 005c BA68     		ldr	r2, [r7, #8]
 268 005e FB69     		ldr	r3, [r7, #28]
 269 0060 1344     		add	r3, r3, r2
 270 0062 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 271 0064 3A6B     		ldr	r2, [r7, #48]
 272 0066 FB69     		ldr	r3, [r7, #28]
 273 0068 1344     		add	r3, r3, r2
 274 006a 3433     		adds	r3, r3, #52
 275 006c 0A46     		mov	r2, r1
 276 006e 1A70     		strb	r2, [r3]
 894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 277              		.loc 1 898 0
 278 0070 BA68     		ldr	r2, [r7, #8]
 279 0072 FB69     		ldr	r3, [r7, #28]
 280 0074 1344     		add	r3, r3, r2
 281 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 282 0078 002B     		cmp	r3, #0
 283 007a 06D0     		beq	.L20
 891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 284              		.loc 1 891 0 discriminator 2
 285 007c FB69     		ldr	r3, [r7, #28]
 286 007e 0133     		adds	r3, r3, #1
 287 0080 FB61     		str	r3, [r7, #28]
 288              	.L12:
 891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 25


 289              		.loc 1 891 0 is_stmt 0 discriminator 1
 290 0082 FB69     		ldr	r3, [r7, #28]
 291 0084 0F2B     		cmp	r3, #15
 292 0086 E9D9     		bls	.L15
 293 0088 00E0     		b	.L14
 294              	.L20:
 899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			break;
 295              		.loc 1 900 0 is_stmt 1
 296 008a 00BF     		nop
 297              	.L14:
 901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
 903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 298              		.loc 1 910 0
 299 008c 3B6B     		ldr	r3, [r7, #48]
 300 008e 0022     		movs	r2, #0
 301 0090 83F84320 		strb	r2, [r3, #67]
 911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	remove the privilege bit if one is present. */
 914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 302              		.loc 1 914 0
 303 0094 BB6A     		ldr	r3, [r7, #40]
 304 0096 062B     		cmp	r3, #6
 305 0098 01D9     		bls	.L16
 915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 306              		.loc 1 916 0
 307 009a 0623     		movs	r3, #6
 308 009c BB62     		str	r3, [r7, #40]
 309              	.L16:
 917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
 919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 310              		.loc 1 923 0
 311 009e 3B6B     		ldr	r3, [r7, #48]
 312 00a0 BA6A     		ldr	r2, [r7, #40]
 313 00a2 DA62     		str	r2, [r3, #44]
 924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 26


 931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 314              		.loc 1 931 0
 315 00a4 3B6B     		ldr	r3, [r7, #48]
 316 00a6 0433     		adds	r3, r3, #4
 317 00a8 1846     		mov	r0, r3
 318 00aa FFF7FEFF 		bl	vListInitialiseItem
 932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 319              		.loc 1 932 0
 320 00ae 3B6B     		ldr	r3, [r7, #48]
 321 00b0 1833     		adds	r3, r3, #24
 322 00b2 1846     		mov	r0, r3
 323 00b4 FFF7FEFF 		bl	vListInitialiseItem
 933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 324              		.loc 1 936 0
 325 00b8 3B6B     		ldr	r3, [r7, #48]
 326 00ba 3A6B     		ldr	r2, [r7, #48]
 327 00bc 1A61     		str	r2, [r3, #16]
 937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Event lists are always in priority order. */
 939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 328              		.loc 1 939 0
 329 00be BB6A     		ldr	r3, [r7, #40]
 330 00c0 C3F10702 		rsb	r2, r3, #7
 331 00c4 3B6B     		ldr	r3, [r7, #48]
 332 00c6 9A61     		str	r2, [r3, #24]
 940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 333              		.loc 1 940 0
 334 00c8 3B6B     		ldr	r3, [r7, #48]
 335 00ca 3A6B     		ldr	r2, [r7, #48]
 336 00cc 5A62     		str	r2, [r3, #36]
 941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#else
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 27


 965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xRegions;
 968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 337              		.loc 1 973 0
 338 00ce 0023     		movs	r3, #0
 339 00d0 FB61     		str	r3, [r7, #28]
 340 00d2 09E0     		b	.L17
 341              	.L18:
 974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 342              		.loc 1 975 0 discriminator 3
 343 00d4 3A6B     		ldr	r2, [r7, #48]
 344 00d6 FB69     		ldr	r3, [r7, #28]
 345 00d8 1033     		adds	r3, r3, #16
 346 00da 9B00     		lsls	r3, r3, #2
 347 00dc 1344     		add	r3, r3, r2
 348 00de 0022     		movs	r2, #0
 349 00e0 5A60     		str	r2, [r3, #4]
 973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 350              		.loc 1 973 0 discriminator 3
 351 00e2 FB69     		ldr	r3, [r7, #28]
 352 00e4 0133     		adds	r3, r3, #1
 353 00e6 FB61     		str	r3, [r7, #28]
 354              	.L17:
 973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 355              		.loc 1 973 0 is_stmt 0 discriminator 1
 356 00e8 FB69     		ldr	r3, [r7, #28]
 357 00ea 042B     		cmp	r3, #4
 358 00ec F2D9     		bls	.L18
 976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
 977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 359              		.loc 1 982 0 is_stmt 1
 360 00ee 3B6B     		ldr	r3, [r7, #48]
 361 00f0 0022     		movs	r2, #0
 362 00f2 9A65     		str	r2, [r3, #88]
 983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 363              		.loc 1 983 0
 364 00f4 3B6B     		ldr	r3, [r7, #48]
 365 00f6 0022     		movs	r2, #0
 366 00f8 83F85C20 		strb	r2, [r3, #92]
 984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 28


 990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
 999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the top of stack variable is updated. */
1004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 367              		.loc 1 1010 0
 368 00fc 3A68     		ldr	r2, [r7]
 369 00fe F968     		ldr	r1, [r7, #12]
 370 0100 B869     		ldr	r0, [r7, #24]
 371 0102 FFF7FEFF 		bl	pxPortInitialiseStack
 372 0106 0246     		mov	r2, r0
 373 0108 3B6B     		ldr	r3, [r7, #48]
 374 010a 1A60     		str	r2, [r3]
1011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 375              		.loc 1 1014 0
 376 010c FB6A     		ldr	r3, [r7, #44]
 377 010e 002B     		cmp	r3, #0
 378 0110 02D0     		beq	.L21
1015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 379              		.loc 1 1018 0
 380 0112 FB6A     		ldr	r3, [r7, #44]
 381 0114 3A6B     		ldr	r2, [r7, #48]
 382 0116 1A60     		str	r2, [r3]
 383              	.L21:
1019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
1021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 384              		.loc 1 1024 0
 385 0118 00BF     		nop
 386 011a 2037     		adds	r7, r7, #32
 387              		.cfi_def_cfa_offset 8
 388 011c BD46     		mov	sp, r7
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 29


 389              		.cfi_def_cfa_register 13
 390              		@ sp needed
 391 011e 80BD     		pop	{r7, pc}
 392              		.cfi_endproc
 393              	.LFE137:
 394              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 395              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 396              		.align	2
 397              		.thumb
 398              		.thumb_func
 399              		.type	prvAddNewTaskToReadyList, %function
 400              	prvAddNewTaskToReadyList:
 401              	.LFB138:
1025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 402              		.loc 1 1028 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 80B5     		push	{r7, lr}
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 7, -8
 409              		.cfi_offset 14, -4
 410 0002 82B0     		sub	sp, sp, #8
 411              		.cfi_def_cfa_offset 16
 412 0004 00AF     		add	r7, sp, #0
 413              		.cfi_def_cfa_register 7
 414 0006 7860     		str	r0, [r7, #4]
1029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	updated. */
1031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 415              		.loc 1 1031 0
 416 0008 FFF7FEFF 		bl	vPortEnterCritical
1032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 417              		.loc 1 1033 0
 418 000c 2B4B     		ldr	r3, .L28
 419 000e 1B68     		ldr	r3, [r3]
 420 0010 0133     		adds	r3, r3, #1
 421 0012 2A4A     		ldr	r2, .L28
 422 0014 1360     		str	r3, [r2]
1034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 423              		.loc 1 1034 0
 424 0016 2A4B     		ldr	r3, .L28+4
 425 0018 1B68     		ldr	r3, [r3]
 426 001a 002B     		cmp	r3, #0
 427 001c 09D1     		bne	.L23
1035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the suspended state - make this the current task. */
1038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 428              		.loc 1 1038 0
 429 001e 284A     		ldr	r2, .L28+4
 430 0020 7B68     		ldr	r3, [r7, #4]
 431 0022 1360     		str	r3, [r2]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 30


1039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 432              		.loc 1 1040 0
 433 0024 254B     		ldr	r3, .L28
 434 0026 1B68     		ldr	r3, [r3]
 435 0028 012B     		cmp	r3, #1
 436 002a 10D1     		bne	.L24
1041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				initialisation required.  We will not recover if this call
1044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				fails, but we will report the failure. */
1045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvInitialiseTaskLists();
 437              		.loc 1 1045 0
 438 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 439 0030 0DE0     		b	.L24
 440              	.L23:
1046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			current task if it is the highest priority task to be created
1056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			so far. */
1057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 441              		.loc 1 1057 0
 442 0032 244B     		ldr	r3, .L28+8
 443 0034 1B68     		ldr	r3, [r3]
 444 0036 002B     		cmp	r3, #0
 445 0038 09D1     		bne	.L24
1058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 446              		.loc 1 1059 0
 447 003a 214B     		ldr	r3, .L28+4
 448 003c 1B68     		ldr	r3, [r3]
 449 003e DA6A     		ldr	r2, [r3, #44]
 450 0040 7B68     		ldr	r3, [r7, #4]
 451 0042 DB6A     		ldr	r3, [r3, #44]
 452 0044 9A42     		cmp	r2, r3
 453 0046 02D8     		bhi	.L24
1060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 454              		.loc 1 1061 0
 455 0048 1D4A     		ldr	r2, .L28+4
 456 004a 7B68     		ldr	r3, [r7, #4]
 457 004c 1360     		str	r3, [r2]
 458              	.L24:
1062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 31


1069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxTaskNumber++;
 459              		.loc 1 1074 0
 460 004e 1E4B     		ldr	r3, .L28+12
 461 0050 1B68     		ldr	r3, [r3]
 462 0052 0133     		adds	r3, r3, #1
 463 0054 1C4A     		ldr	r2, .L28+12
 464 0056 1360     		str	r3, [r2]
1075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 465              		.loc 1 1084 0
 466 0058 7B68     		ldr	r3, [r7, #4]
 467 005a DA6A     		ldr	r2, [r3, #44]
 468 005c 1B4B     		ldr	r3, .L28+16
 469 005e 1B68     		ldr	r3, [r3]
 470 0060 9A42     		cmp	r2, r3
 471 0062 03D9     		bls	.L25
 472              		.loc 1 1084 0 is_stmt 0 discriminator 1
 473 0064 7B68     		ldr	r3, [r7, #4]
 474 0066 DB6A     		ldr	r3, [r3, #44]
 475 0068 184A     		ldr	r2, .L28+16
 476 006a 1360     		str	r3, [r2]
 477              	.L25:
 478              		.loc 1 1084 0 discriminator 3
 479 006c 7B68     		ldr	r3, [r7, #4]
 480 006e DA6A     		ldr	r2, [r3, #44]
 481 0070 1346     		mov	r3, r2
 482 0072 9B00     		lsls	r3, r3, #2
 483 0074 1344     		add	r3, r3, r2
 484 0076 9B00     		lsls	r3, r3, #2
 485 0078 154A     		ldr	r2, .L28+20
 486 007a 1A44     		add	r2, r2, r3
 487 007c 7B68     		ldr	r3, [r7, #4]
 488 007e 0433     		adds	r3, r3, #4
 489 0080 1946     		mov	r1, r3
 490 0082 1046     		mov	r0, r2
 491 0084 FFF7FEFF 		bl	vListInsertEnd
1085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
 492              		.loc 1 1088 0 is_stmt 1 discriminator 3
 493 0088 FFF7FEFF 		bl	vPortExitCritical
1089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 32


 494              		.loc 1 1090 0 discriminator 3
 495 008c 0D4B     		ldr	r3, .L28+8
 496 008e 1B68     		ldr	r3, [r3]
 497 0090 002B     		cmp	r3, #0
 498 0092 0ED0     		beq	.L27
1091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		then it should run now. */
1094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 499              		.loc 1 1094 0
 500 0094 0A4B     		ldr	r3, .L28+4
 501 0096 1B68     		ldr	r3, [r3]
 502 0098 DA6A     		ldr	r2, [r3, #44]
 503 009a 7B68     		ldr	r3, [r7, #4]
 504 009c DB6A     		ldr	r3, [r3, #44]
 505 009e 9A42     		cmp	r2, r3
 506 00a0 07D2     		bcs	.L27
1095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 507              		.loc 1 1096 0
 508 00a2 0C4B     		ldr	r3, .L28+24
 509 00a4 4FF08052 		mov	r2, #268435456
 510 00a8 1A60     		str	r2, [r3]
 511              		.syntax unified
 512              	@ 1096 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 513 00aa BFF34F8F 		dsb
 514              	@ 0 "" 2
 515              	@ 1096 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 516 00ae BFF36F8F 		isb
 517              	@ 0 "" 2
 518              		.thumb
 519              		.syntax unified
 520              	.L27:
1097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
1104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 521              		.loc 1 1107 0
 522 00b2 00BF     		nop
 523 00b4 0837     		adds	r7, r7, #8
 524              		.cfi_def_cfa_offset 8
 525 00b6 BD46     		mov	sp, r7
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 00b8 80BD     		pop	{r7, pc}
 529              	.L29:
 530 00ba 00BF     		.align	2
 531              	.L28:
 532 00bc 00010000 		.word	uxCurrentNumberOfTasks
 533 00c0 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 33


 534 00c4 0C010000 		.word	xSchedulerRunning
 535 00c8 1C010000 		.word	uxTaskNumber
 536 00cc 08010000 		.word	uxTopReadyPriority
 537 00d0 04000000 		.word	pxReadyTasksLists
 538 00d4 04ED00E0 		.word	-536810236
 539              		.cfi_endproc
 540              	.LFE138:
 541              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 542              		.section	.text.vTaskDelete,"ax",%progbits
 543              		.align	2
 544              		.global	vTaskDelete
 545              		.thumb
 546              		.thumb_func
 547              		.type	vTaskDelete, %function
 548              	vTaskDelete:
 549              	.LFB139:
1108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 550              		.loc 1 1113 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 16
 553              		@ frame_needed = 1, uses_anonymous_args = 0
 554 0000 80B5     		push	{r7, lr}
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 84B0     		sub	sp, sp, #16
 559              		.cfi_def_cfa_offset 24
 560 0004 00AF     		add	r7, sp, #0
 561              		.cfi_def_cfa_register 7
 562 0006 7860     		str	r0, [r7, #4]
1114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 563              		.loc 1 1116 0
 564 0008 FFF7FEFF 		bl	vPortEnterCritical
1117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			being deleted. */
1120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 565              		.loc 1 1120 0
 566 000c 7B68     		ldr	r3, [r7, #4]
 567 000e 002B     		cmp	r3, #0
 568 0010 02D1     		bne	.L31
 569              		.loc 1 1120 0 is_stmt 0 discriminator 1
 570 0012 2C4B     		ldr	r3, .L40
 571 0014 1B68     		ldr	r3, [r3]
 572 0016 00E0     		b	.L32
 573              	.L31:
 574              		.loc 1 1120 0 discriminator 2
 575 0018 7B68     		ldr	r3, [r7, #4]
 576              	.L32:
 577              		.loc 1 1120 0 discriminator 4
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 34


 578 001a FB60     		str	r3, [r7, #12]
1121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Remove task from the ready list. */
1123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 579              		.loc 1 1123 0 is_stmt 1 discriminator 4
 580 001c FB68     		ldr	r3, [r7, #12]
 581 001e 0433     		adds	r3, r3, #4
 582 0020 1846     		mov	r0, r3
 583 0022 FFF7FEFF 		bl	uxListRemove
1124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 584              		.loc 1 1133 0 discriminator 4
 585 0026 FB68     		ldr	r3, [r7, #12]
 586 0028 9B6A     		ldr	r3, [r3, #40]
 587 002a 002B     		cmp	r3, #0
 588 002c 04D0     		beq	.L33
1134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 589              		.loc 1 1135 0
 590 002e FB68     		ldr	r3, [r7, #12]
 591 0030 1833     		adds	r3, r3, #24
 592 0032 1846     		mov	r0, r3
 593 0034 FFF7FEFF 		bl	uxListRemove
 594              	.L33:
1136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			not return. */
1146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxTaskNumber++;
 595              		.loc 1 1146 0
 596 0038 234B     		ldr	r3, .L40+4
 597 003a 1B68     		ldr	r3, [r3]
 598 003c 0133     		adds	r3, r3, #1
 599 003e 224A     		ldr	r2, .L40+4
 600 0040 1360     		str	r3, [r2]
1147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 601              		.loc 1 1148 0
 602 0042 204B     		ldr	r3, .L40
 603 0044 1B68     		ldr	r3, [r3]
 604 0046 FA68     		ldr	r2, [r7, #12]
 605 0048 9A42     		cmp	r2, r3
 606 004a 0BD1     		bne	.L34
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 35


1149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task itself, as a context switch to another task is required.
1152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 607              		.loc 1 1155 0
 608 004c FB68     		ldr	r3, [r7, #12]
 609 004e 0433     		adds	r3, r3, #4
 610 0050 1946     		mov	r1, r3
 611 0052 1E48     		ldr	r0, .L40+8
 612 0054 FFF7FEFF 		bl	vListInsertEnd
1156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 613              		.loc 1 1160 0
 614 0058 1D4B     		ldr	r3, .L40+12
 615 005a 1B68     		ldr	r3, [r3]
 616 005c 0133     		adds	r3, r3, #1
 617 005e 1C4A     		ldr	r2, .L40+12
 618 0060 1360     		str	r3, [r2]
 619 0062 09E0     		b	.L35
 620              	.L34:
1161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				required. */
1167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 621              		.loc 1 1171 0
 622 0064 1B4B     		ldr	r3, .L40+16
 623 0066 1B68     		ldr	r3, [r3]
 624 0068 013B     		subs	r3, r3, #1
 625 006a 1A4A     		ldr	r2, .L40+16
 626 006c 1360     		str	r3, [r2]
1172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 627              		.loc 1 1172 0
 628 006e F868     		ldr	r0, [r7, #12]
 629 0070 FFF7FEFF 		bl	prvDeleteTCB
1173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the task that has just been deleted. */
1176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 630              		.loc 1 1176 0
 631 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 632              	.L35:
1177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 36


1180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 633              		.loc 1 1181 0
 634 0078 FFF7FEFF 		bl	vPortExitCritical
1182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		been deleted. */
1185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 635              		.loc 1 1185 0
 636 007c 164B     		ldr	r3, .L40+20
 637 007e 1B68     		ldr	r3, [r3]
 638 0080 002B     		cmp	r3, #0
 639 0082 1AD0     		beq	.L39
1186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 640              		.loc 1 1187 0
 641 0084 0F4B     		ldr	r3, .L40
 642 0086 1B68     		ldr	r3, [r3]
 643 0088 FA68     		ldr	r2, [r7, #12]
 644 008a 9A42     		cmp	r2, r3
 645 008c 15D1     		bne	.L39
1188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 646              		.loc 1 1189 0
 647 008e 134B     		ldr	r3, .L40+24
 648 0090 1B68     		ldr	r3, [r3]
 649 0092 002B     		cmp	r3, #0
 650 0094 09D0     		beq	.L37
 651              	.LBB97:
 652              	.LBB98:
 653              		.loc 2 156 0 discriminator 1
 654              		.syntax unified
 655              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 656 0096 4FF03F03 			mov r3, #63												
 657 009a 83F31188 		msr basepri, r3											
 658 009e BFF36F8F 		isb														
 659 00a2 BFF34F8F 		dsb														
 660              	
 661              	@ 0 "" 2
 662              		.thumb
 663              		.syntax unified
 664 00a6 BB60     		str	r3, [r7, #8]
 665              	.L38:
 666              	.LBE98:
 667              	.LBE97:
 668              		.loc 1 1189 0 discriminator 1
 669 00a8 FEE7     		b	.L38
 670              	.L37:
1190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 671              		.loc 1 1190 0
 672 00aa 0D4B     		ldr	r3, .L40+28
 673 00ac 4FF08052 		mov	r2, #268435456
 674 00b0 1A60     		str	r2, [r3]
 675              		.syntax unified
 676              	@ 1190 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 677 00b2 BFF34F8F 		dsb
 678              	@ 0 "" 2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 37


 679              	@ 1190 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 680 00b6 BFF36F8F 		isb
 681              	@ 0 "" 2
 682              		.thumb
 683              		.syntax unified
 684              	.L39:
1191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 685              		.loc 1 1197 0
 686 00ba 00BF     		nop
 687 00bc 1037     		adds	r7, r7, #16
 688              		.cfi_def_cfa_offset 8
 689 00be BD46     		mov	sp, r7
 690              		.cfi_def_cfa_register 13
 691              		@ sp needed
 692 00c0 80BD     		pop	{r7, pc}
 693              	.L41:
 694 00c2 00BF     		.align	2
 695              	.L40:
 696 00c4 00000000 		.word	pxCurrentTCB
 697 00c8 1C010000 		.word	uxTaskNumber
 698 00cc D4000000 		.word	xTasksWaitingTermination
 699 00d0 E8000000 		.word	uxDeletedTasksWaitingCleanUp
 700 00d4 00010000 		.word	uxCurrentNumberOfTasks
 701 00d8 0C010000 		.word	xSchedulerRunning
 702 00dc 28010000 		.word	uxSchedulerSuspended
 703 00e0 04ED00E0 		.word	-536810236
 704              		.cfi_endproc
 705              	.LFE139:
 706              		.size	vTaskDelete, .-vTaskDelete
 707              		.section	.text.vTaskDelayUntil,"ax",%progbits
 708              		.align	2
 709              		.global	vTaskDelayUntil
 710              		.thumb
 711              		.thumb_func
 712              		.type	vTaskDelayUntil, %function
 713              	vTaskDelayUntil:
 714              	.LFB140:
1198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 715              		.loc 1 1205 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 40
 718              		@ frame_needed = 1, uses_anonymous_args = 0
 719 0000 80B5     		push	{r7, lr}
 720              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 38


 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 8AB0     		sub	sp, sp, #40
 724              		.cfi_def_cfa_offset 48
 725 0004 00AF     		add	r7, sp, #0
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 728 0008 3960     		str	r1, [r7]
1206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TickType_t xTimeToWake;
1207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 729              		.loc 1 1207 0
 730 000a 0023     		movs	r3, #0
 731 000c 7B62     		str	r3, [r7, #36]
1208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 732              		.loc 1 1209 0
 733 000e 7B68     		ldr	r3, [r7, #4]
 734 0010 002B     		cmp	r3, #0
 735 0012 09D1     		bne	.L43
 736              	.LBB99:
 737              	.LBB100:
 738              		.loc 2 156 0 discriminator 1
 739              		.syntax unified
 740              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 741 0014 4FF03F03 			mov r3, #63												
 742 0018 83F31188 		msr basepri, r3											
 743 001c BFF36F8F 		isb														
 744 0020 BFF34F8F 		dsb														
 745              	
 746              	@ 0 "" 2
 747              		.thumb
 748              		.syntax unified
 749 0024 FB60     		str	r3, [r7, #12]
 750              	.L44:
 751              	.LBE100:
 752              	.LBE99:
 753              		.loc 1 1209 0 discriminator 1
 754 0026 FEE7     		b	.L44
 755              	.L43:
1210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 756              		.loc 1 1210 0
 757 0028 3B68     		ldr	r3, [r7]
 758 002a 002B     		cmp	r3, #0
 759 002c 09D1     		bne	.L45
 760              	.LBB101:
 761              	.LBB102:
 762              		.loc 2 156 0 discriminator 1
 763              		.syntax unified
 764              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 765 002e 4FF03F03 			mov r3, #63												
 766 0032 83F31188 		msr basepri, r3											
 767 0036 BFF36F8F 		isb														
 768 003a BFF34F8F 		dsb														
 769              	
 770              	@ 0 "" 2
 771              		.thumb
 772              		.syntax unified
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 39


 773 003e 3B61     		str	r3, [r7, #16]
 774              	.L46:
 775              	.LBE102:
 776              	.LBE101:
 777              		.loc 1 1210 0 discriminator 2
 778 0040 FEE7     		b	.L46
 779              	.L45:
1211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 780              		.loc 1 1211 0
 781 0042 294B     		ldr	r3, .L55
 782 0044 1B68     		ldr	r3, [r3]
 783 0046 002B     		cmp	r3, #0
 784 0048 09D0     		beq	.L47
 785              	.LBB103:
 786              	.LBB104:
 787              		.loc 2 156 0 discriminator 1
 788              		.syntax unified
 789              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 790 004a 4FF03F03 			mov r3, #63												
 791 004e 83F31188 		msr basepri, r3											
 792 0052 BFF36F8F 		isb														
 793 0056 BFF34F8F 		dsb														
 794              	
 795              	@ 0 "" 2
 796              		.thumb
 797              		.syntax unified
 798 005a 7B61     		str	r3, [r7, #20]
 799              	.L48:
 800              	.LBE104:
 801              	.LBE103:
 802              		.loc 1 1211 0 discriminator 3
 803 005c FEE7     		b	.L48
 804              	.L47:
1212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
 805              		.loc 1 1213 0
 806 005e FFF7FEFF 		bl	vTaskSuspendAll
 807              	.LBB105:
1214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			block. */
1217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 808              		.loc 1 1217 0
 809 0062 224B     		ldr	r3, .L55+4
 810 0064 1B68     		ldr	r3, [r3]
 811 0066 3B62     		str	r3, [r7, #32]
1218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 812              		.loc 1 1220 0
 813 0068 7B68     		ldr	r3, [r7, #4]
 814 006a 1A68     		ldr	r2, [r3]
 815 006c 3B68     		ldr	r3, [r7]
 816 006e 1344     		add	r3, r3, r2
 817 0070 FB61     		str	r3, [r7, #28]
1221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 40


 818              		.loc 1 1222 0
 819 0072 7B68     		ldr	r3, [r7, #4]
 820 0074 1A68     		ldr	r2, [r3]
 821 0076 3B6A     		ldr	r3, [r7, #32]
 822 0078 9A42     		cmp	r2, r3
 823 007a 0BD9     		bls	.L49
1223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 824              		.loc 1 1229 0
 825 007c 7B68     		ldr	r3, [r7, #4]
 826 007e 1A68     		ldr	r2, [r3]
 827 0080 FB69     		ldr	r3, [r7, #28]
 828 0082 9A42     		cmp	r2, r3
 829 0084 11D9     		bls	.L50
 830              		.loc 1 1229 0 is_stmt 0 discriminator 1
 831 0086 FA69     		ldr	r2, [r7, #28]
 832 0088 3B6A     		ldr	r3, [r7, #32]
 833 008a 9A42     		cmp	r2, r3
 834 008c 0DD9     		bls	.L50
1230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xShouldDelay = pdTRUE;
 835              		.loc 1 1231 0 is_stmt 1
 836 008e 0123     		movs	r3, #1
 837 0090 7B62     		str	r3, [r7, #36]
 838 0092 0AE0     		b	.L50
 839              	.L49:
1232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				tick time is less than the wake time. */
1243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 840              		.loc 1 1243 0
 841 0094 7B68     		ldr	r3, [r7, #4]
 842 0096 1A68     		ldr	r2, [r3]
 843 0098 FB69     		ldr	r3, [r7, #28]
 844 009a 9A42     		cmp	r2, r3
 845 009c 03D8     		bhi	.L51
 846              		.loc 1 1243 0 is_stmt 0 discriminator 1
 847 009e FA69     		ldr	r2, [r7, #28]
 848 00a0 3B6A     		ldr	r3, [r7, #32]
 849 00a2 9A42     		cmp	r2, r3
 850 00a4 01D9     		bls	.L50
 851              	.L51:
1244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xShouldDelay = pdTRUE;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 41


 852              		.loc 1 1245 0 is_stmt 1
 853 00a6 0123     		movs	r3, #1
 854 00a8 7B62     		str	r3, [r7, #36]
 855              	.L50:
1246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 856              		.loc 1 1254 0
 857 00aa 7B68     		ldr	r3, [r7, #4]
 858 00ac FA69     		ldr	r2, [r7, #28]
 859 00ae 1A60     		str	r2, [r3]
1255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 860              		.loc 1 1256 0
 861 00b0 7B6A     		ldr	r3, [r7, #36]
 862 00b2 002B     		cmp	r3, #0
 863 00b4 06D0     		beq	.L52
1257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 864              		.loc 1 1262 0
 865 00b6 FA69     		ldr	r2, [r7, #28]
 866 00b8 3B6A     		ldr	r3, [r7, #32]
 867 00ba D31A     		subs	r3, r2, r3
 868 00bc 0021     		movs	r1, #0
 869 00be 1846     		mov	r0, r3
 870 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 871              	.L52:
 872              	.LBE105:
1263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 873              		.loc 1 1269 0
 874 00c4 FFF7FEFF 		bl	xTaskResumeAll
 875 00c8 B861     		str	r0, [r7, #24]
1270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		have put ourselves to sleep. */
1273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 876              		.loc 1 1273 0
 877 00ca BB69     		ldr	r3, [r7, #24]
 878 00cc 002B     		cmp	r3, #0
 879 00ce 07D1     		bne	.L54
1274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 42


1275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			portYIELD_WITHIN_API();
 880              		.loc 1 1275 0
 881 00d0 074B     		ldr	r3, .L55+8
 882 00d2 4FF08052 		mov	r2, #268435456
 883 00d6 1A60     		str	r2, [r3]
 884              		.syntax unified
 885              	@ 1275 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 886 00d8 BFF34F8F 		dsb
 887              	@ 0 "" 2
 888              	@ 1275 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 889 00dc BFF36F8F 		isb
 890              	@ 0 "" 2
 891              		.thumb
 892              		.syntax unified
 893              	.L54:
1276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 894              		.loc 1 1281 0
 895 00e0 00BF     		nop
 896 00e2 2837     		adds	r7, r7, #40
 897              		.cfi_def_cfa_offset 8
 898 00e4 BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 00e6 80BD     		pop	{r7, pc}
 902              	.L56:
 903              		.align	2
 904              	.L55:
 905 00e8 28010000 		.word	uxSchedulerSuspended
 906 00ec 04010000 		.word	xTickCount
 907 00f0 04ED00E0 		.word	-536810236
 908              		.cfi_endproc
 909              	.LFE140:
 910              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 911              		.section	.text.vTaskDelay,"ax",%progbits
 912              		.align	2
 913              		.global	vTaskDelay
 914              		.thumb
 915              		.thumb_func
 916              		.type	vTaskDelay, %function
 917              	vTaskDelay:
 918              	.LFB141:
1282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 919              		.loc 1 1289 0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 43


 922              		@ frame_needed = 1, uses_anonymous_args = 0
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 84B0     		sub	sp, sp, #16
 928              		.cfi_def_cfa_offset 24
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
1290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 932              		.loc 1 1290 0
 933 0008 0023     		movs	r3, #0
 934 000a FB60     		str	r3, [r7, #12]
1291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 935              		.loc 1 1293 0
 936 000c 7B68     		ldr	r3, [r7, #4]
 937 000e 002B     		cmp	r3, #0
 938 0010 16D0     		beq	.L58
1294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 939              		.loc 1 1295 0
 940 0012 134B     		ldr	r3, .L63
 941 0014 1B68     		ldr	r3, [r3]
 942 0016 002B     		cmp	r3, #0
 943 0018 09D0     		beq	.L59
 944              	.LBB106:
 945              	.LBB107:
 946              		.loc 2 156 0 discriminator 1
 947              		.syntax unified
 948              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 949 001a 4FF03F03 			mov r3, #63												
 950 001e 83F31188 		msr basepri, r3											
 951 0022 BFF36F8F 		isb														
 952 0026 BFF34F8F 		dsb														
 953              	
 954              	@ 0 "" 2
 955              		.thumb
 956              		.syntax unified
 957 002a BB60     		str	r3, [r7, #8]
 958              	.L60:
 959              	.LBE107:
 960              	.LBE106:
 961              		.loc 1 1295 0 discriminator 1
 962 002c FEE7     		b	.L60
 963              	.L59:
1296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSuspendAll();
 964              		.loc 1 1296 0
 965 002e FFF7FEFF 		bl	vTaskSuspendAll
1297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_DELAY();
1299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task that is removed from the event list while the
1301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 44


1303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				is resumed.
1304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				executing task. */
1307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 966              		.loc 1 1307 0
 967 0032 0021     		movs	r1, #0
 968 0034 7868     		ldr	r0, [r7, #4]
 969 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 970              		.loc 1 1309 0
 971 003a FFF7FEFF 		bl	xTaskResumeAll
 972 003e F860     		str	r0, [r7, #12]
 973              	.L58:
1310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		have put ourselves to sleep. */
1318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 974              		.loc 1 1318 0
 975 0040 FB68     		ldr	r3, [r7, #12]
 976 0042 002B     		cmp	r3, #0
 977 0044 07D1     		bne	.L62
1319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			portYIELD_WITHIN_API();
 978              		.loc 1 1320 0
 979 0046 074B     		ldr	r3, .L63+4
 980 0048 4FF08052 		mov	r2, #268435456
 981 004c 1A60     		str	r2, [r3]
 982              		.syntax unified
 983              	@ 1320 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 984 004e BFF34F8F 		dsb
 985              	@ 0 "" 2
 986              	@ 1320 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 987 0052 BFF36F8F 		isb
 988              	@ 0 "" 2
 989              		.thumb
 990              		.syntax unified
 991              	.L62:
1321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 992              		.loc 1 1326 0
 993 0056 00BF     		nop
 994 0058 1037     		adds	r7, r7, #16
 995              		.cfi_def_cfa_offset 8
 996 005a BD46     		mov	sp, r7
 997              		.cfi_def_cfa_register 13
 998              		@ sp needed
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 45


 999 005c 80BD     		pop	{r7, pc}
 1000              	.L64:
 1001 005e 00BF     		.align	2
 1002              	.L63:
 1003 0060 28010000 		.word	uxSchedulerSuspended
 1004 0064 04ED00E0 		.word	-536810236
 1005              		.cfi_endproc
 1006              	.LFE141:
 1007              		.size	vTaskDelay, .-vTaskDelay
 1008              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1009              		.align	2
 1010              		.global	uxTaskPriorityGet
 1011              		.thumb
 1012              		.thumb_func
 1013              		.type	uxTaskPriorityGet, %function
 1014              	uxTaskPriorityGet:
 1015              	.LFB142:
1327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	eTaskState eReturn;
1336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	List_t *pxStateList;
1337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTCB );
1340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eRunning;
1345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
1349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
1353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				lists. */
1358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eBlocked;
1359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					indefinitely? */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 46


1367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						eReturn = eSuspended;
1370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						eReturn = eBlocked;
1374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					all. */
1384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					eReturn = eDeleted;
1385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				Ready (including pending ready) state. */
1392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eReady;
1393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return eReturn;
1397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1016              		.loc 1 1405 0
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 16
 1019              		@ frame_needed = 1, uses_anonymous_args = 0
 1020 0000 80B5     		push	{r7, lr}
 1021              		.cfi_def_cfa_offset 8
 1022              		.cfi_offset 7, -8
 1023              		.cfi_offset 14, -4
 1024 0002 84B0     		sub	sp, sp, #16
 1025              		.cfi_def_cfa_offset 24
 1026 0004 00AF     		add	r7, sp, #0
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
1406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
1408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 1029              		.loc 1 1409 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 47


 1030 0008 FFF7FEFF 		bl	vPortEnterCritical
1410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1031              		.loc 1 1413 0
 1032 000c 7B68     		ldr	r3, [r7, #4]
 1033 000e 002B     		cmp	r3, #0
 1034 0010 02D1     		bne	.L66
 1035              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1036 0012 074B     		ldr	r3, .L69
 1037 0014 1B68     		ldr	r3, [r3]
 1038 0016 00E0     		b	.L67
 1039              	.L66:
 1040              		.loc 1 1413 0 discriminator 2
 1041 0018 7B68     		ldr	r3, [r7, #4]
 1042              	.L67:
 1043              		.loc 1 1413 0 discriminator 4
 1044 001a FB60     		str	r3, [r7, #12]
1414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1045              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1046 001c FB68     		ldr	r3, [r7, #12]
 1047 001e DB6A     		ldr	r3, [r3, #44]
 1048 0020 BB60     		str	r3, [r7, #8]
1415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1049              		.loc 1 1416 0 discriminator 4
 1050 0022 FFF7FEFF 		bl	vPortExitCritical
1417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
 1051              		.loc 1 1418 0 discriminator 4
 1052 0026 BB68     		ldr	r3, [r7, #8]
1419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1053              		.loc 1 1419 0 discriminator 4
 1054 0028 1846     		mov	r0, r3
 1055 002a 1037     		adds	r7, r7, #16
 1056              		.cfi_def_cfa_offset 8
 1057 002c BD46     		mov	sp, r7
 1058              		.cfi_def_cfa_register 13
 1059              		@ sp needed
 1060 002e 80BD     		pop	{r7, pc}
 1061              	.L70:
 1062              		.align	2
 1063              	.L69:
 1064 0030 00000000 		.word	pxCurrentTCB
 1065              		.cfi_endproc
 1066              	.LFE142:
 1067              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1068              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1069              		.align	2
 1070              		.global	uxTaskPriorityGetFromISR
 1071              		.thumb
 1072              		.thumb_func
 1073              		.type	uxTaskPriorityGetFromISR, %function
 1074              	uxTaskPriorityGetFromISR:
 1075              	.LFB143:
1420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 48


1421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1076              		.loc 1 1427 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 32
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 0000 80B5     		push	{r7, lr}
 1081              		.cfi_def_cfa_offset 8
 1082              		.cfi_offset 7, -8
 1083              		.cfi_offset 14, -4
 1084 0002 88B0     		sub	sp, sp, #32
 1085              		.cfi_def_cfa_offset 40
 1086 0004 00AF     		add	r7, sp, #0
 1087              		.cfi_def_cfa_register 7
 1088 0006 7860     		str	r0, [r7, #4]
1428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
1446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1089              		.loc 1 1447 0
 1090 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1091              	.LBB108:
 1092              	.LBB109:
 157:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 158:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 159:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 160:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	isb														\n" \
 161:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	dsb														\n" \
 162:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 163:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	);
 164:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 165:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 166:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 167:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 168:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 169:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** {
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 49


 170:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 171:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 172:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile
 1093              		.loc 2 172 0
 1094              		.syntax unified
 1095              	@ 172 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1096 000c EFF31182 			mrs r2, basepri											
 1097 0010 4FF03F03 		mov r3, #63												
 1098 0014 83F31188 		msr basepri, r3											
 1099 0018 BFF36F8F 		isb														
 1100 001c BFF34F8F 		dsb														
 1101              	
 1102              	@ 0 "" 2
 1103              		.thumb
 1104              		.syntax unified
 1105 0020 FA60     		str	r2, [r7, #12]
 1106 0022 BB60     		str	r3, [r7, #8]
 173:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 174:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 175:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 176:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 177:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	isb														\n" \
 178:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		"	dsb														\n" \
 179:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 180:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	);
 181:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 182:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 183:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	warnings. */
 184:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1107              		.loc 2 184 0
 1108 0024 FB68     		ldr	r3, [r7, #12]
 1109              	.LBE109:
 1110              	.LBE108:
1448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1111              		.loc 1 1449 0
 1112 0026 BB61     		str	r3, [r7, #24]
1450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is being queried. */
1453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1113              		.loc 1 1453 0
 1114 0028 7B68     		ldr	r3, [r7, #4]
 1115 002a 002B     		cmp	r3, #0
 1116 002c 02D1     		bne	.L73
 1117              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1118 002e 094B     		ldr	r3, .L76
 1119 0030 1B68     		ldr	r3, [r3]
 1120 0032 00E0     		b	.L74
 1121              	.L73:
 1122              		.loc 1 1453 0 discriminator 2
 1123 0034 7B68     		ldr	r3, [r7, #4]
 1124              	.L74:
 1125              		.loc 1 1453 0 discriminator 4
 1126 0036 7B61     		str	r3, [r7, #20]
1454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1127              		.loc 1 1454 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 50


 1128 0038 7B69     		ldr	r3, [r7, #20]
 1129 003a DB6A     		ldr	r3, [r3, #44]
 1130 003c 3B61     		str	r3, [r7, #16]
 1131 003e BB69     		ldr	r3, [r7, #24]
 1132 0040 FB61     		str	r3, [r7, #28]
 1133              	.LBB110:
 1134              	.LBB111:
 185:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 186:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 187:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 
 188:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 189:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** {
 190:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	__asm volatile
 1135              		.loc 2 190 0 discriminator 4
 1136 0042 FB69     		ldr	r3, [r7, #28]
 1137              		.syntax unified
 1138              	@ 190 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1139 0044 83F31188 			msr basepri, r3	
 1140              	@ 0 "" 2
 1141              		.thumb
 1142              		.syntax unified
 1143              	.LBE111:
 1144              	.LBE110:
1455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
 1145              		.loc 1 1458 0 discriminator 4
 1146 0048 3B69     		ldr	r3, [r7, #16]
1459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1147              		.loc 1 1459 0 discriminator 4
 1148 004a 1846     		mov	r0, r3
 1149 004c 2037     		adds	r7, r7, #32
 1150              		.cfi_def_cfa_offset 8
 1151 004e BD46     		mov	sp, r7
 1152              		.cfi_def_cfa_register 13
 1153              		@ sp needed
 1154 0050 80BD     		pop	{r7, pc}
 1155              	.L77:
 1156 0052 00BF     		.align	2
 1157              	.L76:
 1158 0054 00000000 		.word	pxCurrentTCB
 1159              		.cfi_endproc
 1160              	.LFE143:
 1161              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1162              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1163              		.align	2
 1164              		.global	vTaskPrioritySet
 1165              		.thumb
 1166              		.thumb_func
 1167              		.type	vTaskPrioritySet, %function
 1168              	vTaskPrioritySet:
 1169              	.LFB144:
1460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 51


1464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1170              		.loc 1 1467 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 32
 1173              		@ frame_needed = 1, uses_anonymous_args = 0
 1174 0000 80B5     		push	{r7, lr}
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 7, -8
 1177              		.cfi_offset 14, -4
 1178 0002 88B0     		sub	sp, sp, #32
 1179              		.cfi_def_cfa_offset 40
 1180 0004 00AF     		add	r7, sp, #0
 1181              		.cfi_def_cfa_register 7
 1182 0006 7860     		str	r0, [r7, #4]
 1183 0008 3960     		str	r1, [r7]
1468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1184              		.loc 1 1470 0
 1185 000a 0023     		movs	r3, #0
 1186 000c FB61     		str	r3, [r7, #28]
1471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1187              		.loc 1 1472 0
 1188 000e 3B68     		ldr	r3, [r7]
 1189 0010 062B     		cmp	r3, #6
 1190 0012 09D9     		bls	.L79
 1191              	.LBB112:
 1192              	.LBB113:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1193              		.loc 2 156 0 discriminator 1
 1194              		.syntax unified
 1195              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1196 0014 4FF03F03 			mov r3, #63												
 1197 0018 83F31188 		msr basepri, r3											
 1198 001c BFF36F8F 		isb														
 1199 0020 BFF34F8F 		dsb														
 1200              	
 1201              	@ 0 "" 2
 1202              		.thumb
 1203              		.syntax unified
 1204 0024 FB60     		str	r3, [r7, #12]
 1205              	.L80:
 1206              	.LBE113:
 1207              	.LBE112:
 1208              		.loc 1 1472 0 discriminator 1
 1209 0026 FEE7     		b	.L80
 1210              	.L79:
1473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1211              		.loc 1 1475 0
 1212 0028 3B68     		ldr	r3, [r7]
 1213 002a 062B     		cmp	r3, #6
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 52


 1214 002c 01D9     		bls	.L81
1476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1215              		.loc 1 1477 0
 1216 002e 0623     		movs	r3, #6
 1217 0030 3B60     		str	r3, [r7]
 1218              	.L81:
1478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 1219              		.loc 1 1484 0
 1220 0032 FFF7FEFF 		bl	vPortEnterCritical
1485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is being changed. */
1488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1221              		.loc 1 1488 0
 1222 0036 7B68     		ldr	r3, [r7, #4]
 1223 0038 002B     		cmp	r3, #0
 1224 003a 02D1     		bne	.L82
 1225              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1226 003c 384B     		ldr	r3, .L92
 1227 003e 1B68     		ldr	r3, [r3]
 1228 0040 00E0     		b	.L83
 1229              	.L82:
 1230              		.loc 1 1488 0 discriminator 2
 1231 0042 7B68     		ldr	r3, [r7, #4]
 1232              	.L83:
 1233              		.loc 1 1488 0 discriminator 4
 1234 0044 BB61     		str	r3, [r7, #24]
1489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#else
1497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
 1235              		.loc 1 1498 0 is_stmt 1 discriminator 4
 1236 0046 BB69     		ldr	r3, [r7, #24]
 1237 0048 DB6A     		ldr	r3, [r3, #44]
 1238 004a 7B61     		str	r3, [r7, #20]
1499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1239              		.loc 1 1502 0 discriminator 4
 1240 004c 7A69     		ldr	r2, [r7, #20]
 1241 004e 3B68     		ldr	r3, [r7]
 1242 0050 9A42     		cmp	r2, r3
 1243 0052 5FD0     		beq	.L84
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 53


1503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The priority change may have readied a task of higher
1505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				priority than the calling task. */
1506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1244              		.loc 1 1506 0
 1245 0054 3A68     		ldr	r2, [r7]
 1246 0056 7B69     		ldr	r3, [r7, #20]
 1247 0058 9A42     		cmp	r2, r3
 1248 005a 0DD9     		bls	.L85
1507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1249              		.loc 1 1508 0
 1250 005c 304B     		ldr	r3, .L92
 1251 005e 1B68     		ldr	r3, [r3]
 1252 0060 BA69     		ldr	r2, [r7, #24]
 1253 0062 9A42     		cmp	r2, r3
 1254 0064 0FD0     		beq	.L86
1509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The priority of a task other than the currently
1511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						running task is being raised.  Is the priority being
1512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						raised above that of the running task? */
1513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1255              		.loc 1 1513 0
 1256 0066 2E4B     		ldr	r3, .L92
 1257 0068 1B68     		ldr	r3, [r3]
 1258 006a DA6A     		ldr	r2, [r3, #44]
 1259 006c 3B68     		ldr	r3, [r7]
 1260 006e 9A42     		cmp	r2, r3
 1261 0070 09D8     		bhi	.L86
1514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
1515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1262              		.loc 1 1515 0
 1263 0072 0123     		movs	r3, #1
 1264 0074 FB61     		str	r3, [r7, #28]
 1265 0076 06E0     		b	.L86
 1266              	.L85:
1516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
1517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						else
1518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
1519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
1521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The priority of the running task is being raised,
1525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						but the running task must already be the highest
1526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						priority task able to run so no yield is required. */
1527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1267              		.loc 1 1529 0
 1268 0078 294B     		ldr	r3, .L92
 1269 007a 1B68     		ldr	r3, [r3]
 1270 007c BA69     		ldr	r2, [r7, #24]
 1271 007e 9A42     		cmp	r2, r3
 1272 0080 01D1     		bne	.L86
1530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 54


1531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Setting the priority of the running task down means
1532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					there may now be another task of higher priority that
1533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					is ready to execute. */
1534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1273              		.loc 1 1534 0
 1274 0082 0123     		movs	r3, #1
 1275 0084 FB61     		str	r3, [r7, #28]
 1276              	.L86:
1535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					require a yield as the running task must be above the
1540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					new priority of the task being modified. */
1541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				before its uxPriority member is changed so the
1545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1277              		.loc 1 1546 0
 1278 0086 BB69     		ldr	r3, [r7, #24]
 1279 0088 DB6A     		ldr	r3, [r3, #44]
 1280 008a 3B61     		str	r3, [r7, #16]
1547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					currently using an inherited priority. */
1552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The base priority gets set whatever. */
1562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
1565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 1281              		.loc 1 1566 0
 1282 008c BB69     		ldr	r3, [r7, #24]
 1283 008e 3A68     		ldr	r2, [r7]
 1284 0090 DA62     		str	r2, [r3, #44]
1567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
1569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				being used for anything else. */
1572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1285              		.loc 1 1572 0
 1286 0092 BB69     		ldr	r3, [r7, #24]
 1287 0094 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 55


 1288 0096 002B     		cmp	r3, #0
 1289 0098 04DB     		blt	.L87
1573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1290              		.loc 1 1574 0
 1291 009a 3B68     		ldr	r3, [r7]
 1292 009c C3F10702 		rsb	r2, r3, #7
 1293 00a0 BB69     		ldr	r3, [r7, #24]
 1294 00a2 9A61     		str	r2, [r3, #24]
 1295              	.L87:
1575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				nothing more than change its priority variable. However, if
1583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				in the list appropriate to its new priority. */
1585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1296              		.loc 1 1585 0
 1297 00a4 BB69     		ldr	r3, [r7, #24]
 1298 00a6 5969     		ldr	r1, [r3, #20]
 1299 00a8 3A69     		ldr	r2, [r7, #16]
 1300 00aa 1346     		mov	r3, r2
 1301 00ac 9B00     		lsls	r3, r3, #2
 1302 00ae 1344     		add	r3, r3, r2
 1303 00b0 9B00     		lsls	r3, r3, #2
 1304 00b2 1C4A     		ldr	r2, .L92+4
 1305 00b4 1344     		add	r3, r3, r2
 1306 00b6 9942     		cmp	r1, r3
 1307 00b8 01D1     		bne	.L88
 1308              		.loc 1 1585 0 is_stmt 0 discriminator 1
 1309 00ba 0123     		movs	r3, #1
 1310 00bc 00E0     		b	.L89
 1311              	.L88:
 1312              		.loc 1 1585 0 discriminator 2
 1313 00be 0023     		movs	r3, #0
 1314              	.L89:
 1315              		.loc 1 1585 0 discriminator 4
 1316 00c0 002B     		cmp	r3, #0
 1317 00c2 1CD0     		beq	.L90
1586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1318              		.loc 1 1590 0 is_stmt 1
 1319 00c4 BB69     		ldr	r3, [r7, #24]
 1320 00c6 0433     		adds	r3, r3, #4
 1321 00c8 1846     		mov	r0, r3
 1322 00ca FFF7FEFF 		bl	uxListRemove
1591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						there is no need to check again and the port level
1594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						reset macro can be called directly. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 56


1595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1323              		.loc 1 1601 0
 1324 00ce BB69     		ldr	r3, [r7, #24]
 1325 00d0 DA6A     		ldr	r2, [r3, #44]
 1326 00d2 154B     		ldr	r3, .L92+8
 1327 00d4 1B68     		ldr	r3, [r3]
 1328 00d6 9A42     		cmp	r2, r3
 1329 00d8 03D9     		bls	.L91
 1330              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1331 00da BB69     		ldr	r3, [r7, #24]
 1332 00dc DB6A     		ldr	r3, [r3, #44]
 1333 00de 124A     		ldr	r2, .L92+8
 1334 00e0 1360     		str	r3, [r2]
 1335              	.L91:
 1336              		.loc 1 1601 0 discriminator 3
 1337 00e2 BB69     		ldr	r3, [r7, #24]
 1338 00e4 DA6A     		ldr	r2, [r3, #44]
 1339 00e6 1346     		mov	r3, r2
 1340 00e8 9B00     		lsls	r3, r3, #2
 1341 00ea 1344     		add	r3, r3, r2
 1342 00ec 9B00     		lsls	r3, r3, #2
 1343 00ee 0D4A     		ldr	r2, .L92+4
 1344 00f0 1A44     		add	r2, r2, r3
 1345 00f2 BB69     		ldr	r3, [r7, #24]
 1346 00f4 0433     		adds	r3, r3, #4
 1347 00f6 1946     		mov	r1, r3
 1348 00f8 1046     		mov	r0, r2
 1349 00fa FFF7FEFF 		bl	vListInsertEnd
 1350              	.L90:
1602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1351              		.loc 1 1608 0 is_stmt 1
 1352 00fe FB69     		ldr	r3, [r7, #28]
 1353 0100 002B     		cmp	r3, #0
 1354 0102 07D0     		beq	.L84
1609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1355              		.loc 1 1610 0
 1356 0104 094B     		ldr	r3, .L92+12
 1357 0106 4FF08052 		mov	r2, #268435456
 1358 010a 1A60     		str	r2, [r3]
 1359              		.syntax unified
 1360              	@ 1610 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 1361 010c BFF34F8F 		dsb
 1362              	@ 0 "" 2
 1363              	@ 1610 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 57


 1364 0110 BFF36F8F 		isb
 1365              	@ 0 "" 2
 1366              		.thumb
 1367              		.syntax unified
 1368              	.L84:
1611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				optimised task selection is not being used. */
1619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1369              		.loc 1 1622 0
 1370 0114 FFF7FEFF 		bl	vPortExitCritical
1623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1371              		.loc 1 1623 0
 1372 0118 00BF     		nop
 1373 011a 2037     		adds	r7, r7, #32
 1374              		.cfi_def_cfa_offset 8
 1375 011c BD46     		mov	sp, r7
 1376              		.cfi_def_cfa_register 13
 1377              		@ sp needed
 1378 011e 80BD     		pop	{r7, pc}
 1379              	.L93:
 1380              		.align	2
 1381              	.L92:
 1382 0120 00000000 		.word	pxCurrentTCB
 1383 0124 04000000 		.word	pxReadyTasksLists
 1384 0128 08010000 		.word	uxTopReadyPriority
 1385 012c 04ED00E0 		.word	-536810236
 1386              		.cfi_endproc
 1387              	.LFE144:
 1388              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1389              		.section	.text.vTaskSuspend,"ax",%progbits
 1390              		.align	2
 1391              		.global	vTaskSuspend
 1392              		.thumb
 1393              		.thumb_func
 1394              		.type	vTaskSuspend, %function
 1395              	vTaskSuspend:
 1396              	.LFB145:
1624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1397              		.loc 1 1631 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 58


 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401 0000 80B5     		push	{r7, lr}
 1402              		.cfi_def_cfa_offset 8
 1403              		.cfi_offset 7, -8
 1404              		.cfi_offset 14, -4
 1405 0002 84B0     		sub	sp, sp, #16
 1406              		.cfi_def_cfa_offset 24
 1407 0004 00AF     		add	r7, sp, #0
 1408              		.cfi_def_cfa_register 7
 1409 0006 7860     		str	r0, [r7, #4]
1632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
1633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 1410              		.loc 1 1634 0
 1411 0008 FFF7FEFF 		bl	vPortEnterCritical
1635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			being suspended. */
1638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1412              		.loc 1 1638 0
 1413 000c 7B68     		ldr	r3, [r7, #4]
 1414 000e 002B     		cmp	r3, #0
 1415 0010 02D1     		bne	.L95
 1416              		.loc 1 1638 0 is_stmt 0 discriminator 1
 1417 0012 2F4B     		ldr	r3, .L107
 1418 0014 1B68     		ldr	r3, [r3]
 1419 0016 00E0     		b	.L96
 1420              	.L95:
 1421              		.loc 1 1638 0 discriminator 2
 1422 0018 7B68     		ldr	r3, [r7, #4]
 1423              	.L96:
 1424              		.loc 1 1638 0 discriminator 4
 1425 001a FB60     		str	r3, [r7, #12]
1639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			suspended list. */
1644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1426              		.loc 1 1644 0 is_stmt 1 discriminator 4
 1427 001c FB68     		ldr	r3, [r7, #12]
 1428 001e 0433     		adds	r3, r3, #4
 1429 0020 1846     		mov	r0, r3
 1430 0022 FFF7FEFF 		bl	uxListRemove
1645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1431              		.loc 1 1654 0 discriminator 4
 1432 0026 FB68     		ldr	r3, [r7, #12]
 1433 0028 9B6A     		ldr	r3, [r3, #40]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 59


 1434 002a 002B     		cmp	r3, #0
 1435 002c 04D0     		beq	.L97
1655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1436              		.loc 1 1656 0
 1437 002e FB68     		ldr	r3, [r7, #12]
 1438 0030 1833     		adds	r3, r3, #24
 1439 0032 1846     		mov	r0, r3
 1440 0034 FFF7FEFF 		bl	uxListRemove
 1441              	.L97:
1657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1442              		.loc 1 1663 0
 1443 0038 FB68     		ldr	r3, [r7, #12]
 1444 003a 0433     		adds	r3, r3, #4
 1445 003c 1946     		mov	r1, r3
 1446 003e 2548     		ldr	r0, .L107+4
 1447 0040 FFF7FEFF 		bl	vListInsertEnd
1664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1448              		.loc 1 1667 0
 1449 0044 FB68     		ldr	r3, [r7, #12]
 1450 0046 93F85C30 		ldrb	r3, [r3, #92]
 1451 004a DBB2     		uxtb	r3, r3
 1452 004c 012B     		cmp	r3, #1
 1453 004e 03D1     		bne	.L98
1668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					now suspended, so no notification was received. */
1671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1454              		.loc 1 1671 0
 1455 0050 FB68     		ldr	r3, [r7, #12]
 1456 0052 0022     		movs	r2, #0
 1457 0054 83F85C20 		strb	r2, [r3, #92]
 1458              	.L98:
1672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
1675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1459              		.loc 1 1676 0
 1460 0058 FFF7FEFF 		bl	vPortExitCritical
1677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1461              		.loc 1 1678 0
 1462 005c 1E4B     		ldr	r3, .L107+8
 1463 005e 1B68     		ldr	r3, [r3]
 1464 0060 002B     		cmp	r3, #0
 1465 0062 05D0     		beq	.L99
1679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 60


1680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			task that is now in the Suspended state. */
1682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
 1466              		.loc 1 1682 0
 1467 0064 FFF7FEFF 		bl	vPortEnterCritical
1683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1468              		.loc 1 1684 0
 1469 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1470              		.loc 1 1686 0
 1471 006c FFF7FEFF 		bl	vPortExitCritical
 1472              	.L99:
1687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1473              		.loc 1 1693 0
 1474 0070 174B     		ldr	r3, .L107
 1475 0072 1B68     		ldr	r3, [r3]
 1476 0074 FA68     		ldr	r2, [r7, #12]
 1477 0076 9A42     		cmp	r2, r3
 1478 0078 26D1     		bne	.L106
1694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1479              		.loc 1 1695 0
 1480 007a 174B     		ldr	r3, .L107+8
 1481 007c 1B68     		ldr	r3, [r3]
 1482 007e 002B     		cmp	r3, #0
 1483 0080 16D0     		beq	.L101
1696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The current task has just been suspended. */
1698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1484              		.loc 1 1698 0
 1485 0082 164B     		ldr	r3, .L107+12
 1486 0084 1B68     		ldr	r3, [r3]
 1487 0086 002B     		cmp	r3, #0
 1488 0088 09D0     		beq	.L102
 1489              	.LBB114:
 1490              	.LBB115:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1491              		.loc 2 156 0 discriminator 1
 1492              		.syntax unified
 1493              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1494 008a 4FF03F03 			mov r3, #63												
 1495 008e 83F31188 		msr basepri, r3											
 1496 0092 BFF36F8F 		isb														
 1497 0096 BFF34F8F 		dsb														
 1498              	
 1499              	@ 0 "" 2
 1500              		.thumb
 1501              		.syntax unified
 1502 009a BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 61


 1503              	.L103:
 1504              	.LBE115:
 1505              	.LBE114:
 1506              		.loc 1 1698 0 discriminator 1
 1507 009c FEE7     		b	.L103
 1508              	.L102:
1699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				portYIELD_WITHIN_API();
 1509              		.loc 1 1699 0
 1510 009e 104B     		ldr	r3, .L107+16
 1511 00a0 4FF08052 		mov	r2, #268435456
 1512 00a4 1A60     		str	r2, [r3]
 1513              		.syntax unified
 1514              	@ 1699 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 1515 00a6 BFF34F8F 		dsb
 1516              	@ 0 "" 2
 1517              	@ 1699 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 1518 00aa BFF36F8F 		isb
 1519              	@ 0 "" 2
1700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				must be adjusted to point to a different task. */
1706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					is. */
1712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB = NULL;
1713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vTaskSwitchContext();
1717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1520              		.loc 1 1724 0
 1521              		.thumb
 1522              		.syntax unified
 1523 00ae 0BE0     		b	.L106
 1524              	.L101:
1706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 1525              		.loc 1 1706 0
 1526 00b0 084B     		ldr	r3, .L107+4
 1527 00b2 1A68     		ldr	r2, [r3]
 1528 00b4 0B4B     		ldr	r3, .L107+20
 1529 00b6 1B68     		ldr	r3, [r3]
 1530 00b8 9A42     		cmp	r2, r3
 1531 00ba 03D1     		bne	.L105
1712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 62


 1532              		.loc 1 1712 0
 1533 00bc 044B     		ldr	r3, .L107
 1534 00be 0022     		movs	r2, #0
 1535 00c0 1A60     		str	r2, [r3]
 1536              		.loc 1 1724 0
 1537 00c2 01E0     		b	.L106
 1538              	.L105:
1716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 1539              		.loc 1 1716 0
 1540 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 1541              	.L106:
 1542              		.loc 1 1724 0
 1543 00c8 00BF     		nop
 1544 00ca 1037     		adds	r7, r7, #16
 1545              		.cfi_def_cfa_offset 8
 1546 00cc BD46     		mov	sp, r7
 1547              		.cfi_def_cfa_register 13
 1548              		@ sp needed
 1549 00ce 80BD     		pop	{r7, pc}
 1550              	.L108:
 1551              		.align	2
 1552              	.L107:
 1553 00d0 00000000 		.word	pxCurrentTCB
 1554 00d4 EC000000 		.word	xSuspendedTaskList
 1555 00d8 0C010000 		.word	xSchedulerRunning
 1556 00dc 28010000 		.word	uxSchedulerSuspended
 1557 00e0 04ED00E0 		.word	-536810236
 1558 00e4 00010000 		.word	uxCurrentNumberOfTasks
 1559              		.cfi_endproc
 1560              	.LFE145:
 1561              		.size	vTaskSuspend, .-vTaskSuspend
 1562              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1563              		.align	2
 1564              		.thumb
 1565              		.thumb_func
 1566              		.type	prvTaskIsTaskSuspended, %function
 1567              	prvTaskIsTaskSuspended:
 1568              	.LFB146:
1725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1569              		.loc 1 1732 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 24
 1572              		@ frame_needed = 1, uses_anonymous_args = 0
 1573              		@ link register save eliminated.
 1574 0000 80B4     		push	{r7}
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 7, -4
 1577 0002 87B0     		sub	sp, sp, #28
 1578              		.cfi_def_cfa_offset 32
 1579 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 63


 1580              		.cfi_def_cfa_register 7
 1581 0006 7860     		str	r0, [r7, #4]
1733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1582              		.loc 1 1733 0
 1583 0008 0023     		movs	r3, #0
 1584 000a 7B61     		str	r3, [r7, #20]
1734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1585              		.loc 1 1734 0
 1586 000c 7B68     		ldr	r3, [r7, #4]
 1587 000e 3B61     		str	r3, [r7, #16]
1735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		section. */
1738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTask );
 1588              		.loc 1 1740 0
 1589 0010 7B68     		ldr	r3, [r7, #4]
 1590 0012 002B     		cmp	r3, #0
 1591 0014 09D1     		bne	.L110
 1592              	.LBB116:
 1593              	.LBB117:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1594              		.loc 2 156 0 discriminator 1
 1595              		.syntax unified
 1596              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1597 0016 4FF03F03 			mov r3, #63												
 1598 001a 83F31188 		msr basepri, r3											
 1599 001e BFF36F8F 		isb														
 1600 0022 BFF34F8F 		dsb														
 1601              	
 1602              	@ 0 "" 2
 1603              		.thumb
 1604              		.syntax unified
 1605 0026 FB60     		str	r3, [r7, #12]
 1606              	.L111:
 1607              	.LBE117:
 1608              	.LBE116:
 1609              		.loc 1 1740 0 discriminator 1
 1610 0028 FEE7     		b	.L111
 1611              	.L110:
1741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1612              		.loc 1 1743 0
 1613 002a 3B69     		ldr	r3, [r7, #16]
 1614 002c 5B69     		ldr	r3, [r3, #20]
 1615 002e 0F4A     		ldr	r2, .L118
 1616 0030 9342     		cmp	r3, r2
 1617 0032 01D1     		bne	.L112
 1618              		.loc 1 1743 0 is_stmt 0 discriminator 1
 1619 0034 0123     		movs	r3, #1
 1620 0036 00E0     		b	.L113
 1621              	.L112:
 1622              		.loc 1 1743 0 discriminator 2
 1623 0038 0023     		movs	r3, #0
 1624              	.L113:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 64


 1625              		.loc 1 1743 0 discriminator 4
 1626 003a 002B     		cmp	r3, #0
 1627 003c 0FD0     		beq	.L114
1744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1628              		.loc 1 1746 0 is_stmt 1
 1629 003e 3B69     		ldr	r3, [r7, #16]
 1630 0040 9B6A     		ldr	r3, [r3, #40]
 1631 0042 0B4A     		ldr	r2, .L118+4
 1632 0044 9342     		cmp	r3, r2
 1633 0046 0AD0     		beq	.L114
1747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1634              		.loc 1 1750 0
 1635 0048 3B69     		ldr	r3, [r7, #16]
 1636 004a 9B6A     		ldr	r3, [r3, #40]
 1637 004c 002B     		cmp	r3, #0
 1638 004e 01D1     		bne	.L115
 1639              		.loc 1 1750 0 is_stmt 0 discriminator 1
 1640 0050 0123     		movs	r3, #1
 1641 0052 00E0     		b	.L116
 1642              	.L115:
 1643              		.loc 1 1750 0 discriminator 2
 1644 0054 0023     		movs	r3, #0
 1645              	.L116:
 1646              		.loc 1 1750 0 discriminator 4
 1647 0056 002B     		cmp	r3, #0
 1648 0058 01D0     		beq	.L114
1751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
 1649              		.loc 1 1752 0 is_stmt 1
 1650 005a 0123     		movs	r3, #1
 1651 005c 7B61     		str	r3, [r7, #20]
 1652              	.L114:
1753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 1653              		.loc 1 1769 0
 1654 005e 7B69     		ldr	r3, [r7, #20]
1770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 65


 1655              		.loc 1 1770 0
 1656 0060 1846     		mov	r0, r3
 1657 0062 1C37     		adds	r7, r7, #28
 1658              		.cfi_def_cfa_offset 4
 1659 0064 BD46     		mov	sp, r7
 1660              		.cfi_def_cfa_register 13
 1661              		@ sp needed
 1662 0066 5DF8047B 		ldr	r7, [sp], #4
 1663              		.cfi_restore 7
 1664              		.cfi_def_cfa_offset 0
 1665 006a 7047     		bx	lr
 1666              	.L119:
 1667              		.align	2
 1668              	.L118:
 1669 006c EC000000 		.word	xSuspendedTaskList
 1670 0070 C0000000 		.word	xPendingReadyList
 1671              		.cfi_endproc
 1672              	.LFE146:
 1673              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1674              		.section	.text.vTaskResume,"ax",%progbits
 1675              		.align	2
 1676              		.global	vTaskResume
 1677              		.thumb
 1678              		.thumb_func
 1679              		.type	vTaskResume, %function
 1680              	vTaskResume:
 1681              	.LFB147:
1771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1682              		.loc 1 1778 0
 1683              		.cfi_startproc
 1684              		@ args = 0, pretend = 0, frame = 16
 1685              		@ frame_needed = 1, uses_anonymous_args = 0
 1686 0000 80B5     		push	{r7, lr}
 1687              		.cfi_def_cfa_offset 8
 1688              		.cfi_offset 7, -8
 1689              		.cfi_offset 14, -4
 1690 0002 84B0     		sub	sp, sp, #16
 1691              		.cfi_def_cfa_offset 24
 1692 0004 00AF     		add	r7, sp, #0
 1693              		.cfi_def_cfa_register 7
 1694 0006 7860     		str	r0, [r7, #4]
1779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1695              		.loc 1 1779 0
 1696 0008 7B68     		ldr	r3, [r7, #4]
 1697 000a FB60     		str	r3, [r7, #12]
1780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToResume );
 1698              		.loc 1 1782 0
 1699 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 66


 1700 000e 002B     		cmp	r3, #0
 1701 0010 09D1     		bne	.L121
 1702              	.LBB118:
 1703              	.LBB119:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1704              		.loc 2 156 0 discriminator 1
 1705              		.syntax unified
 1706              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1707 0012 4FF03F03 			mov r3, #63												
 1708 0016 83F31188 		msr basepri, r3											
 1709 001a BFF36F8F 		isb														
 1710 001e BFF34F8F 		dsb														
 1711              	
 1712              	@ 0 "" 2
 1713              		.thumb
 1714              		.syntax unified
 1715 0022 BB60     		str	r3, [r7, #8]
 1716              	.L122:
 1717              	.LBE119:
 1718              	.LBE118:
 1719              		.loc 1 1782 0 discriminator 1
 1720 0024 FEE7     		b	.L122
 1721              	.L121:
1783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		currently executing task. */
1786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1722              		.loc 1 1786 0
 1723 0026 FB68     		ldr	r3, [r7, #12]
 1724 0028 002B     		cmp	r3, #0
 1725 002a 3AD0     		beq	.L126
 1726              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1727 002c 1F4B     		ldr	r3, .L127
 1728 002e 1B68     		ldr	r3, [r3]
 1729 0030 FA68     		ldr	r2, [r7, #12]
 1730 0032 9A42     		cmp	r2, r3
 1731 0034 35D0     		beq	.L126
1787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
 1732              		.loc 1 1788 0 is_stmt 1
 1733 0036 FFF7FEFF 		bl	vPortEnterCritical
1789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1734              		.loc 1 1790 0
 1735 003a F868     		ldr	r0, [r7, #12]
 1736 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1737 0040 0346     		mov	r3, r0
 1738 0042 002B     		cmp	r3, #0
 1739 0044 2BD0     		beq	.L124
1791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					suspended because this is inside a critical section. */
1796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1740              		.loc 1 1796 0
 1741 0046 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 67


 1742 0048 0433     		adds	r3, r3, #4
 1743 004a 1846     		mov	r0, r3
 1744 004c FFF7FEFF 		bl	uxListRemove
1797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1745              		.loc 1 1797 0
 1746 0050 FB68     		ldr	r3, [r7, #12]
 1747 0052 DA6A     		ldr	r2, [r3, #44]
 1748 0054 164B     		ldr	r3, .L127+4
 1749 0056 1B68     		ldr	r3, [r3]
 1750 0058 9A42     		cmp	r2, r3
 1751 005a 03D9     		bls	.L125
 1752              		.loc 1 1797 0 is_stmt 0 discriminator 1
 1753 005c FB68     		ldr	r3, [r7, #12]
 1754 005e DB6A     		ldr	r3, [r3, #44]
 1755 0060 134A     		ldr	r2, .L127+4
 1756 0062 1360     		str	r3, [r2]
 1757              	.L125:
 1758              		.loc 1 1797 0 discriminator 3
 1759 0064 FB68     		ldr	r3, [r7, #12]
 1760 0066 DA6A     		ldr	r2, [r3, #44]
 1761 0068 1346     		mov	r3, r2
 1762 006a 9B00     		lsls	r3, r3, #2
 1763 006c 1344     		add	r3, r3, r2
 1764 006e 9B00     		lsls	r3, r3, #2
 1765 0070 104A     		ldr	r2, .L127+8
 1766 0072 1A44     		add	r2, r2, r3
 1767 0074 FB68     		ldr	r3, [r7, #12]
 1768 0076 0433     		adds	r3, r3, #4
 1769 0078 1946     		mov	r1, r3
 1770 007a 1046     		mov	r0, r2
 1771 007c FFF7FEFF 		bl	vListInsertEnd
1798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1772              		.loc 1 1800 0 is_stmt 1 discriminator 3
 1773 0080 FB68     		ldr	r3, [r7, #12]
 1774 0082 DA6A     		ldr	r2, [r3, #44]
 1775 0084 094B     		ldr	r3, .L127
 1776 0086 1B68     		ldr	r3, [r3]
 1777 0088 DB6A     		ldr	r3, [r3, #44]
 1778 008a 9A42     		cmp	r2, r3
 1779 008c 07D3     		bcc	.L124
1801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						but will leave the lists in the correct state for the
1804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						next yield. */
1805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1780              		.loc 1 1805 0
 1781 008e 0A4B     		ldr	r3, .L127+12
 1782 0090 4FF08052 		mov	r2, #268435456
 1783 0094 1A60     		str	r2, [r3]
 1784              		.syntax unified
 1785              	@ 1805 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 1786 0096 BFF34F8F 		dsb
 1787              	@ 0 "" 2
 1788              	@ 1805 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 1789 009a BFF36F8F 		isb
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 68


 1790              	@ 0 "" 2
 1791              		.thumb
 1792              		.syntax unified
 1793              	.L124:
1806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1794              		.loc 1 1817 0
 1795 009e FFF7FEFF 		bl	vPortExitCritical
 1796              	.L126:
1818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1797              		.loc 1 1823 0
 1798 00a2 00BF     		nop
 1799 00a4 1037     		adds	r7, r7, #16
 1800              		.cfi_def_cfa_offset 8
 1801 00a6 BD46     		mov	sp, r7
 1802              		.cfi_def_cfa_register 13
 1803              		@ sp needed
 1804 00a8 80BD     		pop	{r7, pc}
 1805              	.L128:
 1806 00aa 00BF     		.align	2
 1807              	.L127:
 1808 00ac 00000000 		.word	pxCurrentTCB
 1809 00b0 08010000 		.word	uxTopReadyPriority
 1810 00b4 04000000 		.word	pxReadyTasksLists
 1811 00b8 04ED00E0 		.word	-536810236
 1812              		.cfi_endproc
 1813              	.LFE147:
 1814              		.size	vTaskResume, .-vTaskResume
 1815              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1816              		.align	2
 1817              		.global	xTaskResumeFromISR
 1818              		.thumb
 1819              		.thumb_func
 1820              		.type	xTaskResumeFromISR, %function
 1821              	xTaskResumeFromISR:
 1822              	.LFB148:
1824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 69


1830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 1823              		.loc 1 1832 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 40
 1826              		@ frame_needed = 1, uses_anonymous_args = 0
 1827 0000 80B5     		push	{r7, lr}
 1828              		.cfi_def_cfa_offset 8
 1829              		.cfi_offset 7, -8
 1830              		.cfi_offset 14, -4
 1831 0002 8AB0     		sub	sp, sp, #40
 1832              		.cfi_def_cfa_offset 48
 1833 0004 00AF     		add	r7, sp, #0
 1834              		.cfi_def_cfa_register 7
 1835 0006 7860     		str	r0, [r7, #4]
1833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1836              		.loc 1 1833 0
 1837 0008 0023     		movs	r3, #0
 1838 000a 7B62     		str	r3, [r7, #36]
1834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1839              		.loc 1 1834 0
 1840 000c 7B68     		ldr	r3, [r7, #4]
 1841 000e 3B62     		str	r3, [r7, #32]
1835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToResume );
 1842              		.loc 1 1837 0
 1843 0010 7B68     		ldr	r3, [r7, #4]
 1844 0012 002B     		cmp	r3, #0
 1845 0014 09D1     		bne	.L130
 1846              	.LBB120:
 1847              	.LBB121:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1848              		.loc 2 156 0 discriminator 1
 1849              		.syntax unified
 1850              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1851 0016 4FF03F03 			mov r3, #63												
 1852 001a 83F31188 		msr basepri, r3											
 1853 001e BFF36F8F 		isb														
 1854 0022 BFF34F8F 		dsb														
 1855              	
 1856              	@ 0 "" 2
 1857              		.thumb
 1858              		.syntax unified
 1859 0026 3B61     		str	r3, [r7, #16]
 1860              	.L131:
 1861              	.LBE121:
 1862              	.LBE120:
 1863              		.loc 1 1837 0 discriminator 1
 1864 0028 FEE7     		b	.L131
 1865              	.L130:
1838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 70


1843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
1854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1866              		.loc 1 1855 0
 1867 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1868              	.LBB122:
 1869              	.LBB123:
 172:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 1870              		.loc 2 172 0
 1871              		.syntax unified
 1872              	@ 172 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1873 002e EFF31182 			mrs r2, basepri											
 1874 0032 4FF03F03 		mov r3, #63												
 1875 0036 83F31188 		msr basepri, r3											
 1876 003a BFF36F8F 		isb														
 1877 003e BFF34F8F 		dsb														
 1878              	
 1879              	@ 0 "" 2
 1880              		.thumb
 1881              		.syntax unified
 1882 0042 7A61     		str	r2, [r7, #20]
 1883 0044 FB60     		str	r3, [r7, #12]
 184:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 1884              		.loc 2 184 0
 1885 0046 7B69     		ldr	r3, [r7, #20]
 1886              	.LBE123:
 1887              	.LBE122:
1856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1888              		.loc 1 1857 0
 1889 0048 BB61     		str	r3, [r7, #24]
1858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1890              		.loc 1 1859 0
 1891 004a 386A     		ldr	r0, [r7, #32]
 1892 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1893 0050 0346     		mov	r3, r0
 1894 0052 002B     		cmp	r3, #0
 1895 0054 30D0     		beq	.L133
1860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1896              		.loc 1 1864 0
 1897 0056 1D4B     		ldr	r3, .L139
 1898 0058 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 71


 1899 005a 002B     		cmp	r3, #0
 1900 005c 26D1     		bne	.L134
1865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					suspended list to the ready list directly. */
1868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1901              		.loc 1 1868 0
 1902 005e 3B6A     		ldr	r3, [r7, #32]
 1903 0060 DA6A     		ldr	r2, [r3, #44]
 1904 0062 1B4B     		ldr	r3, .L139+4
 1905 0064 1B68     		ldr	r3, [r3]
 1906 0066 DB6A     		ldr	r3, [r3, #44]
 1907 0068 9A42     		cmp	r2, r3
 1908 006a 01D3     		bcc	.L135
1869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1909              		.loc 1 1870 0
 1910 006c 0123     		movs	r3, #1
 1911 006e 7B62     		str	r3, [r7, #36]
 1912              	.L135:
1871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
1873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
1874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
1876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1913              		.loc 1 1877 0
 1914 0070 3B6A     		ldr	r3, [r7, #32]
 1915 0072 0433     		adds	r3, r3, #4
 1916 0074 1846     		mov	r0, r3
 1917 0076 FFF7FEFF 		bl	uxListRemove
1878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1918              		.loc 1 1878 0
 1919 007a 3B6A     		ldr	r3, [r7, #32]
 1920 007c DA6A     		ldr	r2, [r3, #44]
 1921 007e 154B     		ldr	r3, .L139+8
 1922 0080 1B68     		ldr	r3, [r3]
 1923 0082 9A42     		cmp	r2, r3
 1924 0084 03D9     		bls	.L136
 1925              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1926 0086 3B6A     		ldr	r3, [r7, #32]
 1927 0088 DB6A     		ldr	r3, [r3, #44]
 1928 008a 124A     		ldr	r2, .L139+8
 1929 008c 1360     		str	r3, [r2]
 1930              	.L136:
 1931              		.loc 1 1878 0 discriminator 3
 1932 008e 3B6A     		ldr	r3, [r7, #32]
 1933 0090 DA6A     		ldr	r2, [r3, #44]
 1934 0092 1346     		mov	r3, r2
 1935 0094 9B00     		lsls	r3, r3, #2
 1936 0096 1344     		add	r3, r3, r2
 1937 0098 9B00     		lsls	r3, r3, #2
 1938 009a 0F4A     		ldr	r2, .L139+12
 1939 009c 1A44     		add	r2, r2, r3
 1940 009e 3B6A     		ldr	r3, [r7, #32]
 1941 00a0 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 72


 1942 00a2 1946     		mov	r1, r3
 1943 00a4 1046     		mov	r0, r2
 1944 00a6 FFF7FEFF 		bl	vListInsertEnd
 1945 00aa 05E0     		b	.L133
 1946              	.L134:
1879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
1881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
1882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					unsuspended. */
1885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1947              		.loc 1 1885 0 is_stmt 1
 1948 00ac 3B6A     		ldr	r3, [r7, #32]
 1949 00ae 1833     		adds	r3, r3, #24
 1950 00b0 1946     		mov	r1, r3
 1951 00b2 0A48     		ldr	r0, .L139+16
 1952 00b4 FFF7FEFF 		bl	vListInsertEnd
 1953              	.L133:
 1954 00b8 BB69     		ldr	r3, [r7, #24]
 1955 00ba FB61     		str	r3, [r7, #28]
 1956              	.LBB124:
 1957              	.LBB125:
 1958              		.loc 2 190 0
 1959 00bc FB69     		ldr	r3, [r7, #28]
 1960              		.syntax unified
 1961              	@ 190 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 1962 00be 83F31188 			msr basepri, r3	
 1963              	@ 0 "" 2
 1964              		.thumb
 1965              		.syntax unified
 1966              	.LBE125:
 1967              	.LBE124:
1886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
1887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
1889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
1890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
1892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xYieldRequired;
 1968              		.loc 1 1895 0
 1969 00c2 7B6A     		ldr	r3, [r7, #36]
1896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 1970              		.loc 1 1896 0
 1971 00c4 1846     		mov	r0, r3
 1972 00c6 2837     		adds	r7, r7, #40
 1973              		.cfi_def_cfa_offset 8
 1974 00c8 BD46     		mov	sp, r7
 1975              		.cfi_def_cfa_register 13
 1976              		@ sp needed
 1977 00ca 80BD     		pop	{r7, pc}
 1978              	.L140:
 1979              		.align	2
 1980              	.L139:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 73


 1981 00cc 28010000 		.word	uxSchedulerSuspended
 1982 00d0 00000000 		.word	pxCurrentTCB
 1983 00d4 08010000 		.word	uxTopReadyPriority
 1984 00d8 04000000 		.word	pxReadyTasksLists
 1985 00dc C0000000 		.word	xPendingReadyList
 1986              		.cfi_endproc
 1987              	.LFE148:
 1988              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1989              		.section	.rodata
 1990              		.align	2
 1991              	.LC0:
 1992 0000 49444C45 		.ascii	"IDLE\000"
 1992      00
 1993              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1994              		.align	2
 1995              		.global	vTaskStartScheduler
 1996              		.thumb
 1997              		.thumb_func
 1998              		.type	vTaskStartScheduler, %function
 1999              	vTaskStartScheduler:
 2000              	.LFB149:
1897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
1900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskStartScheduler( void )
1902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2001              		.loc 1 1902 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 16
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 0000 80B5     		push	{r7, lr}
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 7, -8
 2008              		.cfi_offset 14, -4
 2009 0002 86B0     		sub	sp, sp, #24
 2010              		.cfi_def_cfa_offset 32
 2011 0004 02AF     		add	r7, sp, #8
 2012              		.cfi_def_cfa 7, 24
1903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
1904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		address of the RAM then create the idle task. */
1914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												configIDLE_TASK_NAME,
1917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												ulIdleTaskStackSize,
1918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												pxIdleTaskStackBuffer,
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 74


1921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdPASS;
1926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFAIL;
1930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#else
1933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2013              		.loc 1 1935 0
 2014 0006 1E4B     		ldr	r3, .L147
 2015 0008 0193     		str	r3, [sp, #4]
 2016 000a 0023     		movs	r3, #0
 2017 000c 0093     		str	r3, [sp]
 2018 000e 0023     		movs	r3, #0
 2019 0010 8022     		movs	r2, #128
 2020 0012 1C49     		ldr	r1, .L147+4
 2021 0014 1C48     		ldr	r0, .L147+8
 2022 0016 FFF7FEFF 		bl	xTaskCreate
 2023 001a F860     		str	r0, [r7, #12]
1936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								configIDLE_TASK_NAME,
1937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								( void * ) NULL,
1939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xReturn == pdPASS )
 2024              		.loc 1 1946 0
 2025 001c FB68     		ldr	r3, [r7, #12]
 2026 001e 012B     		cmp	r3, #1
 2027 0020 02D1     		bne	.L142
1947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2028              		.loc 1 1948 0
 2029 0022 FFF7FEFF 		bl	xTimerCreateTimerTask
 2030 0026 F860     		str	r0, [r7, #12]
 2031              	.L142:
1949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
1951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
1955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( xReturn == pdPASS )
 2032              		.loc 1 1957 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 75


 2033 0028 FB68     		ldr	r3, [r7, #12]
 2034 002a 012B     		cmp	r3, #1
 2035 002c 15D1     		bne	.L143
 2036              	.LBB126:
 2037              	.LBB127:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2038              		.loc 2 156 0
 2039              		.syntax unified
 2040              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2041 002e 4FF03F03 			mov r3, #63												
 2042 0032 83F31188 		msr basepri, r3											
 2043 0036 BFF36F8F 		isb														
 2044 003a BFF34F8F 		dsb														
 2045              	
 2046              	@ 0 "" 2
 2047              		.thumb
 2048              		.syntax unified
 2049 003e 7B60     		str	r3, [r7, #4]
 2050              	.LBE127:
 2051              	.LBE126:
1958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
1959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the only macro called by the function. */
1962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			freertos_tasks_c_additions_init();
1965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
1967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		starts to run. */
1973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			structure specific to the task that will run first. */
1979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
1981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2052              		.loc 1 1983 0
 2053 0040 124B     		ldr	r3, .L147+12
 2054 0042 4FF0FF32 		mov	r2, #-1
 2055 0046 1A60     		str	r2, [r3]
1984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2056              		.loc 1 1984 0
 2057 0048 114B     		ldr	r3, .L147+16
 2058 004a 0122     		movs	r2, #1
 2059 004c 1A60     		str	r2, [r3]
1985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2060              		.loc 1 1985 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 76


 2061 004e 114B     		ldr	r3, .L147+20
 2062 0050 0022     		movs	r2, #0
 2063 0052 1A60     		str	r2, [r3]
1986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		FreeRTOSConfig.h file. */
1993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
1995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portable interface. */
1997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2064              		.loc 1 1997 0
 2065 0054 FFF7FEFF 		bl	xPortStartScheduler
1998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
1999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			function will not return. */
2001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		or the timer task. */
2012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) xIdleTaskHandle;
2018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2066              		.loc 1 2018 0
 2067 0058 0DE0     		b	.L146
 2068              	.L143:
2012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 2069              		.loc 1 2012 0
 2070 005a FB68     		ldr	r3, [r7, #12]
 2071 005c B3F1FF3F 		cmp	r3, #-1
 2072 0060 09D1     		bne	.L146
 2073              	.LBB128:
 2074              	.LBB129:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2075              		.loc 2 156 0 discriminator 1
 2076              		.syntax unified
 2077              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2078 0062 4FF03F03 			mov r3, #63												
 2079 0066 83F31188 		msr basepri, r3											
 2080 006a BFF36F8F 		isb														
 2081 006e BFF34F8F 		dsb														
 2082              	
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 77


 2083              	@ 0 "" 2
 2084              		.thumb
 2085              		.syntax unified
 2086 0072 BB60     		str	r3, [r7, #8]
 2087              	.L145:
 2088              	.LBE129:
 2089              	.LBE128:
2012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 2090              		.loc 1 2012 0 discriminator 2
 2091 0074 FEE7     		b	.L145
 2092              	.L146:
 2093              		.loc 1 2018 0
 2094 0076 00BF     		nop
 2095 0078 1037     		adds	r7, r7, #16
 2096              		.cfi_def_cfa_offset 8
 2097 007a BD46     		mov	sp, r7
 2098              		.cfi_def_cfa_register 13
 2099              		@ sp needed
 2100 007c 80BD     		pop	{r7, pc}
 2101              	.L148:
 2102 007e 00BF     		.align	2
 2103              	.L147:
 2104 0080 24010000 		.word	xIdleTaskHandle
 2105 0084 00000000 		.word	.LC0
 2106 0088 00000000 		.word	prvIdleTask
 2107 008c 20010000 		.word	xNextTaskUnblockTime
 2108 0090 0C010000 		.word	xSchedulerRunning
 2109 0094 04010000 		.word	xTickCount
 2110              		.cfi_endproc
 2111              	.LFE149:
 2112              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 2113              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2114              		.align	2
 2115              		.global	vTaskEndScheduler
 2116              		.thumb
 2117              		.thumb_func
 2118              		.type	vTaskEndScheduler, %function
 2119              	vTaskEndScheduler:
 2120              	.LFB150:
2019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskEndScheduler( void )
2022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2121              		.loc 1 2022 0
 2122              		.cfi_startproc
 2123              		@ args = 0, pretend = 0, frame = 8
 2124              		@ frame_needed = 1, uses_anonymous_args = 0
 2125 0000 80B5     		push	{r7, lr}
 2126              		.cfi_def_cfa_offset 8
 2127              		.cfi_offset 7, -8
 2128              		.cfi_offset 14, -4
 2129 0002 82B0     		sub	sp, sp, #8
 2130              		.cfi_def_cfa_offset 16
 2131 0004 00AF     		add	r7, sp, #0
 2132              		.cfi_def_cfa_register 7
 2133              	.LBB130:
 2134              	.LBB131:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 78


 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2135              		.loc 2 156 0
 2136              		.syntax unified
 2137              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2138 0006 4FF03F03 			mov r3, #63												
 2139 000a 83F31188 		msr basepri, r3											
 2140 000e BFF36F8F 		isb														
 2141 0012 BFF34F8F 		dsb														
 2142              	
 2143              	@ 0 "" 2
 2144              		.thumb
 2145              		.syntax unified
 2146 0016 7B60     		str	r3, [r7, #4]
 2147              	.LBE131:
 2148              	.LBE130:
2023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2149              		.loc 1 2027 0
 2150 0018 044B     		ldr	r3, .L150
 2151 001a 0022     		movs	r2, #0
 2152 001c 1A60     		str	r2, [r3]
2028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vPortEndScheduler();
 2153              		.loc 1 2028 0
 2154 001e FFF7FEFF 		bl	vPortEndScheduler
2029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2155              		.loc 1 2029 0
 2156 0022 00BF     		nop
 2157 0024 0837     		adds	r7, r7, #8
 2158              		.cfi_def_cfa_offset 8
 2159 0026 BD46     		mov	sp, r7
 2160              		.cfi_def_cfa_register 13
 2161              		@ sp needed
 2162 0028 80BD     		pop	{r7, pc}
 2163              	.L151:
 2164 002a 00BF     		.align	2
 2165              	.L150:
 2166 002c 0C010000 		.word	xSchedulerRunning
 2167              		.cfi_endproc
 2168              	.LFE150:
 2169              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2170              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2171              		.align	2
 2172              		.global	vTaskSuspendAll
 2173              		.thumb
 2174              		.thumb_func
 2175              		.type	vTaskSuspendAll, %function
 2176              	vTaskSuspendAll:
 2177              	.LFB151:
2030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSuspendAll( void )
2033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2178              		.loc 1 2033 0
 2179              		.cfi_startproc
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 79


 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182              		@ link register save eliminated.
 2183 0000 80B4     		push	{r7}
 2184              		.cfi_def_cfa_offset 4
 2185              		.cfi_offset 7, -4
 2186 0002 00AF     		add	r7, sp, #0
 2187              		.cfi_def_cfa_register 7
2034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	http://goo.gl/wu4acr */
2038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	++uxSchedulerSuspended;
 2188              		.loc 1 2038 0
 2189 0004 044B     		ldr	r3, .L153
 2190 0006 1B68     		ldr	r3, [r3]
 2191 0008 0133     		adds	r3, r3, #1
 2192 000a 034A     		ldr	r2, .L153
 2193 000c 1360     		str	r3, [r2]
2039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2194              		.loc 1 2039 0
 2195 000e 00BF     		nop
 2196 0010 BD46     		mov	sp, r7
 2197              		.cfi_def_cfa_register 13
 2198              		@ sp needed
 2199 0012 5DF8047B 		ldr	r7, [sp], #4
 2200              		.cfi_restore 7
 2201              		.cfi_def_cfa_offset 0
 2202 0016 7047     		bx	lr
 2203              	.L154:
 2204              		.align	2
 2205              	.L153:
 2206 0018 28010000 		.word	uxSchedulerSuspended
 2207              		.cfi_endproc
 2208              	.LFE151:
 2209              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2210              		.section	.text.xTaskResumeAll,"ax",%progbits
 2211              		.align	2
 2212              		.global	xTaskResumeAll
 2213              		.thumb
 2214              		.thumb_func
 2215              		.type	xTaskResumeAll, %function
 2216              	xTaskResumeAll:
 2217              	.LFB152:
2040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TickType_t xReturn;
2047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		running. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 80


2053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
2061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
2075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			processed. */
2085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			idle priority.  This path can only be reached if
2091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = 0;
2093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2218              		.loc 1 2106 0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 81


 2221              		@ frame_needed = 1, uses_anonymous_args = 0
 2222 0000 80B5     		push	{r7, lr}
 2223              		.cfi_def_cfa_offset 8
 2224              		.cfi_offset 7, -8
 2225              		.cfi_offset 14, -4
 2226 0002 84B0     		sub	sp, sp, #16
 2227              		.cfi_def_cfa_offset 24
 2228 0004 00AF     		add	r7, sp, #0
 2229              		.cfi_def_cfa_register 7
2107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB = NULL;
 2230              		.loc 1 2107 0
 2231 0006 0023     		movs	r3, #0
 2232 0008 FB60     		str	r3, [r7, #12]
2108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2233              		.loc 1 2108 0
 2234 000a 0023     		movs	r3, #0
 2235 000c BB60     		str	r3, [r7, #8]
2109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2236              		.loc 1 2112 0
 2237 000e 414B     		ldr	r3, .L167
 2238 0010 1B68     		ldr	r3, [r3]
 2239 0012 002B     		cmp	r3, #0
 2240 0014 09D1     		bne	.L156
 2241              	.LBB132:
 2242              	.LBB133:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2243              		.loc 2 156 0 discriminator 1
 2244              		.syntax unified
 2245              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2246 0016 4FF03F03 			mov r3, #63												
 2247 001a 83F31188 		msr basepri, r3											
 2248 001e BFF36F8F 		isb														
 2249 0022 BFF34F8F 		dsb														
 2250              	
 2251              	@ 0 "" 2
 2252              		.thumb
 2253              		.syntax unified
 2254 0026 3B60     		str	r3, [r7]
 2255              	.L157:
 2256              	.LBE133:
 2257              	.LBE132:
 2258              		.loc 1 2112 0 discriminator 1
 2259 0028 FEE7     		b	.L157
 2260              	.L156:
2113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 2261              		.loc 1 2119 0
 2262 002a FFF7FEFF 		bl	vPortEnterCritical
2120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 82


2121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		--uxSchedulerSuspended;
 2263              		.loc 1 2121 0
 2264 002e 394B     		ldr	r3, .L167
 2265 0030 1B68     		ldr	r3, [r3]
 2266 0032 013B     		subs	r3, r3, #1
 2267 0034 374A     		ldr	r2, .L167
 2268 0036 1360     		str	r3, [r2]
2122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2269              		.loc 1 2123 0
 2270 0038 364B     		ldr	r3, .L167
 2271 003a 1B68     		ldr	r3, [r3]
 2272 003c 002B     		cmp	r3, #0
 2273 003e 62D1     		bne	.L158
2124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2274              		.loc 1 2125 0
 2275 0040 354B     		ldr	r3, .L167+4
 2276 0042 1B68     		ldr	r3, [r3]
 2277 0044 002B     		cmp	r3, #0
 2278 0046 5ED0     		beq	.L158
2126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				appropriate ready list. */
2129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2279              		.loc 1 2129 0
 2280 0048 2FE0     		b	.L159
 2281              	.L161:
2130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2282              		.loc 1 2131 0
 2283 004a 344B     		ldr	r3, .L167+8
 2284 004c DB68     		ldr	r3, [r3, #12]
 2285 004e DB68     		ldr	r3, [r3, #12]
 2286 0050 FB60     		str	r3, [r7, #12]
2132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2287              		.loc 1 2132 0
 2288 0052 FB68     		ldr	r3, [r7, #12]
 2289 0054 1833     		adds	r3, r3, #24
 2290 0056 1846     		mov	r0, r3
 2291 0058 FFF7FEFF 		bl	uxListRemove
2133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2292              		.loc 1 2133 0
 2293 005c FB68     		ldr	r3, [r7, #12]
 2294 005e 0433     		adds	r3, r3, #4
 2295 0060 1846     		mov	r0, r3
 2296 0062 FFF7FEFF 		bl	uxListRemove
2134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2297              		.loc 1 2134 0
 2298 0066 FB68     		ldr	r3, [r7, #12]
 2299 0068 DA6A     		ldr	r2, [r3, #44]
 2300 006a 2D4B     		ldr	r3, .L167+12
 2301 006c 1B68     		ldr	r3, [r3]
 2302 006e 9A42     		cmp	r2, r3
 2303 0070 03D9     		bls	.L160
 2304              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2305 0072 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 83


 2306 0074 DB6A     		ldr	r3, [r3, #44]
 2307 0076 2A4A     		ldr	r2, .L167+12
 2308 0078 1360     		str	r3, [r2]
 2309              	.L160:
 2310              		.loc 1 2134 0 discriminator 3
 2311 007a FB68     		ldr	r3, [r7, #12]
 2312 007c DA6A     		ldr	r2, [r3, #44]
 2313 007e 1346     		mov	r3, r2
 2314 0080 9B00     		lsls	r3, r3, #2
 2315 0082 1344     		add	r3, r3, r2
 2316 0084 9B00     		lsls	r3, r3, #2
 2317 0086 274A     		ldr	r2, .L167+16
 2318 0088 1A44     		add	r2, r2, r3
 2319 008a FB68     		ldr	r3, [r7, #12]
 2320 008c 0433     		adds	r3, r3, #4
 2321 008e 1946     		mov	r1, r3
 2322 0090 1046     		mov	r0, r2
 2323 0092 FFF7FEFF 		bl	vListInsertEnd
2135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					task then a yield must be performed. */
2138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2324              		.loc 1 2138 0 is_stmt 1 discriminator 3
 2325 0096 FB68     		ldr	r3, [r7, #12]
 2326 0098 DA6A     		ldr	r2, [r3, #44]
 2327 009a 234B     		ldr	r3, .L167+20
 2328 009c 1B68     		ldr	r3, [r3]
 2329 009e DB6A     		ldr	r3, [r3, #44]
 2330 00a0 9A42     		cmp	r2, r3
 2331 00a2 02D3     		bcc	.L159
2139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
 2332              		.loc 1 2140 0
 2333 00a4 214B     		ldr	r3, .L167+24
 2334 00a6 0122     		movs	r2, #1
 2335 00a8 1A60     		str	r2, [r3]
 2336              	.L159:
2129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 2337              		.loc 1 2129 0
 2338 00aa 1C4B     		ldr	r3, .L167+8
 2339 00ac 1B68     		ldr	r3, [r3]
 2340 00ae 002B     		cmp	r3, #0
 2341 00b0 CBD1     		bne	.L161
2141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB != NULL )
 2342              		.loc 1 2148 0
 2343 00b2 FB68     		ldr	r3, [r7, #12]
 2344 00b4 002B     		cmp	r3, #0
 2345 00b6 01D0     		beq	.L162
2149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 84


2151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					which may have prevented the next unblock time from being
2152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					important for low power tickless implementations, where
2154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					state. */
2156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2346              		.loc 1 2156 0
 2347 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2348              	.L162:
 2349              	.LBB134:
2157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				time. */
2163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2350              		.loc 1 2164 0
 2351 00bc 1C4B     		ldr	r3, .L167+28
 2352 00be 1B68     		ldr	r3, [r3]
 2353 00c0 7B60     		str	r3, [r7, #4]
2165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2354              		.loc 1 2166 0
 2355 00c2 7B68     		ldr	r3, [r7, #4]
 2356 00c4 002B     		cmp	r3, #0
 2357 00c6 10D0     		beq	.L163
 2358              	.L165:
2167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						do
2169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2359              		.loc 1 2170 0
 2360 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2361 00cc 0346     		mov	r3, r0
 2362 00ce 002B     		cmp	r3, #0
 2363 00d0 02D0     		beq	.L164
2171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							{
2172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								xYieldPending = pdTRUE;
 2364              		.loc 1 2172 0
 2365 00d2 164B     		ldr	r3, .L167+24
 2366 00d4 0122     		movs	r2, #1
 2367 00d6 1A60     		str	r2, [r3]
 2368              	.L164:
2173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							}
2174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							else
2175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							{
2176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							}
2178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							--uxPendedCounts;
 2369              		.loc 1 2178 0
 2370 00d8 7B68     		ldr	r3, [r7, #4]
 2371 00da 013B     		subs	r3, r3, #1
 2372 00dc 7B60     		str	r3, [r7, #4]
2179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2373              		.loc 1 2179 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 85


 2374 00de 7B68     		ldr	r3, [r7, #4]
 2375 00e0 002B     		cmp	r3, #0
 2376 00e2 F1D1     		bne	.L165
2180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						uxPendedTicks = 0;
 2377              		.loc 1 2181 0
 2378 00e4 124B     		ldr	r3, .L167+28
 2379 00e6 0022     		movs	r2, #0
 2380 00e8 1A60     		str	r2, [r3]
 2381              	.L163:
 2382              	.LBE134:
2182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2383              		.loc 1 2189 0
 2384 00ea 104B     		ldr	r3, .L167+24
 2385 00ec 1B68     		ldr	r3, [r3]
 2386 00ee 002B     		cmp	r3, #0
 2387 00f0 09D0     		beq	.L158
2190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2388              		.loc 1 2193 0
 2389 00f2 0123     		movs	r3, #1
 2390 00f4 BB60     		str	r3, [r7, #8]
2194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					#endif
2196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2391              		.loc 1 2196 0
 2392 00f6 0F4B     		ldr	r3, .L167+32
 2393 00f8 4FF08052 		mov	r2, #268435456
 2394 00fc 1A60     		str	r2, [r3]
 2395              		.syntax unified
 2396              	@ 2196 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 2397 00fe BFF34F8F 		dsb
 2398              	@ 0 "" 2
 2399              	@ 2196 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 2400 0102 BFF36F8F 		isb
 2401              	@ 0 "" 2
 2402              		.thumb
 2403              		.syntax unified
 2404              	.L158:
2197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 86


2206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
 2405              		.loc 1 2209 0
 2406 0106 FFF7FEFF 		bl	vPortExitCritical
2210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xAlreadyYielded;
 2407              		.loc 1 2211 0
 2408 010a BB68     		ldr	r3, [r7, #8]
2212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2409              		.loc 1 2212 0
 2410 010c 1846     		mov	r0, r3
 2411 010e 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 0110 BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 0112 80BD     		pop	{r7, pc}
 2417              	.L168:
 2418              		.align	2
 2419              	.L167:
 2420 0114 28010000 		.word	uxSchedulerSuspended
 2421 0118 00010000 		.word	uxCurrentNumberOfTasks
 2422 011c C0000000 		.word	xPendingReadyList
 2423 0120 08010000 		.word	uxTopReadyPriority
 2424 0124 04000000 		.word	pxReadyTasksLists
 2425 0128 00000000 		.word	pxCurrentTCB
 2426 012c 14010000 		.word	xYieldPending
 2427 0130 10010000 		.word	uxPendedTicks
 2428 0134 04ED00E0 		.word	-536810236
 2429              		.cfi_endproc
 2430              	.LFE152:
 2431              		.size	xTaskResumeAll, .-xTaskResumeAll
 2432              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2433              		.align	2
 2434              		.global	xTaskGetTickCount
 2435              		.thumb
 2436              		.thumb_func
 2437              		.type	xTaskGetTickCount, %function
 2438              	xTaskGetTickCount:
 2439              	.LFB153:
2213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2440              		.loc 1 2216 0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 8
 2443              		@ frame_needed = 1, uses_anonymous_args = 0
 2444              		@ link register save eliminated.
 2445 0000 80B4     		push	{r7}
 2446              		.cfi_def_cfa_offset 4
 2447              		.cfi_offset 7, -4
 2448 0002 83B0     		sub	sp, sp, #12
 2449              		.cfi_def_cfa_offset 16
 2450 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 87


 2451              		.cfi_def_cfa_register 7
2217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTicks;
2218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xTicks = xTickCount;
 2452              		.loc 1 2222 0
 2453 0006 054B     		ldr	r3, .L171
 2454 0008 1B68     		ldr	r3, [r3]
 2455 000a 7B60     		str	r3, [r7, #4]
2223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xTicks;
 2456              		.loc 1 2226 0
 2457 000c 7B68     		ldr	r3, [r7, #4]
2227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2458              		.loc 1 2227 0
 2459 000e 1846     		mov	r0, r3
 2460 0010 0C37     		adds	r7, r7, #12
 2461              		.cfi_def_cfa_offset 4
 2462 0012 BD46     		mov	sp, r7
 2463              		.cfi_def_cfa_register 13
 2464              		@ sp needed
 2465 0014 5DF8047B 		ldr	r7, [sp], #4
 2466              		.cfi_restore 7
 2467              		.cfi_def_cfa_offset 0
 2468 0018 7047     		bx	lr
 2469              	.L172:
 2470 001a 00BF     		.align	2
 2471              	.L171:
 2472 001c 04010000 		.word	xTickCount
 2473              		.cfi_endproc
 2474              	.LFE153:
 2475              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2476              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2477              		.align	2
 2478              		.global	xTaskGetTickCountFromISR
 2479              		.thumb
 2480              		.thumb_func
 2481              		.type	xTaskGetTickCountFromISR, %function
 2482              	xTaskGetTickCountFromISR:
 2483              	.LFB154:
2228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2484              		.loc 1 2231 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 8
 2487              		@ frame_needed = 1, uses_anonymous_args = 0
 2488 0000 80B5     		push	{r7, lr}
 2489              		.cfi_def_cfa_offset 8
 2490              		.cfi_offset 7, -8
 2491              		.cfi_offset 14, -4
 2492 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 88


 2493              		.cfi_def_cfa_offset 16
 2494 0004 00AF     		add	r7, sp, #0
 2495              		.cfi_def_cfa_register 7
2232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xReturn;
2233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2496              		.loc 1 2249 0
 2497 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2498              		.loc 1 2251 0
 2499 000a 0023     		movs	r3, #0
 2500 000c 7B60     		str	r3, [r7, #4]
2252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = xTickCount;
 2501              		.loc 1 2253 0
 2502 000e 044B     		ldr	r3, .L175
 2503 0010 1B68     		ldr	r3, [r3]
 2504 0012 3B60     		str	r3, [r7]
2254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
 2505              		.loc 1 2257 0
 2506 0014 3B68     		ldr	r3, [r7]
2258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2507              		.loc 1 2258 0
 2508 0016 1846     		mov	r0, r3
 2509 0018 0837     		adds	r7, r7, #8
 2510              		.cfi_def_cfa_offset 8
 2511 001a BD46     		mov	sp, r7
 2512              		.cfi_def_cfa_register 13
 2513              		@ sp needed
 2514 001c 80BD     		pop	{r7, pc}
 2515              	.L176:
 2516 001e 00BF     		.align	2
 2517              	.L175:
 2518 0020 04010000 		.word	xTickCount
 2519              		.cfi_endproc
 2520              	.LFE154:
 2521              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2522              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 89


 2523              		.align	2
 2524              		.global	uxTaskGetNumberOfTasks
 2525              		.thumb
 2526              		.thumb_func
 2527              		.type	uxTaskGetNumberOfTasks, %function
 2528              	uxTaskGetNumberOfTasks:
 2529              	.LFB155:
2259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2530              		.loc 1 2262 0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 0
 2533              		@ frame_needed = 1, uses_anonymous_args = 0
 2534              		@ link register save eliminated.
 2535 0000 80B4     		push	{r7}
 2536              		.cfi_def_cfa_offset 4
 2537              		.cfi_offset 7, -4
 2538 0002 00AF     		add	r7, sp, #0
 2539              		.cfi_def_cfa_register 7
2263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t. */
2265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2540              		.loc 1 2265 0
 2541 0004 034B     		ldr	r3, .L179
 2542 0006 1B68     		ldr	r3, [r3]
2266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2543              		.loc 1 2266 0
 2544 0008 1846     		mov	r0, r3
 2545 000a BD46     		mov	sp, r7
 2546              		.cfi_def_cfa_register 13
 2547              		@ sp needed
 2548 000c 5DF8047B 		ldr	r7, [sp], #4
 2549              		.cfi_restore 7
 2550              		.cfi_def_cfa_offset 0
 2551 0010 7047     		bx	lr
 2552              	.L180:
 2553 0012 00BF     		.align	2
 2554              	.L179:
 2555 0014 00010000 		.word	uxCurrentNumberOfTasks
 2556              		.cfi_endproc
 2557              	.LFE155:
 2558              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2559              		.section	.text.pcTaskGetName,"ax",%progbits
 2560              		.align	2
 2561              		.global	pcTaskGetName
 2562              		.thumb
 2563              		.thumb_func
 2564              		.type	pcTaskGetName, %function
 2565              	pcTaskGetName:
 2566              	.LFB156:
2267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2567              		.loc 1 2270 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 90


 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 16
 2570              		@ frame_needed = 1, uses_anonymous_args = 0
 2571              		@ link register save eliminated.
 2572 0000 80B4     		push	{r7}
 2573              		.cfi_def_cfa_offset 4
 2574              		.cfi_offset 7, -4
 2575 0002 85B0     		sub	sp, sp, #20
 2576              		.cfi_def_cfa_offset 24
 2577 0004 00AF     		add	r7, sp, #0
 2578              		.cfi_def_cfa_register 7
 2579 0006 7860     		str	r0, [r7, #4]
2271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB;
2272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	queried. */
2275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2580              		.loc 1 2275 0
 2581 0008 7B68     		ldr	r3, [r7, #4]
 2582 000a 002B     		cmp	r3, #0
 2583 000c 02D1     		bne	.L182
 2584              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2585 000e 0D4B     		ldr	r3, .L187
 2586 0010 1B68     		ldr	r3, [r3]
 2587 0012 00E0     		b	.L183
 2588              	.L182:
 2589              		.loc 1 2275 0 discriminator 2
 2590 0014 7B68     		ldr	r3, [r7, #4]
 2591              	.L183:
 2592              		.loc 1 2275 0 discriminator 4
 2593 0016 FB60     		str	r3, [r7, #12]
2276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTCB );
 2594              		.loc 1 2276 0 is_stmt 1 discriminator 4
 2595 0018 FB68     		ldr	r3, [r7, #12]
 2596 001a 002B     		cmp	r3, #0
 2597 001c 09D1     		bne	.L184
 2598              	.LBB135:
 2599              	.LBB136:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2600              		.loc 2 156 0 discriminator 1
 2601              		.syntax unified
 2602              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2603 001e 4FF03F03 			mov r3, #63												
 2604 0022 83F31188 		msr basepri, r3											
 2605 0026 BFF36F8F 		isb														
 2606 002a BFF34F8F 		dsb														
 2607              	
 2608              	@ 0 "" 2
 2609              		.thumb
 2610              		.syntax unified
 2611 002e BB60     		str	r3, [r7, #8]
 2612              	.L185:
 2613              	.LBE136:
 2614              	.LBE135:
 2615              		.loc 1 2276 0 discriminator 1
 2616 0030 FEE7     		b	.L185
 2617              	.L184:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 91


2277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2618              		.loc 1 2277 0
 2619 0032 FB68     		ldr	r3, [r7, #12]
 2620 0034 3433     		adds	r3, r3, #52
2278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2621              		.loc 1 2278 0
 2622 0036 1846     		mov	r0, r3
 2623 0038 1437     		adds	r7, r7, #20
 2624              		.cfi_def_cfa_offset 4
 2625 003a BD46     		mov	sp, r7
 2626              		.cfi_def_cfa_register 13
 2627              		@ sp needed
 2628 003c 5DF8047B 		ldr	r7, [sp], #4
 2629              		.cfi_restore 7
 2630              		.cfi_def_cfa_offset 0
 2631 0040 7047     		bx	lr
 2632              	.L188:
 2633 0042 00BF     		.align	2
 2634              	.L187:
 2635 0044 00000000 		.word	pxCurrentTCB
 2636              		.cfi_endproc
 2637              	.LFE156:
 2638              		.size	pcTaskGetName, .-pcTaskGetName
 2639              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2640              		.align	2
 2641              		.global	xTaskIncrementTick
 2642              		.thumb
 2643              		.thumb_func
 2644              		.type	xTaskIncrementTick, %function
 2645              	xTaskIncrementTick:
 2646              	.LFB157:
2279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t x;
2287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	char cNextChar;
2288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			do
2296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mismatch. */
2301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 92


2305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Characters didn't match. */
2308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
2309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else if( cNextChar == 0x00 )
2311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						found. */
2314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						pxReturn = pxNextTCB;
2315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
2316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxReturn != NULL )
2324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The handle has been found. */
2326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
2327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return pxReturn;
2337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t* pxTCB;
2348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Search the ready lists. */
2355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			do
2356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxQueue--;
2358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB != NULL )
2361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 93


2362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Found the handle. */
2363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
2364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Search the delayed lists. */
2369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == NULL )
2370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == NULL )
2375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB == NULL )
2382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Search the suspended list. */
2384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
2388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB == NULL )
2392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Search the deleted list. */
2394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
2398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 94


2419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task in the Ready state. */
2420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				do
2421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					uxQueue--;
2423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				task in the Blocked state. */
2429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					each task in the Suspended state. */
2444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
2455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
2457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
2460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						*pulTotalRunTime = 0;
2464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxTask;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 95


2476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xIdleTaskHandle;
2489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 1. */
2498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		each stepped tick. */
2505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount += xTicksToJump;
2507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
2519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxTCB );
2521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vTaskSuspendAll();
2523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			it is actually in the Blocked state. */
2526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
2529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				scheduler is suspended. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 96


2533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				is used. */
2539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskENTER_CRITICAL();
2540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskEXIT_CRITICAL();
2552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				switch if preemption is turned off. */
2558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						is unsuspended. */
2567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
2568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFAIL;
2579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xTaskResumeAll();
2582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
2588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 97


2590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2647              		.loc 1 2590 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 24
 2650              		@ frame_needed = 1, uses_anonymous_args = 0
 2651 0000 80B5     		push	{r7, lr}
 2652              		.cfi_def_cfa_offset 8
 2653              		.cfi_offset 7, -8
 2654              		.cfi_offset 14, -4
 2655 0002 86B0     		sub	sp, sp, #24
 2656              		.cfi_def_cfa_offset 32
 2657 0004 00AF     		add	r7, sp, #0
 2658              		.cfi_def_cfa_register 7
2591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t * pxTCB;
2592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xItemValue;
2593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2659              		.loc 1 2593 0
 2660 0006 0023     		movs	r3, #0
 2661 0008 7B61     		str	r3, [r7, #20]
2594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	tasks to be unblocked. */
2598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2662              		.loc 1 2599 0
 2663 000a 494B     		ldr	r3, .L206
 2664 000c 1B68     		ldr	r3, [r3]
 2665 000e 002B     		cmp	r3, #0
 2666 0010 7DD1     		bne	.L190
 2667              	.LBB137:
2600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		block. */
2603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2668              		.loc 1 2603 0
 2669 0012 484B     		ldr	r3, .L206+4
 2670 0014 1B68     		ldr	r3, [r3]
 2671 0016 0133     		adds	r3, r3, #1
 2672 0018 3B61     		str	r3, [r7, #16]
2604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xTickCount = xConstTickCount;
 2673              		.loc 1 2607 0
 2674 001a 464A     		ldr	r2, .L206+4
 2675 001c 3B69     		ldr	r3, [r7, #16]
 2676 001e 1360     		str	r3, [r2]
2608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 2677              		.loc 1 2609 0
 2678 0020 3B69     		ldr	r3, [r7, #16]
 2679 0022 002B     		cmp	r3, #0
 2680 0024 1FD1     		bne	.L191
 2681              	.LBB138:
2610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 98


 2682              		.loc 1 2611 0
 2683 0026 444B     		ldr	r3, .L206+8
 2684 0028 1B68     		ldr	r3, [r3]
 2685 002a 1B68     		ldr	r3, [r3]
 2686 002c 002B     		cmp	r3, #0
 2687 002e 09D0     		beq	.L192
 2688              	.LBB139:
 2689              	.LBB140:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2690              		.loc 2 156 0 discriminator 1
 2691              		.syntax unified
 2692              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2693 0030 4FF03F03 			mov r3, #63												
 2694 0034 83F31188 		msr basepri, r3											
 2695 0038 BFF36F8F 		isb														
 2696 003c BFF34F8F 		dsb														
 2697              	
 2698              	@ 0 "" 2
 2699              		.thumb
 2700              		.syntax unified
 2701 0040 3B60     		str	r3, [r7]
 2702              	.L193:
 2703              	.LBE140:
 2704              	.LBE139:
 2705              		.loc 1 2611 0 discriminator 1
 2706 0042 FEE7     		b	.L193
 2707              	.L192:
 2708              		.loc 1 2611 0 is_stmt 0 discriminator 2
 2709 0044 3C4B     		ldr	r3, .L206+8
 2710 0046 1B68     		ldr	r3, [r3]
 2711 0048 FB60     		str	r3, [r7, #12]
 2712 004a 3C4B     		ldr	r3, .L206+12
 2713 004c 1B68     		ldr	r3, [r3]
 2714 004e 3A4A     		ldr	r2, .L206+8
 2715 0050 1360     		str	r3, [r2]
 2716 0052 3A4A     		ldr	r2, .L206+12
 2717 0054 FB68     		ldr	r3, [r7, #12]
 2718 0056 1360     		str	r3, [r2]
 2719 0058 394B     		ldr	r3, .L206+16
 2720 005a 1B68     		ldr	r3, [r3]
 2721 005c 0133     		adds	r3, r3, #1
 2722 005e 384A     		ldr	r2, .L206+16
 2723 0060 1360     		str	r3, [r2]
 2724 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2725              	.L191:
 2726              	.LBE138:
2612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		look any further down the list. */
2622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 99


 2727              		.loc 1 2622 0 is_stmt 1
 2728 0066 374B     		ldr	r3, .L206+20
 2729 0068 1B68     		ldr	r3, [r3]
 2730 006a 3A69     		ldr	r2, [r7, #16]
 2731 006c 9A42     		cmp	r2, r3
 2732 006e 53D3     		bcc	.L203
 2733              	.L202:
2623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			for( ;; )
2625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2734              		.loc 1 2626 0
 2735 0070 314B     		ldr	r3, .L206+8
 2736 0072 1B68     		ldr	r3, [r3]
 2737 0074 1B68     		ldr	r3, [r3]
 2738 0076 002B     		cmp	r3, #0
 2739 0078 01D1     		bne	.L195
 2740              		.loc 1 2626 0 is_stmt 0 discriminator 1
 2741 007a 0123     		movs	r3, #1
 2742 007c 00E0     		b	.L196
 2743              	.L195:
 2744              		.loc 1 2626 0 discriminator 2
 2745 007e 0023     		movs	r3, #0
 2746              	.L196:
 2747              		.loc 1 2626 0 discriminator 4
 2748 0080 002B     		cmp	r3, #0
 2749 0082 04D0     		beq	.L197
2627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					to the maximum possible value so it is extremely
2630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					unlikely that the
2631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					next time through. */
2633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2750              		.loc 1 2633 0 is_stmt 1
 2751 0084 2F4B     		ldr	r3, .L206+20
 2752 0086 4FF0FF32 		mov	r2, #-1
 2753 008a 1A60     		str	r2, [r3]
2634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 2754              		.loc 1 2634 0
 2755 008c 44E0     		b	.L203
 2756              	.L197:
2635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					at which the task at the head of the delayed list must
2641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					be removed from the Blocked state. */
2642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2757              		.loc 1 2642 0
 2758 008e 2A4B     		ldr	r3, .L206+8
 2759 0090 1B68     		ldr	r3, [r3]
 2760 0092 DB68     		ldr	r3, [r3, #12]
 2761 0094 DB68     		ldr	r3, [r3, #12]
 2762 0096 BB60     		str	r3, [r7, #8]
2643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 100


 2763              		.loc 1 2643 0
 2764 0098 BB68     		ldr	r3, [r7, #8]
 2765 009a 5B68     		ldr	r3, [r3, #4]
 2766 009c 7B60     		str	r3, [r7, #4]
2644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2767              		.loc 1 2645 0
 2768 009e 3A69     		ldr	r2, [r7, #16]
 2769 00a0 7B68     		ldr	r3, [r7, #4]
 2770 00a2 9A42     		cmp	r2, r3
 2771 00a4 03D2     		bcs	.L198
2646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						item value is the time at which the task at the head
2649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						state -	so record the item value in
2651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xNextTaskUnblockTime. */
2652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2772              		.loc 1 2652 0
 2773 00a6 274A     		ldr	r2, .L206+20
 2774 00a8 7B68     		ldr	r3, [r7, #4]
 2775 00aa 1360     		str	r3, [r2]
2653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						break;
 2776              		.loc 1 2653 0
 2777 00ac 34E0     		b	.L203
 2778              	.L198:
2654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2779              		.loc 1 2661 0
 2780 00ae BB68     		ldr	r3, [r7, #8]
 2781 00b0 0433     		adds	r3, r3, #4
 2782 00b2 1846     		mov	r0, r3
 2783 00b4 FFF7FEFF 		bl	uxListRemove
2662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					it from the event list. */
2665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2784              		.loc 1 2665 0
 2785 00b8 BB68     		ldr	r3, [r7, #8]
 2786 00ba 9B6A     		ldr	r3, [r3, #40]
 2787 00bc 002B     		cmp	r3, #0
 2788 00be 04D0     		beq	.L199
2666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2789              		.loc 1 2667 0
 2790 00c0 BB68     		ldr	r3, [r7, #8]
 2791 00c2 1833     		adds	r3, r3, #24
 2792 00c4 1846     		mov	r0, r3
 2793 00c6 FFF7FEFF 		bl	uxListRemove
 2794              	.L199:
2668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 101


2669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
2670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					list. */
2676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2795              		.loc 1 2676 0
 2796 00ca BB68     		ldr	r3, [r7, #8]
 2797 00cc DA6A     		ldr	r2, [r3, #44]
 2798 00ce 1E4B     		ldr	r3, .L206+24
 2799 00d0 1B68     		ldr	r3, [r3]
 2800 00d2 9A42     		cmp	r2, r3
 2801 00d4 03D9     		bls	.L200
 2802              		.loc 1 2676 0 is_stmt 0 discriminator 1
 2803 00d6 BB68     		ldr	r3, [r7, #8]
 2804 00d8 DB6A     		ldr	r3, [r3, #44]
 2805 00da 1B4A     		ldr	r2, .L206+24
 2806 00dc 1360     		str	r3, [r2]
 2807              	.L200:
 2808              		.loc 1 2676 0 discriminator 3
 2809 00de BB68     		ldr	r3, [r7, #8]
 2810 00e0 DA6A     		ldr	r2, [r3, #44]
 2811 00e2 1346     		mov	r3, r2
 2812 00e4 9B00     		lsls	r3, r3, #2
 2813 00e6 1344     		add	r3, r3, r2
 2814 00e8 9B00     		lsls	r3, r3, #2
 2815 00ea 184A     		ldr	r2, .L206+28
 2816 00ec 1A44     		add	r2, r2, r3
 2817 00ee BB68     		ldr	r3, [r7, #8]
 2818 00f0 0433     		adds	r3, r3, #4
 2819 00f2 1946     		mov	r1, r3
 2820 00f4 1046     		mov	r0, r2
 2821 00f6 FFF7FEFF 		bl	vListInsertEnd
2677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					context switch if preemption is turned off. */
2680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
2682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						only be performed if the unblocked task has a
2684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						priority that is equal to or higher than the
2685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						currently executing task. */
2686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2822              		.loc 1 2686 0 is_stmt 1 discriminator 3
 2823 00fa BB68     		ldr	r3, [r7, #8]
 2824 00fc DA6A     		ldr	r2, [r3, #44]
 2825 00fe 144B     		ldr	r3, .L206+32
 2826 0100 1B68     		ldr	r3, [r3]
 2827 0102 DB6A     		ldr	r3, [r3, #44]
 2828 0104 9A42     		cmp	r2, r3
 2829 0106 B3D3     		bcc	.L202
2687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2830              		.loc 1 2688 0
 2831 0108 0123     		movs	r3, #1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 102


 2832 010a 7B61     		str	r3, [r7, #20]
2689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
2690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						else
2691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
2692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
2694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
2695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 2833              		.loc 1 2697 0
 2834 010c B0E7     		b	.L202
 2835              	.L190:
 2836              	.LBE137:
2698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vApplicationTickHook();
2723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
2725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
2726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
2728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		++uxPendedTicks;
 2837              		.loc 1 2733 0
 2838 010e 114B     		ldr	r3, .L206+36
 2839 0110 1B68     		ldr	r3, [r3]
 2840 0112 0133     		adds	r3, r3, #1
 2841 0114 0F4A     		ldr	r2, .L206+36
 2842 0116 1360     		str	r3, [r2]
 2843              	.L203:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 103


2734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		scheduler is locked. */
2737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vApplicationTickHook();
2740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
2742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2844              		.loc 1 2746 0
 2845 0118 0F4B     		ldr	r3, .L206+40
 2846 011a 1B68     		ldr	r3, [r3]
 2847 011c 002B     		cmp	r3, #0
 2848 011e 01D0     		beq	.L204
2747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2849              		.loc 1 2748 0
 2850 0120 0123     		movs	r3, #1
 2851 0122 7B61     		str	r3, [r7, #20]
 2852              	.L204:
2749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xSwitchRequired;
 2853              		.loc 1 2757 0
 2854 0124 7B69     		ldr	r3, [r7, #20]
2758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2855              		.loc 1 2758 0
 2856 0126 1846     		mov	r0, r3
 2857 0128 1837     		adds	r7, r7, #24
 2858              		.cfi_def_cfa_offset 8
 2859 012a BD46     		mov	sp, r7
 2860              		.cfi_def_cfa_register 13
 2861              		@ sp needed
 2862 012c 80BD     		pop	{r7, pc}
 2863              	.L207:
 2864 012e 00BF     		.align	2
 2865              	.L206:
 2866 0130 28010000 		.word	uxSchedulerSuspended
 2867 0134 04010000 		.word	xTickCount
 2868 0138 B8000000 		.word	pxDelayedTaskList
 2869 013c BC000000 		.word	pxOverflowDelayedTaskList
 2870 0140 18010000 		.word	xNumOfOverflows
 2871 0144 20010000 		.word	xNextTaskUnblockTime
 2872 0148 08010000 		.word	uxTopReadyPriority
 2873 014c 04000000 		.word	pxReadyTasksLists
 2874 0150 00000000 		.word	pxCurrentTCB
 2875 0154 10010000 		.word	uxPendedTicks
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 104


 2876 0158 14010000 		.word	xYieldPending
 2877              		.cfi_endproc
 2878              	.LFE157:
 2879              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2880              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2881              		.align	2
 2882              		.global	vTaskSwitchContext
 2883              		.thumb
 2884              		.thumb_func
 2885              		.type	vTaskSwitchContext, %function
 2886              	vTaskSwitchContext:
 2887              	.LFB158:
2759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		getting set. */
2769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
2781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
2783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 105


2804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
2808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
2812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *xTCB;
2824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
2825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask == NULL )
2828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
2841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFAIL;
2843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
2846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSwitchContext( void )
2852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 2888              		.loc 1 2852 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 24
 2891              		@ frame_needed = 1, uses_anonymous_args = 0
 2892 0000 80B5     		push	{r7, lr}
 2893              		.cfi_def_cfa_offset 8
 2894              		.cfi_offset 7, -8
 2895              		.cfi_offset 14, -4
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 106


 2896 0002 86B0     		sub	sp, sp, #24
 2897              		.cfi_def_cfa_offset 32
 2898 0004 00AF     		add	r7, sp, #0
 2899              		.cfi_def_cfa_register 7
2853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2900              		.loc 1 2853 0
 2901 0006 3A4B     		ldr	r3, .L219
 2902 0008 1B68     		ldr	r3, [r3]
 2903 000a 002B     		cmp	r3, #0
 2904 000c 03D0     		beq	.L209
2854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		switch. */
2857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
 2905              		.loc 1 2857 0
 2906 000e 394B     		ldr	r3, .L219+4
 2907 0010 0122     		movs	r2, #1
 2908 0012 1A60     		str	r2, [r3]
2858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
2860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
2861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdFALSE;
2862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#else
2869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
2871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				protection here so count values are only valid until the timer
2876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				against suspect run time stat counter implementations - which
2878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				are provided by the application, not the kernel. */
2879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
2884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
2885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
2887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{																									\
2893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t * const pulStack = ( uint32_t * ) pxCurrentTCB->pxStack;							\
2894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
2895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																											\
2896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ( pulStack[ 0 ] != ulCheckValue ) ||												\
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 107


2897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
2898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 2 ] != ulCheckValue ) ||												\
2899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 3 ] != ulCheckValue ) )												\
2900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{																								\
2901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
2902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}																								\
2903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		optimised asm code. */
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			structure specific to this task. */
2914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
2918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 2909              		.loc 1 2918 0
 2910 0014 67E0     		b	.L218
 2911              	.L209:
2861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2912              		.loc 1 2861 0
 2913 0016 374B     		ldr	r3, .L219+4
 2914 0018 0022     		movs	r2, #0
 2915 001a 1A60     		str	r2, [r3]
 2916              	.LBB141:
2893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
 2917              		.loc 1 2893 0
 2918 001c 364B     		ldr	r3, .L219+8
 2919 001e 1B68     		ldr	r3, [r3]
 2920 0020 1B6B     		ldr	r3, [r3, #48]
 2921 0022 3B61     		str	r3, [r7, #16]
2894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 																											\
 2922              		.loc 1 2894 0
 2923 0024 4FF0A533 		mov	r3, #-1515870811
 2924 0028 FB60     		str	r3, [r7, #12]
2896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
 2925              		.loc 1 2896 0
 2926 002a 3B69     		ldr	r3, [r7, #16]
 2927 002c 1A68     		ldr	r2, [r3]
 2928 002e FB68     		ldr	r3, [r7, #12]
 2929 0030 9A42     		cmp	r2, r3
 2930 0032 11D1     		bne	.L211
2897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 2 ] != ulCheckValue ) ||												\
 2931              		.loc 1 2897 0 discriminator 1
 2932 0034 3B69     		ldr	r3, [r7, #16]
 2933 0036 0433     		adds	r3, r3, #4
 2934 0038 1A68     		ldr	r2, [r3]
2896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 1 ] != ulCheckValue ) ||												\
 2935              		.loc 1 2896 0 discriminator 1
 2936 003a FB68     		ldr	r3, [r7, #12]
 2937 003c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 108


 2938 003e 0BD1     		bne	.L211
2898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 3 ] != ulCheckValue ) )												\
 2939              		.loc 1 2898 0
 2940 0040 3B69     		ldr	r3, [r7, #16]
 2941 0042 0833     		adds	r3, r3, #8
 2942 0044 1A68     		ldr	r2, [r3]
2897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 2 ] != ulCheckValue ) ||												\
 2943              		.loc 1 2897 0
 2944 0046 FB68     		ldr	r3, [r7, #12]
 2945 0048 9A42     		cmp	r2, r3
 2946 004a 05D1     		bne	.L211
2899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{																								\
 2947              		.loc 1 2899 0
 2948 004c 3B69     		ldr	r3, [r7, #16]
 2949 004e 0C33     		adds	r3, r3, #12
 2950 0050 1A68     		ldr	r2, [r3]
2898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pulStack[ 3 ] != ulCheckValue ) )												\
 2951              		.loc 1 2898 0
 2952 0052 FB68     		ldr	r3, [r7, #12]
 2953 0054 9A42     		cmp	r2, r3
 2954 0056 08D0     		beq	.L212
 2955              	.L211:
2901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}																								\
 2956              		.loc 1 2901 0
 2957 0058 274B     		ldr	r3, .L219+8
 2958 005a 1A68     		ldr	r2, [r3]
 2959 005c 264B     		ldr	r3, .L219+8
 2960 005e 1B68     		ldr	r3, [r3]
 2961 0060 3433     		adds	r3, r3, #52
 2962 0062 1946     		mov	r1, r3
 2963 0064 1046     		mov	r0, r2
 2964 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2965              	.L212:
 2966              	.LBE141:
 2967              	.LBB142:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2968              		.loc 1 2907 0
 2969 006a 244B     		ldr	r3, .L219+12
 2970 006c 1B68     		ldr	r3, [r3]
 2971 006e 7B61     		str	r3, [r7, #20]
 2972 0070 0FE0     		b	.L213
 2973              	.L216:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2974              		.loc 1 2907 0 is_stmt 0 discriminator 5
 2975 0072 7B69     		ldr	r3, [r7, #20]
 2976 0074 002B     		cmp	r3, #0
 2977 0076 09D1     		bne	.L214
 2978              	.LBB143:
 2979              	.LBB144:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 2980              		.loc 2 156 0 is_stmt 1 discriminator 2
 2981              		.syntax unified
 2982              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 2983 0078 4FF03F03 			mov r3, #63												
 2984 007c 83F31188 		msr basepri, r3											
 2985 0080 BFF36F8F 		isb														
 2986 0084 BFF34F8F 		dsb														
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 109


 2987              	
 2988              	@ 0 "" 2
 2989              		.thumb
 2990              		.syntax unified
 2991 0088 7B60     		str	r3, [r7, #4]
 2992              	.L215:
 2993              	.LBE144:
 2994              	.LBE143:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2995              		.loc 1 2907 0 discriminator 1
 2996 008a FEE7     		b	.L215
 2997              	.L214:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2998              		.loc 1 2907 0 is_stmt 0 discriminator 3
 2999 008c 7B69     		ldr	r3, [r7, #20]
 3000 008e 013B     		subs	r3, r3, #1
 3001 0090 7B61     		str	r3, [r7, #20]
 3002              	.L213:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3003              		.loc 1 2907 0 discriminator 4
 3004 0092 1B49     		ldr	r1, .L219+16
 3005 0094 7A69     		ldr	r2, [r7, #20]
 3006 0096 1346     		mov	r3, r2
 3007 0098 9B00     		lsls	r3, r3, #2
 3008 009a 1344     		add	r3, r3, r2
 3009 009c 9B00     		lsls	r3, r3, #2
 3010 009e 0B44     		add	r3, r3, r1
 3011 00a0 1B68     		ldr	r3, [r3]
 3012 00a2 002B     		cmp	r3, #0
 3013 00a4 E5D0     		beq	.L216
 3014              	.LBB145:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3015              		.loc 1 2907 0 discriminator 6
 3016 00a6 7A69     		ldr	r2, [r7, #20]
 3017 00a8 1346     		mov	r3, r2
 3018 00aa 9B00     		lsls	r3, r3, #2
 3019 00ac 1344     		add	r3, r3, r2
 3020 00ae 9B00     		lsls	r3, r3, #2
 3021 00b0 134A     		ldr	r2, .L219+16
 3022 00b2 1344     		add	r3, r3, r2
 3023 00b4 BB60     		str	r3, [r7, #8]
 3024 00b6 BB68     		ldr	r3, [r7, #8]
 3025 00b8 5B68     		ldr	r3, [r3, #4]
 3026 00ba 5A68     		ldr	r2, [r3, #4]
 3027 00bc BB68     		ldr	r3, [r7, #8]
 3028 00be 5A60     		str	r2, [r3, #4]
 3029 00c0 BB68     		ldr	r3, [r7, #8]
 3030 00c2 5A68     		ldr	r2, [r3, #4]
 3031 00c4 BB68     		ldr	r3, [r7, #8]
 3032 00c6 0833     		adds	r3, r3, #8
 3033 00c8 9A42     		cmp	r2, r3
 3034 00ca 04D1     		bne	.L217
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3035              		.loc 1 2907 0 discriminator 7
 3036 00cc BB68     		ldr	r3, [r7, #8]
 3037 00ce 5B68     		ldr	r3, [r3, #4]
 3038 00d0 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 110


 3039 00d2 BB68     		ldr	r3, [r7, #8]
 3040 00d4 5A60     		str	r2, [r3, #4]
 3041              	.L217:
2907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3042              		.loc 1 2907 0 discriminator 9
 3043 00d6 BB68     		ldr	r3, [r7, #8]
 3044 00d8 5B68     		ldr	r3, [r3, #4]
 3045 00da DB68     		ldr	r3, [r3, #12]
 3046 00dc 064A     		ldr	r2, .L219+8
 3047 00de 1360     		str	r3, [r2]
 3048              	.LBE145:
 3049 00e0 064A     		ldr	r2, .L219+12
 3050 00e2 7B69     		ldr	r3, [r7, #20]
 3051 00e4 1360     		str	r3, [r2]
 3052              	.L218:
 3053              	.LBE142:
 3054              		.loc 1 2918 0 is_stmt 1
 3055 00e6 00BF     		nop
 3056 00e8 1837     		adds	r7, r7, #24
 3057              		.cfi_def_cfa_offset 8
 3058 00ea BD46     		mov	sp, r7
 3059              		.cfi_def_cfa_register 13
 3060              		@ sp needed
 3061 00ec 80BD     		pop	{r7, pc}
 3062              	.L220:
 3063 00ee 00BF     		.align	2
 3064              	.L219:
 3065 00f0 28010000 		.word	uxSchedulerSuspended
 3066 00f4 14010000 		.word	xYieldPending
 3067 00f8 00000000 		.word	pxCurrentTCB
 3068 00fc 08010000 		.word	uxTopReadyPriority
 3069 0100 04000000 		.word	pxReadyTasksLists
 3070              		.cfi_endproc
 3071              	.LFE158:
 3072              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 3073              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3074              		.align	2
 3075              		.global	vTaskPlaceOnEventList
 3076              		.thumb
 3077              		.thumb_func
 3078              		.type	vTaskPlaceOnEventList, %function
 3079              	vTaskPlaceOnEventList:
 3080              	.LFB159:
2919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3081              		.loc 1 2922 0
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 16
 3084              		@ frame_needed = 1, uses_anonymous_args = 0
 3085 0000 80B5     		push	{r7, lr}
 3086              		.cfi_def_cfa_offset 8
 3087              		.cfi_offset 7, -8
 3088              		.cfi_offset 14, -4
 3089 0002 84B0     		sub	sp, sp, #16
 3090              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 111


 3091 0004 00AF     		add	r7, sp, #0
 3092              		.cfi_def_cfa_register 7
 3093 0006 7860     		str	r0, [r7, #4]
 3094 0008 3960     		str	r1, [r7]
2923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
 3095              		.loc 1 2923 0
 3096 000a 7B68     		ldr	r3, [r7, #4]
 3097 000c 002B     		cmp	r3, #0
 3098 000e 09D1     		bne	.L222
 3099              	.LBB146:
 3100              	.LBB147:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3101              		.loc 2 156 0 discriminator 1
 3102              		.syntax unified
 3103              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3104 0010 4FF03F03 			mov r3, #63												
 3105 0014 83F31188 		msr basepri, r3											
 3106 0018 BFF36F8F 		isb														
 3107 001c BFF34F8F 		dsb														
 3108              	
 3109              	@ 0 "" 2
 3110              		.thumb
 3111              		.syntax unified
 3112 0020 FB60     		str	r3, [r7, #12]
 3113              	.L223:
 3114              	.LBE147:
 3115              	.LBE146:
 3116              		.loc 1 2923 0 discriminator 1
 3117 0022 FEE7     		b	.L223
 3118              	.L222:
2924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3119              		.loc 1 2932 0
 3120 0024 074B     		ldr	r3, .L224
 3121 0026 1B68     		ldr	r3, [r3]
 3122 0028 1833     		adds	r3, r3, #24
 3123 002a 1946     		mov	r1, r3
 3124 002c 7868     		ldr	r0, [r7, #4]
 3125 002e FFF7FEFF 		bl	vListInsert
2933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3126              		.loc 1 2934 0
 3127 0032 0121     		movs	r1, #1
 3128 0034 3868     		ldr	r0, [r7]
 3129 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3130              		.loc 1 2935 0
 3131 003a 00BF     		nop
 3132 003c 1037     		adds	r7, r7, #16
 3133              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 112


 3134 003e BD46     		mov	sp, r7
 3135              		.cfi_def_cfa_register 13
 3136              		@ sp needed
 3137 0040 80BD     		pop	{r7, pc}
 3138              	.L225:
 3139 0042 00BF     		.align	2
 3140              	.L224:
 3141 0044 00000000 		.word	pxCurrentTCB
 3142              		.cfi_endproc
 3143              	.LFE159:
 3144              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3145              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3146              		.align	2
 3147              		.global	vTaskPlaceOnUnorderedEventList
 3148              		.thumb
 3149              		.thumb_func
 3150              		.type	vTaskPlaceOnUnorderedEventList, %function
 3151              	vTaskPlaceOnUnorderedEventList:
 3152              	.LFB160:
2936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3153              		.loc 1 2939 0
 3154              		.cfi_startproc
 3155              		@ args = 0, pretend = 0, frame = 24
 3156              		@ frame_needed = 1, uses_anonymous_args = 0
 3157 0000 80B5     		push	{r7, lr}
 3158              		.cfi_def_cfa_offset 8
 3159              		.cfi_offset 7, -8
 3160              		.cfi_offset 14, -4
 3161 0002 86B0     		sub	sp, sp, #24
 3162              		.cfi_def_cfa_offset 32
 3163 0004 00AF     		add	r7, sp, #0
 3164              		.cfi_def_cfa_register 7
 3165 0006 F860     		str	r0, [r7, #12]
 3166 0008 B960     		str	r1, [r7, #8]
 3167 000a 7A60     		str	r2, [r7, #4]
2940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxEventList );
 3168              		.loc 1 2940 0
 3169 000c FB68     		ldr	r3, [r7, #12]
 3170 000e 002B     		cmp	r3, #0
 3171 0010 09D1     		bne	.L227
 3172              	.LBB148:
 3173              	.LBB149:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3174              		.loc 2 156 0 discriminator 1
 3175              		.syntax unified
 3176              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3177 0012 4FF03F03 			mov r3, #63												
 3178 0016 83F31188 		msr basepri, r3											
 3179 001a BFF36F8F 		isb														
 3180 001e BFF34F8F 		dsb														
 3181              	
 3182              	@ 0 "" 2
 3183              		.thumb
 3184              		.syntax unified
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 113


 3185 0022 3B61     		str	r3, [r7, #16]
 3186              	.L228:
 3187              	.LBE149:
 3188              	.LBE148:
 3189              		.loc 1 2940 0 discriminator 1
 3190 0024 FEE7     		b	.L228
 3191              	.L227:
2941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the event groups implementation. */
2944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3192              		.loc 1 2944 0
 3193 0026 114B     		ldr	r3, .L231
 3194 0028 1B68     		ldr	r3, [r3]
 3195 002a 002B     		cmp	r3, #0
 3196 002c 09D1     		bne	.L229
 3197              	.LBB150:
 3198              	.LBB151:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3199              		.loc 2 156 0 discriminator 1
 3200              		.syntax unified
 3201              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3202 002e 4FF03F03 			mov r3, #63												
 3203 0032 83F31188 		msr basepri, r3											
 3204 0036 BFF36F8F 		isb														
 3205 003a BFF34F8F 		dsb														
 3206              	
 3207              	@ 0 "" 2
 3208              		.thumb
 3209              		.syntax unified
 3210 003e 7B61     		str	r3, [r7, #20]
 3211              	.L230:
 3212              	.LBE151:
 3213              	.LBE150:
 3214              		.loc 1 2944 0 discriminator 2
 3215 0040 FEE7     		b	.L230
 3216              	.L229:
2945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	task that is not in the Blocked state. */
2949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3217              		.loc 1 2949 0
 3218 0042 0B4B     		ldr	r3, .L231+4
 3219 0044 1B68     		ldr	r3, [r3]
 3220 0046 BA68     		ldr	r2, [r7, #8]
 3221 0048 42F00042 		orr	r2, r2, #-2147483648
 3222 004c 9A61     		str	r2, [r3, #24]
2950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the task level). */
2956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3223              		.loc 1 2956 0
 3224 004e 084B     		ldr	r3, .L231+4
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 114


 3225 0050 1B68     		ldr	r3, [r3]
 3226 0052 1833     		adds	r3, r3, #24
 3227 0054 1946     		mov	r1, r3
 3228 0056 F868     		ldr	r0, [r7, #12]
 3229 0058 FFF7FEFF 		bl	vListInsertEnd
2957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3230              		.loc 1 2958 0
 3231 005c 0121     		movs	r1, #1
 3232 005e 7868     		ldr	r0, [r7, #4]
 3233 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3234              		.loc 1 2959 0
 3235 0064 00BF     		nop
 3236 0066 1837     		adds	r7, r7, #24
 3237              		.cfi_def_cfa_offset 8
 3238 0068 BD46     		mov	sp, r7
 3239              		.cfi_def_cfa_register 13
 3240              		@ sp needed
 3241 006a 80BD     		pop	{r7, pc}
 3242              	.L232:
 3243              		.align	2
 3244              	.L231:
 3245 006c 28010000 		.word	uxSchedulerSuspended
 3246 0070 00000000 		.word	pxCurrentTCB
 3247              		.cfi_endproc
 3248              	.LFE160:
 3249              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3250              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3251              		.align	2
 3252              		.global	vTaskPlaceOnEventListRestricted
 3253              		.thumb
 3254              		.thumb_func
 3255              		.type	vTaskPlaceOnEventListRestricted, %function
 3256              	vTaskPlaceOnEventListRestricted:
 3257              	.LFB161:
2960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 3258              		.loc 1 2965 0
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 24
 3261              		@ frame_needed = 1, uses_anonymous_args = 0
 3262 0000 80B5     		push	{r7, lr}
 3263              		.cfi_def_cfa_offset 8
 3264              		.cfi_offset 7, -8
 3265              		.cfi_offset 14, -4
 3266 0002 86B0     		sub	sp, sp, #24
 3267              		.cfi_def_cfa_offset 32
 3268 0004 00AF     		add	r7, sp, #0
 3269              		.cfi_def_cfa_register 7
 3270 0006 F860     		str	r0, [r7, #12]
 3271 0008 B960     		str	r1, [r7, #8]
 3272 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 115


2966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( pxEventList );
 3273              		.loc 1 2966 0
 3274 000c FB68     		ldr	r3, [r7, #12]
 3275 000e 002B     		cmp	r3, #0
 3276 0010 09D1     		bne	.L234
 3277              	.LBB152:
 3278              	.LBB153:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3279              		.loc 2 156 0 discriminator 1
 3280              		.syntax unified
 3281              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3282 0012 4FF03F03 			mov r3, #63												
 3283 0016 83F31188 		msr basepri, r3											
 3284 001a BFF36F8F 		isb														
 3285 001e BFF34F8F 		dsb														
 3286              	
 3287              	@ 0 "" 2
 3288              		.thumb
 3289              		.syntax unified
 3290 0022 7B61     		str	r3, [r7, #20]
 3291              	.L235:
 3292              	.LBE153:
 3293              	.LBE152:
 3294              		.loc 1 2966 0 discriminator 1
 3295 0024 FEE7     		b	.L235
 3296              	.L234:
2967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This function should not be called by application code hence the
2969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		it should be called with the scheduler suspended. */
2972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		can be used in place of vListInsert. */
2978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3297              		.loc 1 2978 0
 3298 0026 0A4B     		ldr	r3, .L237
 3299 0028 1B68     		ldr	r3, [r3]
 3300 002a 1833     		adds	r3, r3, #24
 3301 002c 1946     		mov	r1, r3
 3302 002e F868     		ldr	r0, [r7, #12]
 3303 0030 FFF7FEFF 		bl	vListInsertEnd
2979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 3304              		.loc 1 2983 0
 3305 0034 7B68     		ldr	r3, [r7, #4]
 3306 0036 002B     		cmp	r3, #0
 3307 0038 02D0     		beq	.L236
2984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
2985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 3308              		.loc 1 2985 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 116


 3309 003a 4FF0FF33 		mov	r3, #-1
 3310 003e BB60     		str	r3, [r7, #8]
 3311              	.L236:
2986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
2987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3312              		.loc 1 2989 0
 3313 0040 7968     		ldr	r1, [r7, #4]
 3314 0042 B868     		ldr	r0, [r7, #8]
 3315 0044 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3316              		.loc 1 2990 0
 3317 0048 00BF     		nop
 3318 004a 1837     		adds	r7, r7, #24
 3319              		.cfi_def_cfa_offset 8
 3320 004c BD46     		mov	sp, r7
 3321              		.cfi_def_cfa_register 13
 3322              		@ sp needed
 3323 004e 80BD     		pop	{r7, pc}
 3324              	.L238:
 3325              		.align	2
 3326              	.L237:
 3327 0050 00000000 		.word	pxCurrentTCB
 3328              		.cfi_endproc
 3329              	.LFE161:
 3330              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3331              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3332              		.align	2
 3333              		.global	xTaskRemoveFromEventList
 3334              		.thumb
 3335              		.thumb_func
 3336              		.type	xTaskRemoveFromEventList, %function
 3337              	xTaskRemoveFromEventList:
 3338              	.LFB162:
2991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TIMERS */
2993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
2994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
2995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3339              		.loc 1 2996 0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 24
 3342              		@ frame_needed = 1, uses_anonymous_args = 0
 3343 0000 80B5     		push	{r7, lr}
 3344              		.cfi_def_cfa_offset 8
 3345              		.cfi_offset 7, -8
 3346              		.cfi_offset 14, -4
 3347 0002 86B0     		sub	sp, sp, #24
 3348              		.cfi_def_cfa_offset 32
 3349 0004 00AF     		add	r7, sp, #0
 3350              		.cfi_def_cfa_register 7
 3351 0006 7860     		str	r0, [r7, #4]
2997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
2999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 117


3000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	called from a critical section within an ISR. */
3002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the delayed list, and add it to the ready list.
3006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxEventList is not empty. */
3013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3352              		.loc 1 3013 0
 3353 0008 7B68     		ldr	r3, [r7, #4]
 3354 000a DB68     		ldr	r3, [r3, #12]
 3355 000c DB68     		ldr	r3, [r3, #12]
 3356 000e 3B61     		str	r3, [r7, #16]
3014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3357              		.loc 1 3014 0
 3358 0010 3B69     		ldr	r3, [r7, #16]
 3359 0012 002B     		cmp	r3, #0
 3360 0014 09D1     		bne	.L240
 3361              	.LBB154:
 3362              	.LBB155:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3363              		.loc 2 156 0 discriminator 1
 3364              		.syntax unified
 3365              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3366 0016 4FF03F03 			mov r3, #63												
 3367 001a 83F31188 		msr basepri, r3											
 3368 001e BFF36F8F 		isb														
 3369 0022 BFF34F8F 		dsb														
 3370              	
 3371              	@ 0 "" 2
 3372              		.thumb
 3373              		.syntax unified
 3374 0026 FB60     		str	r3, [r7, #12]
 3375              	.L241:
 3376              	.LBE155:
 3377              	.LBE154:
 3378              		.loc 1 3014 0 discriminator 1
 3379 0028 FEE7     		b	.L241
 3380              	.L240:
3015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3381              		.loc 1 3015 0
 3382 002a 3B69     		ldr	r3, [r7, #16]
 3383 002c 1833     		adds	r3, r3, #24
 3384 002e 1846     		mov	r0, r3
 3385 0030 FFF7FEFF 		bl	uxListRemove
3016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3386              		.loc 1 3017 0
 3387 0034 1D4B     		ldr	r3, .L248
 3388 0036 1B68     		ldr	r3, [r3]
 3389 0038 002B     		cmp	r3, #0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 118


 3390 003a 1DD1     		bne	.L242
3018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3391              		.loc 1 3019 0
 3392 003c 3B69     		ldr	r3, [r7, #16]
 3393 003e 0433     		adds	r3, r3, #4
 3394 0040 1846     		mov	r0, r3
 3395 0042 FFF7FEFF 		bl	uxListRemove
3020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3396              		.loc 1 3020 0
 3397 0046 3B69     		ldr	r3, [r7, #16]
 3398 0048 DA6A     		ldr	r2, [r3, #44]
 3399 004a 194B     		ldr	r3, .L248+4
 3400 004c 1B68     		ldr	r3, [r3]
 3401 004e 9A42     		cmp	r2, r3
 3402 0050 03D9     		bls	.L243
 3403              		.loc 1 3020 0 is_stmt 0 discriminator 1
 3404 0052 3B69     		ldr	r3, [r7, #16]
 3405 0054 DB6A     		ldr	r3, [r3, #44]
 3406 0056 164A     		ldr	r2, .L248+4
 3407 0058 1360     		str	r3, [r2]
 3408              	.L243:
 3409              		.loc 1 3020 0 discriminator 3
 3410 005a 3B69     		ldr	r3, [r7, #16]
 3411 005c DA6A     		ldr	r2, [r3, #44]
 3412 005e 1346     		mov	r3, r2
 3413 0060 9B00     		lsls	r3, r3, #2
 3414 0062 1344     		add	r3, r3, r2
 3415 0064 9B00     		lsls	r3, r3, #2
 3416 0066 134A     		ldr	r2, .L248+8
 3417 0068 1A44     		add	r2, r2, r3
 3418 006a 3B69     		ldr	r3, [r7, #16]
 3419 006c 0433     		adds	r3, r3, #4
 3420 006e 1946     		mov	r1, r3
 3421 0070 1046     		mov	r0, r2
 3422 0072 FFF7FEFF 		bl	vListInsertEnd
 3423 0076 05E0     		b	.L244
 3424              	.L242:
3021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pending until the scheduler is resumed. */
3026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3425              		.loc 1 3026 0 is_stmt 1
 3426 0078 3B69     		ldr	r3, [r7, #16]
 3427 007a 1833     		adds	r3, r3, #24
 3428 007c 1946     		mov	r1, r3
 3429 007e 0E48     		ldr	r0, .L248+12
 3430 0080 FFF7FEFF 		bl	vListInsertEnd
 3431              	.L244:
3027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3432              		.loc 1 3029 0
 3433 0084 3B69     		ldr	r3, [r7, #16]
 3434 0086 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 119


 3435 0088 0C4B     		ldr	r3, .L248+16
 3436 008a 1B68     		ldr	r3, [r3]
 3437 008c DB6A     		ldr	r3, [r3, #44]
 3438 008e 9A42     		cmp	r2, r3
 3439 0090 05D9     		bls	.L245
3030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		it should force a context switch now. */
3034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pdTRUE;
 3440              		.loc 1 3034 0
 3441 0092 0123     		movs	r3, #1
 3442 0094 7B61     		str	r3, [r7, #20]
3035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3443              		.loc 1 3038 0
 3444 0096 0A4B     		ldr	r3, .L248+20
 3445 0098 0122     		movs	r2, #1
 3446 009a 1A60     		str	r2, [r3]
 3447 009c 01E0     		b	.L246
 3448              	.L245:
3039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pdFALSE;
 3449              		.loc 1 3042 0
 3450 009e 0023     		movs	r3, #0
 3451 00a0 7B61     		str	r3, [r7, #20]
 3452              	.L246:
3043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
3058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
 3453              		.loc 1 3059 0
 3454 00a2 7B69     		ldr	r3, [r7, #20]
3060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3455              		.loc 1 3060 0
 3456 00a4 1846     		mov	r0, r3
 3457 00a6 1837     		adds	r7, r7, #24
 3458              		.cfi_def_cfa_offset 8
 3459 00a8 BD46     		mov	sp, r7
 3460              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 120


 3461              		@ sp needed
 3462 00aa 80BD     		pop	{r7, pc}
 3463              	.L249:
 3464              		.align	2
 3465              	.L248:
 3466 00ac 28010000 		.word	uxSchedulerSuspended
 3467 00b0 08010000 		.word	uxTopReadyPriority
 3468 00b4 04000000 		.word	pxReadyTasksLists
 3469 00b8 C0000000 		.word	xPendingReadyList
 3470 00bc 00000000 		.word	pxCurrentTCB
 3471 00c0 14010000 		.word	xYieldPending
 3472              		.cfi_endproc
 3473              	.LFE162:
 3474              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3475              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3476              		.align	2
 3477              		.global	vTaskRemoveFromUnorderedEventList
 3478              		.thumb
 3479              		.thumb_func
 3480              		.type	vTaskRemoveFromUnorderedEventList, %function
 3481              	vTaskRemoveFromUnorderedEventList:
 3482              	.LFB163:
3061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3483              		.loc 1 3064 0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 24
 3486              		@ frame_needed = 1, uses_anonymous_args = 0
 3487 0000 80B5     		push	{r7, lr}
 3488              		.cfi_def_cfa_offset 8
 3489              		.cfi_offset 7, -8
 3490              		.cfi_offset 14, -4
 3491 0002 86B0     		sub	sp, sp, #24
 3492              		.cfi_def_cfa_offset 32
 3493 0004 00AF     		add	r7, sp, #0
 3494              		.cfi_def_cfa_register 7
 3495 0006 7860     		str	r0, [r7, #4]
 3496 0008 3960     		str	r1, [r7]
3065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxUnblockedTCB;
3066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the event flags implementation. */
3069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3497              		.loc 1 3069 0
 3498 000a 284B     		ldr	r3, .L258
 3499 000c 1B68     		ldr	r3, [r3]
 3500 000e 002B     		cmp	r3, #0
 3501 0010 09D1     		bne	.L251
 3502              	.LBB156:
 3503              	.LBB157:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3504              		.loc 2 156 0 discriminator 1
 3505              		.syntax unified
 3506              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3507 0012 4FF03F03 			mov r3, #63												
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 121


 3508 0016 83F31188 		msr basepri, r3											
 3509 001a BFF36F8F 		isb														
 3510 001e BFF34F8F 		dsb														
 3511              	
 3512              	@ 0 "" 2
 3513              		.thumb
 3514              		.syntax unified
 3515 0022 FB60     		str	r3, [r7, #12]
 3516              	.L252:
 3517              	.LBE157:
 3518              	.LBE156:
 3519              		.loc 1 3069 0 discriminator 1
 3520 0024 FEE7     		b	.L252
 3521              	.L251:
3070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Store the new item value in the event list. */
3072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3522              		.loc 1 3072 0
 3523 0026 3B68     		ldr	r3, [r7]
 3524 0028 43F00042 		orr	r2, r3, #-2147483648
 3525 002c 7B68     		ldr	r3, [r7, #4]
 3526 002e 1A60     		str	r2, [r3]
3073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	event flags. */
3076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3527              		.loc 1 3076 0
 3528 0030 7B68     		ldr	r3, [r7, #4]
 3529 0032 DB68     		ldr	r3, [r3, #12]
 3530 0034 7B61     		str	r3, [r7, #20]
3077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3531              		.loc 1 3077 0
 3532 0036 7B69     		ldr	r3, [r7, #20]
 3533 0038 002B     		cmp	r3, #0
 3534 003a 09D1     		bne	.L253
 3535              	.LBB158:
 3536              	.LBB159:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3537              		.loc 2 156 0 discriminator 1
 3538              		.syntax unified
 3539              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3540 003c 4FF03F03 			mov r3, #63												
 3541 0040 83F31188 		msr basepri, r3											
 3542 0044 BFF36F8F 		isb														
 3543 0048 BFF34F8F 		dsb														
 3544              	
 3545              	@ 0 "" 2
 3546              		.thumb
 3547              		.syntax unified
 3548 004c 3B61     		str	r3, [r7, #16]
 3549              	.L254:
 3550              	.LBE159:
 3551              	.LBE158:
 3552              		.loc 1 3077 0 discriminator 2
 3553 004e FEE7     		b	.L254
 3554              	.L253:
3078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 122


 3555              		.loc 1 3078 0
 3556 0050 7868     		ldr	r0, [r7, #4]
 3557 0052 FFF7FEFF 		bl	uxListRemove
3079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	lists. */
3083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3558              		.loc 1 3083 0
 3559 0056 7B69     		ldr	r3, [r7, #20]
 3560 0058 0433     		adds	r3, r3, #4
 3561 005a 1846     		mov	r0, r3
 3562 005c FFF7FEFF 		bl	uxListRemove
3084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3563              		.loc 1 3084 0
 3564 0060 7B69     		ldr	r3, [r7, #20]
 3565 0062 DA6A     		ldr	r2, [r3, #44]
 3566 0064 124B     		ldr	r3, .L258+4
 3567 0066 1B68     		ldr	r3, [r3]
 3568 0068 9A42     		cmp	r2, r3
 3569 006a 03D9     		bls	.L255
 3570              		.loc 1 3084 0 is_stmt 0 discriminator 1
 3571 006c 7B69     		ldr	r3, [r7, #20]
 3572 006e DB6A     		ldr	r3, [r3, #44]
 3573 0070 0F4A     		ldr	r2, .L258+4
 3574 0072 1360     		str	r3, [r2]
 3575              	.L255:
 3576              		.loc 1 3084 0 discriminator 3
 3577 0074 7B69     		ldr	r3, [r7, #20]
 3578 0076 DA6A     		ldr	r2, [r3, #44]
 3579 0078 1346     		mov	r3, r2
 3580 007a 9B00     		lsls	r3, r3, #2
 3581 007c 1344     		add	r3, r3, r2
 3582 007e 9B00     		lsls	r3, r3, #2
 3583 0080 0C4A     		ldr	r2, .L258+8
 3584 0082 1A44     		add	r2, r2, r3
 3585 0084 7B69     		ldr	r3, [r7, #20]
 3586 0086 0433     		adds	r3, r3, #4
 3587 0088 1946     		mov	r1, r3
 3588 008a 1046     		mov	r0, r2
 3589 008c FFF7FEFF 		bl	vListInsertEnd
3085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3590              		.loc 1 3086 0 is_stmt 1 discriminator 3
 3591 0090 7B69     		ldr	r3, [r7, #20]
 3592 0092 DA6A     		ldr	r2, [r3, #44]
 3593 0094 084B     		ldr	r3, .L258+12
 3594 0096 1B68     		ldr	r3, [r3]
 3595 0098 DB6A     		ldr	r3, [r3, #44]
 3596 009a 9A42     		cmp	r2, r3
 3597 009c 02D9     		bls	.L257
3087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		a context switch is required.  This function is called with the
3090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 123


 3598              		.loc 1 3092 0
 3599 009e 074B     		ldr	r3, .L258+16
 3600 00a0 0122     		movs	r2, #1
 3601 00a2 1A60     		str	r2, [r3]
 3602              	.L257:
3093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3603              		.loc 1 3094 0
 3604 00a4 00BF     		nop
 3605 00a6 1837     		adds	r7, r7, #24
 3606              		.cfi_def_cfa_offset 8
 3607 00a8 BD46     		mov	sp, r7
 3608              		.cfi_def_cfa_register 13
 3609              		@ sp needed
 3610 00aa 80BD     		pop	{r7, pc}
 3611              	.L259:
 3612              		.align	2
 3613              	.L258:
 3614 00ac 28010000 		.word	uxSchedulerSuspended
 3615 00b0 08010000 		.word	uxTopReadyPriority
 3616 00b4 04000000 		.word	pxReadyTasksLists
 3617 00b8 00000000 		.word	pxCurrentTCB
 3618 00bc 14010000 		.word	xYieldPending
 3619              		.cfi_endproc
 3620              	.LFE163:
 3621              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3622              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3623              		.align	2
 3624              		.global	vTaskSetTimeOutState
 3625              		.thumb
 3626              		.thumb_func
 3627              		.type	vTaskSetTimeOutState, %function
 3628              	vTaskSetTimeOutState:
 3629              	.LFB164:
3095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3630              		.loc 1 3098 0
 3631              		.cfi_startproc
 3632              		@ args = 0, pretend = 0, frame = 16
 3633              		@ frame_needed = 1, uses_anonymous_args = 0
 3634 0000 80B5     		push	{r7, lr}
 3635              		.cfi_def_cfa_offset 8
 3636              		.cfi_offset 7, -8
 3637              		.cfi_offset 14, -4
 3638 0002 84B0     		sub	sp, sp, #16
 3639              		.cfi_def_cfa_offset 24
 3640 0004 00AF     		add	r7, sp, #0
 3641              		.cfi_def_cfa_register 7
 3642 0006 7860     		str	r0, [r7, #4]
3099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTimeOut );
 3643              		.loc 1 3099 0
 3644 0008 7B68     		ldr	r3, [r7, #4]
 3645 000a 002B     		cmp	r3, #0
 3646 000c 09D1     		bne	.L261
 3647              	.LBB160:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 124


 3648              	.LBB161:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3649              		.loc 2 156 0 discriminator 1
 3650              		.syntax unified
 3651              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3652 000e 4FF03F03 			mov r3, #63												
 3653 0012 83F31188 		msr basepri, r3											
 3654 0016 BFF36F8F 		isb														
 3655 001a BFF34F8F 		dsb														
 3656              	
 3657              	@ 0 "" 2
 3658              		.thumb
 3659              		.syntax unified
 3660 001e FB60     		str	r3, [r7, #12]
 3661              	.L262:
 3662              	.LBE161:
 3663              	.LBE160:
 3664              		.loc 1 3099 0 discriminator 1
 3665 0020 FEE7     		b	.L262
 3666              	.L261:
3100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 3667              		.loc 1 3100 0
 3668 0022 FFF7FEFF 		bl	vPortEnterCritical
3101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3669              		.loc 1 3102 0
 3670 0026 074B     		ldr	r3, .L263
 3671 0028 1A68     		ldr	r2, [r3]
 3672 002a 7B68     		ldr	r3, [r7, #4]
 3673 002c 1A60     		str	r2, [r3]
3103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3674              		.loc 1 3103 0
 3675 002e 064B     		ldr	r3, .L263+4
 3676 0030 1A68     		ldr	r2, [r3]
 3677 0032 7B68     		ldr	r3, [r7, #4]
 3678 0034 5A60     		str	r2, [r3, #4]
3104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
 3679              		.loc 1 3105 0
 3680 0036 FFF7FEFF 		bl	vPortExitCritical
3106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3681              		.loc 1 3106 0
 3682 003a 00BF     		nop
 3683 003c 1037     		adds	r7, r7, #16
 3684              		.cfi_def_cfa_offset 8
 3685 003e BD46     		mov	sp, r7
 3686              		.cfi_def_cfa_register 13
 3687              		@ sp needed
 3688 0040 80BD     		pop	{r7, pc}
 3689              	.L264:
 3690 0042 00BF     		.align	2
 3691              	.L263:
 3692 0044 18010000 		.word	xNumOfOverflows
 3693 0048 04010000 		.word	xTickCount
 3694              		.cfi_endproc
 3695              	.LFE164:
 3696              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 125


 3697              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3698              		.align	2
 3699              		.global	vTaskInternalSetTimeOutState
 3700              		.thumb
 3701              		.thumb_func
 3702              		.type	vTaskInternalSetTimeOutState, %function
 3703              	vTaskInternalSetTimeOutState:
 3704              	.LFB165:
3107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3705              		.loc 1 3110 0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 8
 3708              		@ frame_needed = 1, uses_anonymous_args = 0
 3709              		@ link register save eliminated.
 3710 0000 80B4     		push	{r7}
 3711              		.cfi_def_cfa_offset 4
 3712              		.cfi_offset 7, -4
 3713 0002 83B0     		sub	sp, sp, #12
 3714              		.cfi_def_cfa_offset 16
 3715 0004 00AF     		add	r7, sp, #0
 3716              		.cfi_def_cfa_register 7
 3717 0006 7860     		str	r0, [r7, #4]
3111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3718              		.loc 1 3112 0
 3719 0008 064B     		ldr	r3, .L266
 3720 000a 1A68     		ldr	r2, [r3]
 3721 000c 7B68     		ldr	r3, [r7, #4]
 3722 000e 1A60     		str	r2, [r3]
3113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3723              		.loc 1 3113 0
 3724 0010 054B     		ldr	r3, .L266+4
 3725 0012 1A68     		ldr	r2, [r3]
 3726 0014 7B68     		ldr	r3, [r7, #4]
 3727 0016 5A60     		str	r2, [r3, #4]
3114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3728              		.loc 1 3114 0
 3729 0018 00BF     		nop
 3730 001a 0C37     		adds	r7, r7, #12
 3731              		.cfi_def_cfa_offset 4
 3732 001c BD46     		mov	sp, r7
 3733              		.cfi_def_cfa_register 13
 3734              		@ sp needed
 3735 001e 5DF8047B 		ldr	r7, [sp], #4
 3736              		.cfi_restore 7
 3737              		.cfi_def_cfa_offset 0
 3738 0022 7047     		bx	lr
 3739              	.L267:
 3740              		.align	2
 3741              	.L266:
 3742 0024 18010000 		.word	xNumOfOverflows
 3743 0028 04010000 		.word	xTickCount
 3744              		.cfi_endproc
 3745              	.LFE165:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 126


 3746              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3747              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3748              		.align	2
 3749              		.global	xTaskCheckForTimeOut
 3750              		.thumb
 3751              		.thumb_func
 3752              		.type	xTaskCheckForTimeOut, %function
 3753              	xTaskCheckForTimeOut:
 3754              	.LFB166:
3115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3755              		.loc 1 3118 0
 3756              		.cfi_startproc
 3757              		@ args = 0, pretend = 0, frame = 32
 3758              		@ frame_needed = 1, uses_anonymous_args = 0
 3759 0000 80B5     		push	{r7, lr}
 3760              		.cfi_def_cfa_offset 8
 3761              		.cfi_offset 7, -8
 3762              		.cfi_offset 14, -4
 3763 0002 88B0     		sub	sp, sp, #32
 3764              		.cfi_def_cfa_offset 40
 3765 0004 00AF     		add	r7, sp, #0
 3766              		.cfi_def_cfa_register 7
 3767 0006 7860     		str	r0, [r7, #4]
 3768 0008 3960     		str	r1, [r7]
3119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** BaseType_t xReturn;
3120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTimeOut );
 3769              		.loc 1 3121 0
 3770 000a 7B68     		ldr	r3, [r7, #4]
 3771 000c 002B     		cmp	r3, #0
 3772 000e 09D1     		bne	.L269
 3773              	.LBB162:
 3774              	.LBB163:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3775              		.loc 2 156 0 discriminator 1
 3776              		.syntax unified
 3777              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3778 0010 4FF03F03 			mov r3, #63												
 3779 0014 83F31188 		msr basepri, r3											
 3780 0018 BFF36F8F 		isb														
 3781 001c BFF34F8F 		dsb														
 3782              	
 3783              	@ 0 "" 2
 3784              		.thumb
 3785              		.syntax unified
 3786 0020 FB60     		str	r3, [r7, #12]
 3787              	.L270:
 3788              	.LBE163:
 3789              	.LBE162:
 3790              		.loc 1 3121 0 discriminator 1
 3791 0022 FEE7     		b	.L270
 3792              	.L269:
3122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3793              		.loc 1 3122 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 127


 3794 0024 3B68     		ldr	r3, [r7]
 3795 0026 002B     		cmp	r3, #0
 3796 0028 09D1     		bne	.L271
 3797              	.LBB164:
 3798              	.LBB165:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 3799              		.loc 2 156 0 discriminator 1
 3800              		.syntax unified
 3801              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 3802 002a 4FF03F03 			mov r3, #63												
 3803 002e 83F31188 		msr basepri, r3											
 3804 0032 BFF36F8F 		isb														
 3805 0036 BFF34F8F 		dsb														
 3806              	
 3807              	@ 0 "" 2
 3808              		.thumb
 3809              		.syntax unified
 3810 003a 3B61     		str	r3, [r7, #16]
 3811              	.L272:
 3812              	.LBE165:
 3813              	.LBE164:
 3814              		.loc 1 3122 0 discriminator 2
 3815 003c FEE7     		b	.L272
 3816              	.L271:
3123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskENTER_CRITICAL();
 3817              		.loc 1 3124 0
 3818 003e FFF7FEFF 		bl	vPortEnterCritical
 3819              	.LBB166:
3125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3820              		.loc 1 3127 0
 3821 0042 1D4B     		ldr	r3, .L278
 3822 0044 1B68     		ldr	r3, [r3]
 3823 0046 BB61     		str	r3, [r7, #24]
3128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3824              		.loc 1 3128 0
 3825 0048 7B68     		ldr	r3, [r7, #4]
 3826 004a 5B68     		ldr	r3, [r3, #4]
 3827 004c BA69     		ldr	r2, [r7, #24]
 3828 004e D31A     		subs	r3, r2, r3
 3829 0050 7B61     		str	r3, [r7, #20]
3129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				but has the same result. */
3135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
3137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 128


 3830              		.loc 1 3142 0
 3831 0052 3B68     		ldr	r3, [r7]
 3832 0054 1B68     		ldr	r3, [r3]
 3833 0056 B3F1FF3F 		cmp	r3, #-1
 3834 005a 02D1     		bne	.L273
3143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				specified is the maximum block time then the task should block
3146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFALSE;
 3835              		.loc 1 3147 0
 3836 005c 0023     		movs	r3, #0
 3837 005e FB61     		str	r3, [r7, #28]
 3838 0060 23E0     		b	.L274
 3839              	.L273:
3148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3840              		.loc 1 3152 0
 3841 0062 7B68     		ldr	r3, [r7, #4]
 3842 0064 1A68     		ldr	r2, [r3]
 3843 0066 154B     		ldr	r3, .L278+4
 3844 0068 1B68     		ldr	r3, [r3]
 3845 006a 9A42     		cmp	r2, r3
 3846 006c 07D0     		beq	.L275
 3847              		.loc 1 3152 0 is_stmt 0 discriminator 1
 3848 006e 7B68     		ldr	r3, [r7, #4]
 3849 0070 5A68     		ldr	r2, [r3, #4]
 3850 0072 BB69     		ldr	r3, [r7, #24]
 3851 0074 9A42     		cmp	r2, r3
 3852 0076 02D8     		bhi	.L275
3153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The tick count is greater than the time at which
3155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			was called. */
3159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdTRUE;
 3853              		.loc 1 3159 0 is_stmt 1
 3854 0078 0123     		movs	r3, #1
 3855 007a FB61     		str	r3, [r7, #28]
 3856 007c 15E0     		b	.L274
 3857              	.L275:
3160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 3858              		.loc 1 3161 0
 3859 007e 3B68     		ldr	r3, [r7]
 3860 0080 1A68     		ldr	r2, [r3]
 3861 0082 7B69     		ldr	r3, [r7, #20]
 3862 0084 9A42     		cmp	r2, r3
 3863 0086 0BD9     		bls	.L276
3162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 3864              		.loc 1 3164 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 129


 3865 0088 3B68     		ldr	r3, [r7]
 3866 008a 1A68     		ldr	r2, [r3]
 3867 008c 7B69     		ldr	r3, [r7, #20]
 3868 008e D21A     		subs	r2, r2, r3
 3869 0090 3B68     		ldr	r3, [r7]
 3870 0092 1A60     		str	r2, [r3]
3165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3871              		.loc 1 3165 0
 3872 0094 7868     		ldr	r0, [r7, #4]
 3873 0096 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdFALSE;
 3874              		.loc 1 3166 0
 3875 009a 0023     		movs	r3, #0
 3876 009c FB61     		str	r3, [r7, #28]
 3877 009e 04E0     		b	.L274
 3878              	.L276:
3167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			*pxTicksToWait = 0;
 3879              		.loc 1 3170 0
 3880 00a0 3B68     		ldr	r3, [r7]
 3881 00a2 0022     		movs	r2, #0
 3882 00a4 1A60     		str	r2, [r3]
3171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = pdTRUE;
 3883              		.loc 1 3171 0
 3884 00a6 0123     		movs	r3, #1
 3885 00a8 FB61     		str	r3, [r7, #28]
 3886              	.L274:
 3887              	.LBE166:
3172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	taskEXIT_CRITICAL();
 3888              		.loc 1 3174 0
 3889 00aa FFF7FEFF 		bl	vPortExitCritical
3175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return xReturn;
 3890              		.loc 1 3176 0
 3891 00ae FB69     		ldr	r3, [r7, #28]
3177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3892              		.loc 1 3177 0
 3893 00b0 1846     		mov	r0, r3
 3894 00b2 2037     		adds	r7, r7, #32
 3895              		.cfi_def_cfa_offset 8
 3896 00b4 BD46     		mov	sp, r7
 3897              		.cfi_def_cfa_register 13
 3898              		@ sp needed
 3899 00b6 80BD     		pop	{r7, pc}
 3900              	.L279:
 3901              		.align	2
 3902              	.L278:
 3903 00b8 04010000 		.word	xTickCount
 3904 00bc 18010000 		.word	xNumOfOverflows
 3905              		.cfi_endproc
 3906              	.LFE166:
 3907              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3908              		.section	.text.vTaskMissedYield,"ax",%progbits
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 130


 3909              		.align	2
 3910              		.global	vTaskMissedYield
 3911              		.thumb
 3912              		.thumb_func
 3913              		.type	vTaskMissedYield, %function
 3914              	vTaskMissedYield:
 3915              	.LFB167:
3178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** void vTaskMissedYield( void )
3181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3916              		.loc 1 3181 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 0
 3919              		@ frame_needed = 1, uses_anonymous_args = 0
 3920              		@ link register save eliminated.
 3921 0000 80B4     		push	{r7}
 3922              		.cfi_def_cfa_offset 4
 3923              		.cfi_offset 7, -4
 3924 0002 00AF     		add	r7, sp, #0
 3925              		.cfi_def_cfa_register 7
3182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	xYieldPending = pdTRUE;
 3926              		.loc 1 3182 0
 3927 0004 034B     		ldr	r3, .L281
 3928 0006 0122     		movs	r2, #1
 3929 0008 1A60     		str	r2, [r3]
3183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 3930              		.loc 1 3183 0
 3931 000a 00BF     		nop
 3932 000c BD46     		mov	sp, r7
 3933              		.cfi_def_cfa_register 13
 3934              		@ sp needed
 3935 000e 5DF8047B 		ldr	r7, [sp], #4
 3936              		.cfi_restore 7
 3937              		.cfi_def_cfa_offset 0
 3938 0012 7047     		bx	lr
 3939              	.L282:
 3940              		.align	2
 3941              	.L281:
 3942 0014 14010000 		.word	xYieldPending
 3943              		.cfi_endproc
 3944              	.LFE167:
 3945              		.size	vTaskMissedYield, .-vTaskMissedYield
 3946              		.section	.text.prvIdleTask,"ax",%progbits
 3947              		.align	2
 3948              		.thumb
 3949              		.thumb_func
 3950              		.type	prvIdleTask, %function
 3951              	prvIdleTask:
 3952              	.LFB168:
3184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 131


3191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask != NULL )
3194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxReturn = 0U;
3201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
3204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTask != NULL )
3216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*
3225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * -----------------------------------------------------------
3226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The Idle task.
3227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * ----------------------------------------------------------
3228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
3229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
3232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  *
3234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c ****  */
3235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 3953              		.loc 1 3236 0
 3954              		.cfi_startproc
 3955              		@ args = 0, pretend = 0, frame = 8
 3956              		@ frame_needed = 1, uses_anonymous_args = 0
 3957 0000 80B5     		push	{r7, lr}
 3958              		.cfi_def_cfa_offset 8
 3959              		.cfi_offset 7, -8
 3960              		.cfi_offset 14, -4
 3961 0002 82B0     		sub	sp, sp, #8
 3962              		.cfi_def_cfa_offset 16
 3963 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 132


 3964              		.cfi_def_cfa_register 7
 3965 0006 7860     		str	r0, [r7, #4]
 3966              	.L285:
3237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Stop warnings. */
3238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	( void ) pvParameters;
3239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	any. */
3246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	for( ;; )
3249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3967              		.loc 1 3252 0
 3968 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			see if any other task has become available.  If we are using
3258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			will automatically get the processor anyway. */
3260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskYIELD();
3261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			timeslice.
3270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 3969              		.loc 1 3275 0
 3970 000c 064B     		ldr	r3, .L286
 3971 000e 1B68     		ldr	r3, [r3]
 3972 0010 012B     		cmp	r3, #1
 3973 0012 F9D9     		bls	.L285
3276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				taskYIELD();
 3974              		.loc 1 3277 0
 3975 0014 054B     		ldr	r3, .L286+4
 3976 0016 4FF08052 		mov	r2, #268435456
 3977 001a 1A60     		str	r2, [r3]
 3978              		.syntax unified
 3979              	@ 3277 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 133


 3980 001c BFF34F8F 		dsb
 3981              	@ 0 "" 2
 3982              	@ 3277 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 3983 0020 BFF36F8F 		isb
 3984              	@ 0 "" 2
3278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			allows the application designer to add background functionality
3292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			without the overhead of a separate task.
3293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vApplicationIdleHook();
3296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		user defined low power mode	implementations require
3302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			test of the expected idle time is performed without the
3310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			valid. */
3312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskSuspendAll();
3317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					time can be sampled again, and this time its value can
3320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					be used. */
3321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if the application does not want
3326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 134


3330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) xTaskResumeAll();
3341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 3985              		.loc 1 3348 0
 3986              		.thumb
 3987              		.syntax unified
 3988 0024 F0E7     		b	.L285
 3989              	.L287:
 3990 0026 00BF     		.align	2
 3991              	.L286:
 3992 0028 04000000 		.word	pxReadyTasksLists
 3993 002c 04ED00E0 		.word	-536810236
 3994              		.cfi_endproc
 3995              	.LFE168:
 3996              		.size	prvIdleTask, .-prvIdleTask
 3997              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3998              		.align	2
 3999              		.global	vTaskSetThreadLocalStoragePointer
 4000              		.thumb
 4001              		.thumb_func
 4002              		.type	vTaskSetThreadLocalStoragePointer, %function
 4003              	vTaskSetThreadLocalStoragePointer:
 4004              	.LFB169:
3349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
3350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eAbortSleep;
3364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 135


3367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			eReturn = eAbortSleep;
3369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupts. */
3376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return eReturn;
3387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4005              		.loc 1 3395 0
 4006              		.cfi_startproc
 4007              		@ args = 0, pretend = 0, frame = 24
 4008              		@ frame_needed = 1, uses_anonymous_args = 0
 4009              		@ link register save eliminated.
 4010 0000 80B4     		push	{r7}
 4011              		.cfi_def_cfa_offset 4
 4012              		.cfi_offset 7, -4
 4013 0002 87B0     		sub	sp, sp, #28
 4014              		.cfi_def_cfa_offset 32
 4015 0004 00AF     		add	r7, sp, #0
 4016              		.cfi_def_cfa_register 7
 4017 0006 F860     		str	r0, [r7, #12]
 4018 0008 B960     		str	r1, [r7, #8]
 4019 000a 7A60     		str	r2, [r7, #4]
3396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4020              		.loc 1 3398 0
 4021 000c BB68     		ldr	r3, [r7, #8]
 4022 000e 042B     		cmp	r3, #4
 4023 0010 0EDC     		bgt	.L292
3399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 4024              		.loc 1 3400 0
 4025 0012 FB68     		ldr	r3, [r7, #12]
 4026 0014 002B     		cmp	r3, #0
 4027 0016 02D1     		bne	.L290
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 136


 4028              		.loc 1 3400 0 is_stmt 0 discriminator 1
 4029 0018 084B     		ldr	r3, .L293
 4030 001a 1B68     		ldr	r3, [r3]
 4031 001c 00E0     		b	.L291
 4032              	.L290:
 4033              		.loc 1 3400 0 discriminator 2
 4034 001e FB68     		ldr	r3, [r7, #12]
 4035              	.L291:
 4036              		.loc 1 3400 0 discriminator 4
 4037 0020 7B61     		str	r3, [r7, #20]
3401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 4038              		.loc 1 3401 0 is_stmt 1 discriminator 4
 4039 0022 7A69     		ldr	r2, [r7, #20]
 4040 0024 BB68     		ldr	r3, [r7, #8]
 4041 0026 1033     		adds	r3, r3, #16
 4042 0028 9B00     		lsls	r3, r3, #2
 4043 002a 1344     		add	r3, r3, r2
 4044 002c 7A68     		ldr	r2, [r7, #4]
 4045 002e 5A60     		str	r2, [r3, #4]
 4046              	.L292:
3402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4047              		.loc 1 3403 0
 4048 0030 00BF     		nop
 4049 0032 1C37     		adds	r7, r7, #28
 4050              		.cfi_def_cfa_offset 4
 4051 0034 BD46     		mov	sp, r7
 4052              		.cfi_def_cfa_register 13
 4053              		@ sp needed
 4054 0036 5DF8047B 		ldr	r7, [sp], #4
 4055              		.cfi_restore 7
 4056              		.cfi_def_cfa_offset 0
 4057 003a 7047     		bx	lr
 4058              	.L294:
 4059              		.align	2
 4060              	.L293:
 4061 003c 00000000 		.word	pxCurrentTCB
 4062              		.cfi_endproc
 4063              	.LFE169:
 4064              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 4065              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 4066              		.align	2
 4067              		.global	pvTaskGetThreadLocalStoragePointer
 4068              		.thumb
 4069              		.thumb_func
 4070              		.type	pvTaskGetThreadLocalStoragePointer, %function
 4071              	pvTaskGetThreadLocalStoragePointer:
 4072              	.LFB170:
3404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4073              		.loc 1 3411 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 137


 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 16
 4076              		@ frame_needed = 1, uses_anonymous_args = 0
 4077              		@ link register save eliminated.
 4078 0000 80B4     		push	{r7}
 4079              		.cfi_def_cfa_offset 4
 4080              		.cfi_offset 7, -4
 4081 0002 85B0     		sub	sp, sp, #20
 4082              		.cfi_def_cfa_offset 24
 4083 0004 00AF     		add	r7, sp, #0
 4084              		.cfi_def_cfa_register 7
 4085 0006 7860     		str	r0, [r7, #4]
 4086 0008 3960     		str	r1, [r7]
3412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvReturn = NULL;
 4087              		.loc 1 3412 0
 4088 000a 0023     		movs	r3, #0
 4089 000c FB60     		str	r3, [r7, #12]
3413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 4090              		.loc 1 3415 0
 4091 000e 3B68     		ldr	r3, [r7]
 4092 0010 042B     		cmp	r3, #4
 4093 0012 0FDC     		bgt	.L296
3416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 4094              		.loc 1 3417 0
 4095 0014 7B68     		ldr	r3, [r7, #4]
 4096 0016 002B     		cmp	r3, #0
 4097 0018 02D1     		bne	.L297
 4098              		.loc 1 3417 0 is_stmt 0 discriminator 1
 4099 001a 0B4B     		ldr	r3, .L301
 4100 001c 1B68     		ldr	r3, [r3]
 4101 001e 00E0     		b	.L298
 4102              	.L297:
 4103              		.loc 1 3417 0 discriminator 2
 4104 0020 7B68     		ldr	r3, [r7, #4]
 4105              	.L298:
 4106              		.loc 1 3417 0 discriminator 4
 4107 0022 BB60     		str	r3, [r7, #8]
3418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 4108              		.loc 1 3418 0 is_stmt 1 discriminator 4
 4109 0024 BA68     		ldr	r2, [r7, #8]
 4110 0026 3B68     		ldr	r3, [r7]
 4111 0028 1033     		adds	r3, r3, #16
 4112 002a 9B00     		lsls	r3, r3, #2
 4113 002c 1344     		add	r3, r3, r2
 4114 002e 5B68     		ldr	r3, [r3, #4]
 4115 0030 FB60     		str	r3, [r7, #12]
 4116 0032 01E0     		b	.L299
 4117              	.L296:
3419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pvReturn = NULL;
 4118              		.loc 1 3422 0
 4119 0034 0023     		movs	r3, #0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 138


 4120 0036 FB60     		str	r3, [r7, #12]
 4121              	.L299:
3423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return pvReturn;
 4122              		.loc 1 3425 0
 4123 0038 FB68     		ldr	r3, [r7, #12]
3426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4124              		.loc 1 3426 0
 4125 003a 1846     		mov	r0, r3
 4126 003c 1437     		adds	r7, r7, #20
 4127              		.cfi_def_cfa_offset 4
 4128 003e BD46     		mov	sp, r7
 4129              		.cfi_def_cfa_register 13
 4130              		@ sp needed
 4131 0040 5DF8047B 		ldr	r7, [sp], #4
 4132              		.cfi_restore 7
 4133              		.cfi_def_cfa_offset 0
 4134 0044 7047     		bx	lr
 4135              	.L302:
 4136 0046 00BF     		.align	2
 4137              	.L301:
 4138 0048 00000000 		.word	pxCurrentTCB
 4139              		.cfi_endproc
 4140              	.LFE170:
 4141              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 4142              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4143              		.align	2
 4144              		.thumb
 4145              		.thumb_func
 4146              		.type	prvInitialiseTaskLists, %function
 4147              	prvInitialiseTaskLists:
 4148              	.LFB171:
3427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the calling task. */
3439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 4149              		.loc 1 3448 0
 4150              		.cfi_startproc
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 139


 4151              		@ args = 0, pretend = 0, frame = 8
 4152              		@ frame_needed = 1, uses_anonymous_args = 0
 4153 0000 80B5     		push	{r7, lr}
 4154              		.cfi_def_cfa_offset 8
 4155              		.cfi_offset 7, -8
 4156              		.cfi_offset 14, -4
 4157 0002 82B0     		sub	sp, sp, #8
 4158              		.cfi_def_cfa_offset 16
 4159 0004 00AF     		add	r7, sp, #0
 4160              		.cfi_def_cfa_register 7
3449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** UBaseType_t uxPriority;
3450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 4161              		.loc 1 3451 0
 4162 0006 0023     		movs	r3, #0
 4163 0008 7B60     		str	r3, [r7, #4]
 4164 000a 0CE0     		b	.L304
 4165              	.L305:
3452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4166              		.loc 1 3453 0 discriminator 3
 4167 000c 7A68     		ldr	r2, [r7, #4]
 4168 000e 1346     		mov	r3, r2
 4169 0010 9B00     		lsls	r3, r3, #2
 4170 0012 1344     		add	r3, r3, r2
 4171 0014 9B00     		lsls	r3, r3, #2
 4172 0016 124A     		ldr	r2, .L306
 4173 0018 1344     		add	r3, r3, r2
 4174 001a 1846     		mov	r0, r3
 4175 001c FFF7FEFF 		bl	vListInitialise
3451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4176              		.loc 1 3451 0 discriminator 3
 4177 0020 7B68     		ldr	r3, [r7, #4]
 4178 0022 0133     		adds	r3, r3, #1
 4179 0024 7B60     		str	r3, [r7, #4]
 4180              	.L304:
3451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4181              		.loc 1 3451 0 is_stmt 0 discriminator 1
 4182 0026 7B68     		ldr	r3, [r7, #4]
 4183 0028 062B     		cmp	r3, #6
 4184 002a EFD9     		bls	.L305
3454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4185              		.loc 1 3456 0 is_stmt 1
 4186 002c 0D48     		ldr	r0, .L306+4
 4187 002e FFF7FEFF 		bl	vListInitialise
3457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4188              		.loc 1 3457 0
 4189 0032 0D48     		ldr	r0, .L306+8
 4190 0034 FFF7FEFF 		bl	vListInitialise
3458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4191              		.loc 1 3458 0
 4192 0038 0C48     		ldr	r0, .L306+12
 4193 003a FFF7FEFF 		bl	vListInitialise
3459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 140


3461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4194              		.loc 1 3462 0
 4195 003e 0C48     		ldr	r0, .L306+16
 4196 0040 FFF7FEFF 		bl	vListInitialise
3463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4197              		.loc 1 3468 0
 4198 0044 0B48     		ldr	r0, .L306+20
 4199 0046 FFF7FEFF 		bl	vListInitialise
3469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	using list2. */
3474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4200              		.loc 1 3474 0
 4201 004a 0B4B     		ldr	r3, .L306+24
 4202 004c 054A     		ldr	r2, .L306+4
 4203 004e 1A60     		str	r2, [r3]
3475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4204              		.loc 1 3475 0
 4205 0050 0A4B     		ldr	r3, .L306+28
 4206 0052 054A     		ldr	r2, .L306+8
 4207 0054 1A60     		str	r2, [r3]
3476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 4208              		.loc 1 3476 0
 4209 0056 00BF     		nop
 4210 0058 0837     		adds	r7, r7, #8
 4211              		.cfi_def_cfa_offset 8
 4212 005a BD46     		mov	sp, r7
 4213              		.cfi_def_cfa_register 13
 4214              		@ sp needed
 4215 005c 80BD     		pop	{r7, pc}
 4216              	.L307:
 4217 005e 00BF     		.align	2
 4218              	.L306:
 4219 0060 04000000 		.word	pxReadyTasksLists
 4220 0064 90000000 		.word	xDelayedTaskList1
 4221 0068 A4000000 		.word	xDelayedTaskList2
 4222 006c C0000000 		.word	xPendingReadyList
 4223 0070 D4000000 		.word	xTasksWaitingTermination
 4224 0074 EC000000 		.word	xSuspendedTaskList
 4225 0078 B8000000 		.word	pxDelayedTaskList
 4226 007c BC000000 		.word	pxOverflowDelayedTaskList
 4227              		.cfi_endproc
 4228              	.LFE171:
 4229              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 4230              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4231              		.align	2
 4232              		.thumb
 4233              		.thumb_func
 4234              		.type	prvCheckTasksWaitingTermination, %function
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 141


 4235              	prvCheckTasksWaitingTermination:
 4236              	.LFB172:
3477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 4237              		.loc 1 3480 0
 4238              		.cfi_startproc
 4239              		@ args = 0, pretend = 0, frame = 8
 4240              		@ frame_needed = 1, uses_anonymous_args = 0
 4241 0000 80B5     		push	{r7, lr}
 4242              		.cfi_def_cfa_offset 8
 4243              		.cfi_offset 7, -8
 4244              		.cfi_offset 14, -4
 4245 0002 82B0     		sub	sp, sp, #8
 4246              		.cfi_def_cfa_offset 16
 4247 0004 00AF     		add	r7, sp, #0
 4248              		.cfi_def_cfa_register 7
 4249              	.LBB167:
3481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		TCB_t *pxTCB;
3487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		being called too often in the idle task. */
3490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 4250              		.loc 1 3490 0
 4251 0006 19E0     		b	.L309
 4252              	.L310:
3491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskENTER_CRITICAL();
 4253              		.loc 1 3492 0
 4254 0008 FFF7FEFF 		bl	vPortEnterCritical
3493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4255              		.loc 1 3494 0
 4256 000c 0F4B     		ldr	r3, .L311
 4257 000e DB68     		ldr	r3, [r3, #12]
 4258 0010 DB68     		ldr	r3, [r3, #12]
 4259 0012 7B60     		str	r3, [r7, #4]
3495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4260              		.loc 1 3495 0
 4261 0014 7B68     		ldr	r3, [r7, #4]
 4262 0016 0433     		adds	r3, r3, #4
 4263 0018 1846     		mov	r0, r3
 4264 001a FFF7FEFF 		bl	uxListRemove
3496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 4265              		.loc 1 3496 0
 4266 001e 0C4B     		ldr	r3, .L311+4
 4267 0020 1B68     		ldr	r3, [r3]
 4268 0022 013B     		subs	r3, r3, #1
 4269 0024 0A4A     		ldr	r2, .L311+4
 4270 0026 1360     		str	r3, [r2]
3497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 142


 4271              		.loc 1 3497 0
 4272 0028 0A4B     		ldr	r3, .L311+8
 4273 002a 1B68     		ldr	r3, [r3]
 4274 002c 013B     		subs	r3, r3, #1
 4275 002e 094A     		ldr	r2, .L311+8
 4276 0030 1360     		str	r3, [r2]
3498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			taskEXIT_CRITICAL();
 4277              		.loc 1 3499 0
 4278 0032 FFF7FEFF 		bl	vPortExitCritical
3500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 4279              		.loc 1 3501 0
 4280 0036 7868     		ldr	r0, [r7, #4]
 4281 0038 FFF7FEFF 		bl	prvDeleteTCB
 4282              	.L309:
3490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
 4283              		.loc 1 3490 0
 4284 003c 054B     		ldr	r3, .L311+8
 4285 003e 1B68     		ldr	r3, [r3]
 4286 0040 002B     		cmp	r3, #0
 4287 0042 E1D1     		bne	.L310
 4288              	.LBE167:
3502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 4289              		.loc 1 3505 0
 4290 0044 00BF     		nop
 4291 0046 0837     		adds	r7, r7, #8
 4292              		.cfi_def_cfa_offset 8
 4293 0048 BD46     		mov	sp, r7
 4294              		.cfi_def_cfa_register 13
 4295              		@ sp needed
 4296 004a 80BD     		pop	{r7, pc}
 4297              	.L312:
 4298              		.align	2
 4299              	.L311:
 4300 004c D4000000 		.word	xTasksWaitingTermination
 4301 0050 00010000 		.word	uxCurrentNumberOfTasks
 4302 0054 E8000000 		.word	uxDeletedTasksWaitingCleanUp
 4303              		.cfi_endproc
 4304              	.LFE172:
 4305              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 4306              		.section	.text.prvDeleteTCB,"ax",%progbits
 4307              		.align	2
 4308              		.thumb
 4309              		.thumb_func
 4310              		.type	prvDeleteTCB, %function
 4311              	prvDeleteTCB:
 4312              	.LFB173:
3506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 143


3512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		state is just set to whatever is passed in. */
3546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( eState != eInvalid )
3547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( eState == eSuspended )
3562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						vTaskSuspendAll();
3564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
3565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							{
3567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 144


3569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
3570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						( void ) xTaskResumeAll();
3571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#else
3590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#endif
3594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTask = 0;
3610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			do
3620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxTask++;
3624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 145


3626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxTask;
3632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulCount = 0U;
3642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ulCount++;
3647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return ( uint16_t ) ulCount;
3652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
3662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxReturn;
3664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#else
3672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
3676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return uxReturn;
3680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 146


3683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4313              		.loc 1 3688 0
 4314              		.cfi_startproc
 4315              		@ args = 0, pretend = 0, frame = 8
 4316              		@ frame_needed = 1, uses_anonymous_args = 0
 4317 0000 80B5     		push	{r7, lr}
 4318              		.cfi_def_cfa_offset 8
 4319              		.cfi_offset 7, -8
 4320              		.cfi_offset 14, -4
 4321 0002 82B0     		sub	sp, sp, #8
 4322              		.cfi_def_cfa_offset 16
 4323 0004 00AF     		add	r7, sp, #0
 4324              		.cfi_def_cfa_register 7
 4325 0006 7860     		str	r0, [r7, #4]
3689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the stack and TCB. */
3706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4326              		.loc 1 3706 0
 4327 0008 7B68     		ldr	r3, [r7, #4]
 4328 000a 1B6B     		ldr	r3, [r3, #48]
 4329 000c 1846     		mov	r0, r3
 4330 000e FFF7FEFF 		bl	vPortFree
3707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTCB );
 4331              		.loc 1 3707 0
 4332 0012 7868     		ldr	r0, [r7, #4]
 4333 0014 FFF7FEFF 		bl	vPortFree
3708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			check what was statically allocated before trying to free the
3713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			memory. */
3714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				must be freed. */
3718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 147


3719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB );
3720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				only memory that must be freed. */
3725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vPortFree( pxTCB );
3726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				nothing needs to be freed. */
3731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4334              		.loc 1 3736 0
 4335 0018 00BF     		nop
 4336 001a 0837     		adds	r7, r7, #8
 4337              		.cfi_def_cfa_offset 8
 4338 001c BD46     		mov	sp, r7
 4339              		.cfi_def_cfa_register 13
 4340              		@ sp needed
 4341 001e 80BD     		pop	{r7, pc}
 4342              		.cfi_endproc
 4343              	.LFE173:
 4344              		.size	prvDeleteTCB, .-prvDeleteTCB
 4345              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4346              		.align	2
 4347              		.thumb
 4348              		.thumb_func
 4349              		.type	prvResetNextTaskUnblockTime, %function
 4350              	prvResetNextTaskUnblockTime:
 4351              	.LFB174:
3737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 4352              		.loc 1 3742 0
 4353              		.cfi_startproc
 4354              		@ args = 0, pretend = 0, frame = 8
 4355              		@ frame_needed = 1, uses_anonymous_args = 0
 4356              		@ link register save eliminated.
 4357 0000 80B4     		push	{r7}
 4358              		.cfi_def_cfa_offset 4
 4359              		.cfi_offset 7, -4
 4360 0002 83B0     		sub	sp, sp, #12
 4361              		.cfi_def_cfa_offset 16
 4362 0004 00AF     		add	r7, sp, #0
 4363              		.cfi_def_cfa_register 7
3743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TCB_t *pxTCB;
3744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 148


 4364              		.loc 1 3745 0
 4365 0006 0F4B     		ldr	r3, .L320
 4366 0008 1B68     		ldr	r3, [r3]
 4367 000a 1B68     		ldr	r3, [r3]
 4368 000c 002B     		cmp	r3, #0
 4369 000e 01D1     		bne	.L315
 4370              		.loc 1 3745 0 is_stmt 0 discriminator 1
 4371 0010 0123     		movs	r3, #1
 4372 0012 00E0     		b	.L316
 4373              	.L315:
 4374              		.loc 1 3745 0 discriminator 2
 4375 0014 0023     		movs	r3, #0
 4376              	.L316:
 4377              		.loc 1 3745 0 discriminator 4
 4378 0016 002B     		cmp	r3, #0
 4379 0018 04D0     		beq	.L317
3746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		there is an item in the delayed list. */
3751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4380              		.loc 1 3751 0 is_stmt 1
 4381 001a 0B4B     		ldr	r3, .L320+4
 4382 001c 4FF0FF32 		mov	r2, #-1
 4383 0020 1A60     		str	r2, [r3]
3752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
3754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		from the Blocked state. */
3759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 4384              		.loc 1 3762 0
 4385 0022 08E0     		b	.L319
 4386              	.L317:
3759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4387              		.loc 1 3759 0
 4388 0024 074B     		ldr	r3, .L320
 4389 0026 1B68     		ldr	r3, [r3]
 4390 0028 DB68     		ldr	r3, [r3, #12]
 4391 002a DB68     		ldr	r3, [r3, #12]
 4392 002c 7B60     		str	r3, [r7, #4]
3760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4393              		.loc 1 3760 0
 4394 002e 7B68     		ldr	r3, [r7, #4]
 4395 0030 5B68     		ldr	r3, [r3, #4]
 4396 0032 054A     		ldr	r2, .L320+4
 4397 0034 1360     		str	r3, [r2]
 4398              	.L319:
 4399              		.loc 1 3762 0
 4400 0036 00BF     		nop
 4401 0038 0C37     		adds	r7, r7, #12
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 149


 4402              		.cfi_def_cfa_offset 4
 4403 003a BD46     		mov	sp, r7
 4404              		.cfi_def_cfa_register 13
 4405              		@ sp needed
 4406 003c 5DF8047B 		ldr	r7, [sp], #4
 4407              		.cfi_restore 7
 4408              		.cfi_def_cfa_offset 0
 4409 0040 7047     		bx	lr
 4410              	.L321:
 4411 0042 00BF     		.align	2
 4412              	.L320:
 4413 0044 B8000000 		.word	pxDelayedTaskList
 4414 0048 20010000 		.word	xNextTaskUnblockTime
 4415              		.cfi_endproc
 4416              	.LFE174:
 4417              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4418              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4419              		.align	2
 4420              		.global	xTaskGetCurrentTaskHandle
 4421              		.thumb
 4422              		.thumb_func
 4423              		.type	xTaskGetCurrentTaskHandle, %function
 4424              	xTaskGetCurrentTaskHandle:
 4425              	.LFB175:
3763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4426              		.loc 1 3768 0
 4427              		.cfi_startproc
 4428              		@ args = 0, pretend = 0, frame = 8
 4429              		@ frame_needed = 1, uses_anonymous_args = 0
 4430              		@ link register save eliminated.
 4431 0000 80B4     		push	{r7}
 4432              		.cfi_def_cfa_offset 4
 4433              		.cfi_offset 7, -4
 4434 0002 83B0     		sub	sp, sp, #12
 4435              		.cfi_def_cfa_offset 16
 4436 0004 00AF     		add	r7, sp, #0
 4437              		.cfi_def_cfa_register 7
3769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskHandle_t xReturn;
3770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* A critical section is not required as this is not called from
3772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		individual execution thread. */
3774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4438              		.loc 1 3774 0
 4439 0006 054B     		ldr	r3, .L324
 4440 0008 1B68     		ldr	r3, [r3]
 4441 000a 7B60     		str	r3, [r7, #4]
3775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 4442              		.loc 1 3776 0
 4443 000c 7B68     		ldr	r3, [r7, #4]
3777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 150


 4444              		.loc 1 3777 0
 4445 000e 1846     		mov	r0, r3
 4446 0010 0C37     		adds	r7, r7, #12
 4447              		.cfi_def_cfa_offset 4
 4448 0012 BD46     		mov	sp, r7
 4449              		.cfi_def_cfa_register 13
 4450              		@ sp needed
 4451 0014 5DF8047B 		ldr	r7, [sp], #4
 4452              		.cfi_restore 7
 4453              		.cfi_def_cfa_offset 0
 4454 0018 7047     		bx	lr
 4455              	.L325:
 4456 001a 00BF     		.align	2
 4457              	.L324:
 4458 001c 00000000 		.word	pxCurrentTCB
 4459              		.cfi_endproc
 4460              	.LFE175:
 4461              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4462              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4463              		.align	2
 4464              		.global	xTaskGetSchedulerState
 4465              		.thumb
 4466              		.thumb_func
 4467              		.type	xTaskGetSchedulerState, %function
 4468              	xTaskGetSchedulerState:
 4469              	.LFB176:
3778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4470              		.loc 1 3785 0
 4471              		.cfi_startproc
 4472              		@ args = 0, pretend = 0, frame = 8
 4473              		@ frame_needed = 1, uses_anonymous_args = 0
 4474              		@ link register save eliminated.
 4475 0000 80B4     		push	{r7}
 4476              		.cfi_def_cfa_offset 4
 4477              		.cfi_offset 7, -4
 4478 0002 83B0     		sub	sp, sp, #12
 4479              		.cfi_def_cfa_offset 16
 4480 0004 00AF     		add	r7, sp, #0
 4481              		.cfi_def_cfa_register 7
3786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
3787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 4482              		.loc 1 3788 0
 4483 0006 0B4B     		ldr	r3, .L331
 4484 0008 1B68     		ldr	r3, [r3]
 4485 000a 002B     		cmp	r3, #0
 4486 000c 02D1     		bne	.L327
3789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 4487              		.loc 1 3790 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 151


 4488 000e 0123     		movs	r3, #1
 4489 0010 7B60     		str	r3, [r7, #4]
 4490 0012 08E0     		b	.L328
 4491              	.L327:
3791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4492              		.loc 1 3794 0
 4493 0014 084B     		ldr	r3, .L331+4
 4494 0016 1B68     		ldr	r3, [r3]
 4495 0018 002B     		cmp	r3, #0
 4496 001a 02D1     		bne	.L329
3795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 4497              		.loc 1 3796 0
 4498 001c 0223     		movs	r3, #2
 4499 001e 7B60     		str	r3, [r7, #4]
 4500 0020 01E0     		b	.L328
 4501              	.L329:
3797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 4502              		.loc 1 3800 0
 4503 0022 0023     		movs	r3, #0
 4504 0024 7B60     		str	r3, [r7, #4]
 4505              	.L328:
3801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 4506              		.loc 1 3804 0
 4507 0026 7B68     		ldr	r3, [r7, #4]
3805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4508              		.loc 1 3805 0
 4509 0028 1846     		mov	r0, r3
 4510 002a 0C37     		adds	r7, r7, #12
 4511              		.cfi_def_cfa_offset 4
 4512 002c BD46     		mov	sp, r7
 4513              		.cfi_def_cfa_register 13
 4514              		@ sp needed
 4515 002e 5DF8047B 		ldr	r7, [sp], #4
 4516              		.cfi_restore 7
 4517              		.cfi_def_cfa_offset 0
 4518 0032 7047     		bx	lr
 4519              	.L332:
 4520              		.align	2
 4521              	.L331:
 4522 0034 0C010000 		.word	xSchedulerRunning
 4523 0038 28010000 		.word	uxSchedulerSuspended
 4524              		.cfi_endproc
 4525              	.LFE176:
 4526              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4527              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4528              		.align	2
 4529              		.global	uxTaskResetEventItemValue
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 152


 4530              		.thumb
 4531              		.thumb_func
 4532              		.type	uxTaskResetEventItemValue, %function
 4533              	uxTaskResetEventItemValue:
 4534              	.LFB177:
3806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				not being used for anything else. */
3830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				to be moved into a new list. */
3841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 153


3858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Just inherit the priority. */
3859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Inheritance occurred. */
3865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
3866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					priority of the task attempting to take the mutex.
3875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					not been the case. */
3878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
3879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
3892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			be the running state task. */
3910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 154


3915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			task? */
3916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					the holding task from the ready list. */
3926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
3931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
3932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
3934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					new	ready list. */
3937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					any other purpose if this task is running, and it must be
3942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					running to give back the mutex. */
3943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					This is only actually required in the corner case whereby
3948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					in an order different to that in which they were taken.
3950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					a task is waiting on it or not. */
3954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xReturn = pdTRUE;
3955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
3957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
3958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
3960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
3962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
3967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
3970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 155


3972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
3973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
3976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
3981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxMutexHolder != NULL )
3986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
3987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			one mutex. */
3989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
3991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			holding task's base priority and the priority of the highest
3994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
3997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
3999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Does the priority need to change? */
4005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If a task has timed out because it already holds the
4014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					its own priority. */
4016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					priority to facilitate determining the subject task's
4020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					state. */
4021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					being used for anything else. */
4027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 156


4029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4033:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4034:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4035:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4036:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4037:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					then the task that holds the mutex could be in either the
4038:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4039:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					from its current state list if it is in the Ready state as
4040:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					the task's priority is going to change and there is one
4041:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					Ready list per priority. */
4042:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4043:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4044:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4045:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4046:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4047:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4048:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						else
4049:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4050:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4051:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4052:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4053:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4054:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4055:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4056:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4057:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4058:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4059:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4060:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4061:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4062:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4063:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4064:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4065:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4066:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4067:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4068:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4069:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4070:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4071:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4072:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4073:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4074:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4075:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4076:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4077:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4078:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4079:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4080:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4081:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskEnterCritical( void )
4082:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4083:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4084:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4085:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 157


4086:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4087:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4088:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4089:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4090:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4091:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4092:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4093:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4094:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			critical section. */
4095:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4096:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4097:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4098:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4099:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4100:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4101:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4102:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4103:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4104:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4105:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4106:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4107:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4108:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4109:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4110:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4111:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskExitCritical( void )
4112:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4113:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4114:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4115:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4116:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4117:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4118:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4119:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4120:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4121:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					portENABLE_INTERRUPTS();
4122:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4123:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4124:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4125:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4126:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4127:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4128:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4129:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4130:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4131:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4132:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4133:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4134:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4135:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4136:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4137:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4138:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4139:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4140:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4141:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4142:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 158


4143:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4144:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4145:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4146:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	size_t x;
4147:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4148:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Start by copying the entire string. */
4149:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4150:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4151:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4152:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		printed out. */
4153:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4154:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4155:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4156:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4157:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4158:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Terminate. */
4159:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4160:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4161:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Return the new end of string. */
4162:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return &( pcBuffer[ x ] );
4163:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4164:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4165:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4166:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4167:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4168:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4169:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4170:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4171:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4172:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4173:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4174:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	char cStatus;
4175:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4176:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/*
4177:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * PLEASE NOTE:
4178:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4179:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4180:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4181:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * scheduler.
4182:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4183:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4184:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4185:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * displays task names, states and stack usage.
4186:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4187:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4188:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4189:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4190:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4191:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4192:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4193:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * snprintf() implementation!).
4194:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4195:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4196:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4197:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * through a call to vTaskList().
4198:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 */
4199:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 159


4200:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4201:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4202:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4203:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4204:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4205:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		function is executing. */
4206:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4207:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4208:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4209:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4210:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		equate to NULL. */
4211:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4212:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4213:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4214:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4215:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the (binary) data. */
4216:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4217:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4218:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4219:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4220:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4221:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4222:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4223:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4224:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4225:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4226:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4227:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4228:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4229:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4230:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4231:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4232:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4233:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4234:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4235:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4236:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4237:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4238:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4239:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										to prevent static checking errors. */
4240:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										cStatus = 0x00;
4241:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 										break;
4242:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4243:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4244:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4245:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				can be printed in tabular form more easily. */
4246:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4247:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4248:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Write the rest of the string. */
4249:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4250:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4251:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4252:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4253:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4254:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4255:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4256:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 160


4257:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4258:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4259:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4260:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4261:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4262:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4263:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4264:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*----------------------------------------------------------*/
4265:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4266:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4267:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4268:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4269:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4270:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4271:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4272:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4273:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4274:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4275:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4276:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4277:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4278:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		#endif
4279:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4280:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/*
4281:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * PLEASE NOTE:
4282:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4283:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4284:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4285:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * scheduler.
4286:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4287:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4288:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4289:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4290:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * in both absolute and percentage terms.
4291:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4292:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4293:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4294:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4295:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4296:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4297:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4298:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * a full snprintf() implementation!).
4299:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 *
4300:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4301:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4302:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4303:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		 */
4304:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4305:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4306:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4307:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4308:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4309:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		function is executing. */
4310:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4311:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4312:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4313:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 161


4314:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		equate to NULL. */
4315:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4316:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4317:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4318:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4319:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Generate the (binary) data. */
4320:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4321:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4322:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* For percentage calculations. */
4323:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ulTotalTime /= 100UL;
4324:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4325:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4326:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ulTotalTime > 0 )
4327:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4328:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4329:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4330:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4331:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4332:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4333:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4334:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4335:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4336:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* Write the task name to the string, padding with
4337:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4338:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					easily. */
4339:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4340:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4341:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4342:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4343:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4344:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4345:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4346:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4347:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
4348:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4349:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4350:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							printf() library can be used. */
4351:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4352:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4353:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
4354:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4355:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4356:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4357:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4358:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4359:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4360:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4361:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4362:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4363:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#else
4364:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						{
4365:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4366:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							printf() library can be used. */
4367:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4368:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						}
4369:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						#endif
4370:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 162


4371:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4372:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4373:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4374:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4375:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4376:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4377:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4378:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4379:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4380:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4381:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4382:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4383:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4384:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4385:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4386:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4387:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4388:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4389:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4390:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4391:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4392:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4393:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4394:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 4535              		.loc 1 4394 0
 4536              		.cfi_startproc
 4537              		@ args = 0, pretend = 0, frame = 8
 4538              		@ frame_needed = 1, uses_anonymous_args = 0
 4539              		@ link register save eliminated.
 4540 0000 80B4     		push	{r7}
 4541              		.cfi_def_cfa_offset 4
 4542              		.cfi_offset 7, -4
 4543 0002 83B0     		sub	sp, sp, #12
 4544              		.cfi_def_cfa_offset 16
 4545 0004 00AF     		add	r7, sp, #0
 4546              		.cfi_def_cfa_register 7
4395:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t uxReturn;
4396:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4397:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4547              		.loc 1 4397 0
 4548 0006 094B     		ldr	r3, .L335
 4549 0008 1B68     		ldr	r3, [r3]
 4550 000a 9B69     		ldr	r3, [r3, #24]
 4551 000c 7B60     		str	r3, [r7, #4]
4398:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4399:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4400:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	queues and semaphores. */
4401:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4552              		.loc 1 4401 0
 4553 000e 074B     		ldr	r3, .L335
 4554 0010 1B68     		ldr	r3, [r3]
 4555 0012 064A     		ldr	r2, .L335
 4556 0014 1268     		ldr	r2, [r2]
 4557 0016 D26A     		ldr	r2, [r2, #44]
 4558 0018 C2F10702 		rsb	r2, r2, #7
 4559 001c 9A61     		str	r2, [r3, #24]
4402:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 163


4403:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	return uxReturn;
 4560              		.loc 1 4403 0
 4561 001e 7B68     		ldr	r3, [r7, #4]
4404:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 4562              		.loc 1 4404 0
 4563 0020 1846     		mov	r0, r3
 4564 0022 0C37     		adds	r7, r7, #12
 4565              		.cfi_def_cfa_offset 4
 4566 0024 BD46     		mov	sp, r7
 4567              		.cfi_def_cfa_register 13
 4568              		@ sp needed
 4569 0026 5DF8047B 		ldr	r7, [sp], #4
 4570              		.cfi_restore 7
 4571              		.cfi_def_cfa_offset 0
 4572 002a 7047     		bx	lr
 4573              	.L336:
 4574              		.align	2
 4575              	.L335:
 4576 002c 00000000 		.word	pxCurrentTCB
 4577              		.cfi_endproc
 4578              	.LFE177:
 4579              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4580              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4581              		.align	2
 4582              		.global	ulTaskNotifyTake
 4583              		.thumb
 4584              		.thumb_func
 4585              		.type	ulTaskNotifyTake, %function
 4586              	ulTaskNotifyTake:
 4587              	.LFB178:
4405:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4407:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4408:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4409:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4410:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4411:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4412:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4413:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4414:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4415:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4416:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4417:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4418:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return pxCurrentTCB;
4419:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4420:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4421:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4422:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4423:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4424:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4425:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4426:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4427:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4588              		.loc 1 4427 0
 4589              		.cfi_startproc
 4590              		@ args = 0, pretend = 0, frame = 16
 4591              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 164


 4592 0000 80B5     		push	{r7, lr}
 4593              		.cfi_def_cfa_offset 8
 4594              		.cfi_offset 7, -8
 4595              		.cfi_offset 14, -4
 4596 0002 84B0     		sub	sp, sp, #16
 4597              		.cfi_def_cfa_offset 24
 4598 0004 00AF     		add	r7, sp, #0
 4599              		.cfi_def_cfa_register 7
 4600 0006 7860     		str	r0, [r7, #4]
 4601 0008 3960     		str	r1, [r7]
4428:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint32_t ulReturn;
4429:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4430:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 4602              		.loc 1 4430 0
 4603 000a FFF7FEFF 		bl	vPortEnterCritical
4431:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4432:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4433:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4604              		.loc 1 4433 0
 4605 000e 1E4B     		ldr	r3, .L343
 4606 0010 1B68     		ldr	r3, [r3]
 4607 0012 9B6D     		ldr	r3, [r3, #88]
 4608 0014 002B     		cmp	r3, #0
 4609 0016 13D1     		bne	.L338
4434:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4435:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4436:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4610              		.loc 1 4436 0
 4611 0018 1B4B     		ldr	r3, .L343
 4612 001a 1B68     		ldr	r3, [r3]
 4613 001c 0122     		movs	r2, #1
 4614 001e 83F85C20 		strb	r2, [r3, #92]
4437:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4438:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4615              		.loc 1 4438 0
 4616 0022 3B68     		ldr	r3, [r7]
 4617 0024 002B     		cmp	r3, #0
 4618 0026 0BD0     		beq	.L338
4439:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4440:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4619              		.loc 1 4440 0
 4620 0028 0121     		movs	r1, #1
 4621 002a 3868     		ldr	r0, [r7]
 4622 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4441:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4442:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4443:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4444:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4445:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					critical section exits) - but it is not something that
4446:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					application code should ever do. */
4447:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					portYIELD_WITHIN_API();
 4623              		.loc 1 4447 0
 4624 0030 164B     		ldr	r3, .L343+4
 4625 0032 4FF08052 		mov	r2, #268435456
 4626 0036 1A60     		str	r2, [r3]
 4627              		.syntax unified
 4628              	@ 4447 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 165


 4629 0038 BFF34F8F 		dsb
 4630              	@ 0 "" 2
 4631              	@ 4447 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 4632 003c BFF36F8F 		isb
 4633              	@ 0 "" 2
 4634              		.thumb
 4635              		.syntax unified
 4636              	.L338:
4448:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4449:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4450:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4451:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4452:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4453:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4454:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4455:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4456:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4457:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4458:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4459:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4637              		.loc 1 4459 0
 4638 0040 FFF7FEFF 		bl	vPortExitCritical
4460:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4461:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 4639              		.loc 1 4461 0
 4640 0044 FFF7FEFF 		bl	vPortEnterCritical
4462:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4463:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4464:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4641              		.loc 1 4464 0
 4642 0048 0F4B     		ldr	r3, .L343
 4643 004a 1B68     		ldr	r3, [r3]
 4644 004c 9B6D     		ldr	r3, [r3, #88]
 4645 004e FB60     		str	r3, [r7, #12]
4465:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4466:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ulReturn != 0UL )
 4646              		.loc 1 4466 0
 4647 0050 FB68     		ldr	r3, [r7, #12]
 4648 0052 002B     		cmp	r3, #0
 4649 0054 0CD0     		beq	.L339
4467:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4468:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4650              		.loc 1 4468 0
 4651 0056 7B68     		ldr	r3, [r7, #4]
 4652 0058 002B     		cmp	r3, #0
 4653 005a 04D0     		beq	.L340
4469:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4470:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4654              		.loc 1 4470 0
 4655 005c 0A4B     		ldr	r3, .L343
 4656 005e 1B68     		ldr	r3, [r3]
 4657 0060 0022     		movs	r2, #0
 4658 0062 9A65     		str	r2, [r3, #88]
 4659 0064 04E0     		b	.L339
 4660              	.L340:
4471:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4472:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 166


4473:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4474:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 4661              		.loc 1 4474 0
 4662 0066 084B     		ldr	r3, .L343
 4663 0068 1B68     		ldr	r3, [r3]
 4664 006a FA68     		ldr	r2, [r7, #12]
 4665 006c 013A     		subs	r2, r2, #1
 4666 006e 9A65     		str	r2, [r3, #88]
 4667              	.L339:
4475:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4476:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4477:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4478:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4479:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4480:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4481:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4482:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4668              		.loc 1 4482 0
 4669 0070 054B     		ldr	r3, .L343
 4670 0072 1B68     		ldr	r3, [r3]
 4671 0074 0022     		movs	r2, #0
 4672 0076 83F85C20 		strb	r2, [r3, #92]
4483:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4484:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4673              		.loc 1 4484 0
 4674 007a FFF7FEFF 		bl	vPortExitCritical
4485:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4486:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return ulReturn;
 4675              		.loc 1 4486 0
 4676 007e FB68     		ldr	r3, [r7, #12]
4487:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4677              		.loc 1 4487 0
 4678 0080 1846     		mov	r0, r3
 4679 0082 1037     		adds	r7, r7, #16
 4680              		.cfi_def_cfa_offset 8
 4681 0084 BD46     		mov	sp, r7
 4682              		.cfi_def_cfa_register 13
 4683              		@ sp needed
 4684 0086 80BD     		pop	{r7, pc}
 4685              	.L344:
 4686              		.align	2
 4687              	.L343:
 4688 0088 00000000 		.word	pxCurrentTCB
 4689 008c 04ED00E0 		.word	-536810236
 4690              		.cfi_endproc
 4691              	.LFE178:
 4692              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4693              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4694              		.align	2
 4695              		.global	xTaskNotifyWait
 4696              		.thumb
 4697              		.thumb_func
 4698              		.type	xTaskNotifyWait, %function
 4699              	xTaskNotifyWait:
 4700              	.LFB179:
4488:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4489:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 167


4490:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4491:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4492:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4493:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4494:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4495:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4701              		.loc 1 4495 0
 4702              		.cfi_startproc
 4703              		@ args = 0, pretend = 0, frame = 24
 4704              		@ frame_needed = 1, uses_anonymous_args = 0
 4705 0000 80B5     		push	{r7, lr}
 4706              		.cfi_def_cfa_offset 8
 4707              		.cfi_offset 7, -8
 4708              		.cfi_offset 14, -4
 4709 0002 86B0     		sub	sp, sp, #24
 4710              		.cfi_def_cfa_offset 32
 4711 0004 00AF     		add	r7, sp, #0
 4712              		.cfi_def_cfa_register 7
 4713 0006 F860     		str	r0, [r7, #12]
 4714 0008 B960     		str	r1, [r7, #8]
 4715 000a 7A60     		str	r2, [r7, #4]
 4716 000c 3B60     		str	r3, [r7]
4496:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
4497:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4498:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 4717              		.loc 1 4498 0
 4718 000e FFF7FEFF 		bl	vPortEnterCritical
4499:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4500:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4501:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4719              		.loc 1 4501 0
 4720 0012 264B     		ldr	r3, .L351
 4721 0014 1B68     		ldr	r3, [r3]
 4722 0016 93F85C30 		ldrb	r3, [r3, #92]
 4723 001a DBB2     		uxtb	r3, r3
 4724 001c 022B     		cmp	r3, #2
 4725 001e 1AD0     		beq	.L346
4502:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4503:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4504:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4505:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				clear the value to zero. */
4506:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4726              		.loc 1 4506 0
 4727 0020 224B     		ldr	r3, .L351
 4728 0022 1B68     		ldr	r3, [r3]
 4729 0024 996D     		ldr	r1, [r3, #88]
 4730 0026 FA68     		ldr	r2, [r7, #12]
 4731 0028 D243     		mvns	r2, r2
 4732 002a 0A40     		ands	r2, r2, r1
 4733 002c 9A65     		str	r2, [r3, #88]
4507:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4508:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4509:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4734              		.loc 1 4509 0
 4735 002e 1F4B     		ldr	r3, .L351
 4736 0030 1B68     		ldr	r3, [r3]
 4737 0032 0122     		movs	r2, #1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 168


 4738 0034 83F85C20 		strb	r2, [r3, #92]
4510:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4511:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4739              		.loc 1 4511 0
 4740 0038 3B68     		ldr	r3, [r7]
 4741 003a 002B     		cmp	r3, #0
 4742 003c 0BD0     		beq	.L346
4512:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4513:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4743              		.loc 1 4513 0
 4744 003e 0121     		movs	r1, #1
 4745 0040 3868     		ldr	r0, [r7]
 4746 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4514:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4515:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4516:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4517:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4518:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					critical section exits) - but it is not something that
4519:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					application code should ever do. */
4520:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					portYIELD_WITHIN_API();
 4747              		.loc 1 4520 0
 4748 0046 1A4B     		ldr	r3, .L351+4
 4749 0048 4FF08052 		mov	r2, #268435456
 4750 004c 1A60     		str	r2, [r3]
 4751              		.syntax unified
 4752              	@ 4520 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 4753 004e BFF34F8F 		dsb
 4754              	@ 0 "" 2
 4755              	@ 4520 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 4756 0052 BFF36F8F 		isb
 4757              	@ 0 "" 2
 4758              		.thumb
 4759              		.syntax unified
 4760              	.L346:
4521:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4522:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4523:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4524:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4525:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4526:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4527:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4528:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4529:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4530:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4531:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4532:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4761              		.loc 1 4532 0
 4762 0056 FFF7FEFF 		bl	vPortExitCritical
4533:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4534:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 4763              		.loc 1 4534 0
 4764 005a FFF7FEFF 		bl	vPortEnterCritical
4535:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4536:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4537:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4538:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulNotificationValue != NULL )
 4765              		.loc 1 4538 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 169


 4766 005e 7B68     		ldr	r3, [r7, #4]
 4767 0060 002B     		cmp	r3, #0
 4768 0062 04D0     		beq	.L347
4539:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4540:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4541:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				have changed. */
4542:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4769              		.loc 1 4542 0
 4770 0064 114B     		ldr	r3, .L351
 4771 0066 1B68     		ldr	r3, [r3]
 4772 0068 9A6D     		ldr	r2, [r3, #88]
 4773 006a 7B68     		ldr	r3, [r7, #4]
 4774 006c 1A60     		str	r2, [r3]
 4775              	.L347:
4543:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4544:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4545:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4546:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4547:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4548:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			unblocked because of a timeout. */
4549:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4776              		.loc 1 4549 0
 4777 006e 0F4B     		ldr	r3, .L351
 4778 0070 1B68     		ldr	r3, [r3]
 4779 0072 93F85C30 		ldrb	r3, [r3, #92]
 4780 0076 DBB2     		uxtb	r3, r3
 4781 0078 022B     		cmp	r3, #2
 4782 007a 02D0     		beq	.L348
4550:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4551:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A notification was not received. */
4552:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFALSE;
 4783              		.loc 1 4552 0
 4784 007c 0023     		movs	r3, #0
 4785 007e 7B61     		str	r3, [r7, #20]
 4786 0080 08E0     		b	.L349
 4787              	.L348:
4553:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4554:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4555:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4556:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* A notification was already pending or a notification was
4557:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				received while the task was waiting. */
4558:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4788              		.loc 1 4558 0
 4789 0082 0A4B     		ldr	r3, .L351
 4790 0084 1B68     		ldr	r3, [r3]
 4791 0086 996D     		ldr	r1, [r3, #88]
 4792 0088 BA68     		ldr	r2, [r7, #8]
 4793 008a D243     		mvns	r2, r2
 4794 008c 0A40     		ands	r2, r2, r1
 4795 008e 9A65     		str	r2, [r3, #88]
4559:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdTRUE;
 4796              		.loc 1 4559 0
 4797 0090 0123     		movs	r3, #1
 4798 0092 7B61     		str	r3, [r7, #20]
 4799              	.L349:
4560:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4561:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 170


4562:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4800              		.loc 1 4562 0
 4801 0094 054B     		ldr	r3, .L351
 4802 0096 1B68     		ldr	r3, [r3]
 4803 0098 0022     		movs	r2, #0
 4804 009a 83F85C20 		strb	r2, [r3, #92]
4563:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4564:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 4805              		.loc 1 4564 0
 4806 009e FFF7FEFF 		bl	vPortExitCritical
4565:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4566:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 4807              		.loc 1 4566 0
 4808 00a2 7B69     		ldr	r3, [r7, #20]
4567:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 4809              		.loc 1 4567 0
 4810 00a4 1846     		mov	r0, r3
 4811 00a6 1837     		adds	r7, r7, #24
 4812              		.cfi_def_cfa_offset 8
 4813 00a8 BD46     		mov	sp, r7
 4814              		.cfi_def_cfa_register 13
 4815              		@ sp needed
 4816 00aa 80BD     		pop	{r7, pc}
 4817              	.L352:
 4818              		.align	2
 4819              	.L351:
 4820 00ac 00000000 		.word	pxCurrentTCB
 4821 00b0 04ED00E0 		.word	-536810236
 4822              		.cfi_endproc
 4823              	.LFE179:
 4824              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4825              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4826              		.align	2
 4827              		.global	xTaskGenericNotify
 4828              		.thumb
 4829              		.thumb_func
 4830              		.type	xTaskGenericNotify, %function
 4831              	xTaskGenericNotify:
 4832              	.LFB180:
4568:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4569:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4570:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4571:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4572:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4573:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4574:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4575:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 4833              		.loc 1 4575 0
 4834              		.cfi_startproc
 4835              		@ args = 0, pretend = 0, frame = 40
 4836              		@ frame_needed = 1, uses_anonymous_args = 0
 4837 0000 80B5     		push	{r7, lr}
 4838              		.cfi_def_cfa_offset 8
 4839              		.cfi_offset 7, -8
 4840              		.cfi_offset 14, -4
 4841 0002 8AB0     		sub	sp, sp, #40
 4842              		.cfi_def_cfa_offset 48
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 171


 4843 0004 00AF     		add	r7, sp, #0
 4844              		.cfi_def_cfa_register 7
 4845 0006 F860     		str	r0, [r7, #12]
 4846 0008 B960     		str	r1, [r7, #8]
 4847 000a 3B60     		str	r3, [r7]
 4848 000c 1346     		mov	r3, r2
 4849 000e FB71     		strb	r3, [r7, #7]
4576:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4577:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4850              		.loc 1 4577 0
 4851 0010 0123     		movs	r3, #1
 4852 0012 7B62     		str	r3, [r7, #36]
4578:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4579:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4580:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 4853              		.loc 1 4580 0
 4854 0014 FB68     		ldr	r3, [r7, #12]
 4855 0016 002B     		cmp	r3, #0
 4856 0018 09D1     		bne	.L354
 4857              	.LBB168:
 4858              	.LBB169:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 4859              		.loc 2 156 0 discriminator 1
 4860              		.syntax unified
 4861              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 4862 001a 4FF03F03 			mov r3, #63												
 4863 001e 83F31188 		msr basepri, r3											
 4864 0022 BFF36F8F 		isb														
 4865 0026 BFF34F8F 		dsb														
 4866              	
 4867              	@ 0 "" 2
 4868              		.thumb
 4869              		.syntax unified
 4870 002a 7B61     		str	r3, [r7, #20]
 4871              	.L355:
 4872              	.LBE169:
 4873              	.LBE168:
 4874              		.loc 1 4580 0 discriminator 1
 4875 002c FEE7     		b	.L355
 4876              	.L354:
4581:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4877              		.loc 1 4581 0
 4878 002e FB68     		ldr	r3, [r7, #12]
 4879 0030 3B62     		str	r3, [r7, #32]
4582:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4583:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 4880              		.loc 1 4583 0
 4881 0032 FFF7FEFF 		bl	vPortEnterCritical
4584:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4585:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4882              		.loc 1 4585 0
 4883 0036 3B68     		ldr	r3, [r7]
 4884 0038 002B     		cmp	r3, #0
 4885 003a 03D0     		beq	.L356
4586:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4587:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4886              		.loc 1 4587 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 172


 4887 003c 3B6A     		ldr	r3, [r7, #32]
 4888 003e 9A6D     		ldr	r2, [r3, #88]
 4889 0040 3B68     		ldr	r3, [r7]
 4890 0042 1A60     		str	r2, [r3]
 4891              	.L356:
4588:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4589:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4590:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4892              		.loc 1 4590 0
 4893 0044 3B6A     		ldr	r3, [r7, #32]
 4894 0046 93F85C30 		ldrb	r3, [r3, #92]
 4895 004a FB77     		strb	r3, [r7, #31]
4591:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4592:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4896              		.loc 1 4592 0
 4897 004c 3B6A     		ldr	r3, [r7, #32]
 4898 004e 0222     		movs	r2, #2
 4899 0050 83F85C20 		strb	r2, [r3, #92]
4593:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4594:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			switch( eAction )
 4900              		.loc 1 4594 0
 4901 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4902 0056 042B     		cmp	r3, #4
 4903 0058 27D8     		bhi	.L357
 4904 005a 01A2     		adr	r2, .L359
 4905 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4906              		.p2align 2
 4907              	.L359:
 4908 0060 AB000000 		.word	.L357+1
 4909 0064 75000000 		.word	.L360+1
 4910 0068 83000000 		.word	.L361+1
 4911 006c 8F000000 		.word	.L362+1
 4912 0070 97000000 		.word	.L363+1
 4913              		.p2align 1
 4914              	.L360:
4595:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4596:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetBits	:
4597:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4915              		.loc 1 4597 0
 4916 0074 3B6A     		ldr	r3, [r7, #32]
 4917 0076 9A6D     		ldr	r2, [r3, #88]
 4918 0078 BB68     		ldr	r3, [r7, #8]
 4919 007a 1A43     		orrs	r2, r2, r3
 4920 007c 3B6A     		ldr	r3, [r7, #32]
 4921 007e 9A65     		str	r2, [r3, #88]
4598:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4922              		.loc 1 4598 0
 4923 0080 13E0     		b	.L357
 4924              	.L361:
4599:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4600:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eIncrement	:
4601:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4925              		.loc 1 4601 0
 4926 0082 3B6A     		ldr	r3, [r7, #32]
 4927 0084 9B6D     		ldr	r3, [r3, #88]
 4928 0086 5A1C     		adds	r2, r3, #1
 4929 0088 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 173


 4930 008a 9A65     		str	r2, [r3, #88]
4602:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4931              		.loc 1 4602 0
 4932 008c 0DE0     		b	.L357
 4933              	.L362:
4603:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4604:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4605:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4934              		.loc 1 4605 0
 4935 008e 3B6A     		ldr	r3, [r7, #32]
 4936 0090 BA68     		ldr	r2, [r7, #8]
 4937 0092 9A65     		str	r2, [r3, #88]
4606:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4938              		.loc 1 4606 0
 4939 0094 09E0     		b	.L357
 4940              	.L363:
4607:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4608:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4609:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4941              		.loc 1 4609 0
 4942 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4943 0098 022B     		cmp	r3, #2
 4944 009a 03D0     		beq	.L364
4610:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4611:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4945              		.loc 1 4611 0
 4946 009c 3B6A     		ldr	r3, [r7, #32]
 4947 009e BA68     		ldr	r2, [r7, #8]
 4948 00a0 9A65     		str	r2, [r3, #88]
4612:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4613:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4614:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4615:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The value could not be written to the task. */
4616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xReturn = pdFAIL;
4617:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4618:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 4949              		.loc 1 4618 0
 4950 00a2 01E0     		b	.L371
 4951              	.L364:
4616:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 4952              		.loc 1 4616 0
 4953 00a4 0023     		movs	r3, #0
 4954 00a6 7B62     		str	r3, [r7, #36]
 4955              	.L371:
 4956              		.loc 1 4618 0
 4957 00a8 00BF     		nop
 4958              	.L357:
4619:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4620:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eNoAction:
4621:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is being notified without its notify value being
4622:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					updated. */
4623:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4624:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4625:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4626:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY();
4627:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4628:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 174


4629:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4630:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4959              		.loc 1 4630 0
 4960 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4961 00ac 012B     		cmp	r3, #1
 4962 00ae 39D1     		bne	.L366
4631:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4632:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4963              		.loc 1 4632 0
 4964 00b0 3B6A     		ldr	r3, [r7, #32]
 4965 00b2 0433     		adds	r3, r3, #4
 4966 00b4 1846     		mov	r0, r3
 4967 00b6 FFF7FEFF 		bl	uxListRemove
4633:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4968              		.loc 1 4633 0
 4969 00ba 3B6A     		ldr	r3, [r7, #32]
 4970 00bc DA6A     		ldr	r2, [r3, #44]
 4971 00be 1D4B     		ldr	r3, .L372
 4972 00c0 1B68     		ldr	r3, [r3]
 4973 00c2 9A42     		cmp	r2, r3
 4974 00c4 03D9     		bls	.L367
 4975              		.loc 1 4633 0 is_stmt 0 discriminator 1
 4976 00c6 3B6A     		ldr	r3, [r7, #32]
 4977 00c8 DB6A     		ldr	r3, [r3, #44]
 4978 00ca 1A4A     		ldr	r2, .L372
 4979 00cc 1360     		str	r3, [r2]
 4980              	.L367:
 4981              		.loc 1 4633 0 discriminator 3
 4982 00ce 3B6A     		ldr	r3, [r7, #32]
 4983 00d0 DA6A     		ldr	r2, [r3, #44]
 4984 00d2 1346     		mov	r3, r2
 4985 00d4 9B00     		lsls	r3, r3, #2
 4986 00d6 1344     		add	r3, r3, r2
 4987 00d8 9B00     		lsls	r3, r3, #2
 4988 00da 174A     		ldr	r2, .L372+4
 4989 00dc 1A44     		add	r2, r2, r3
 4990 00de 3B6A     		ldr	r3, [r7, #32]
 4991 00e0 0433     		adds	r3, r3, #4
 4992 00e2 1946     		mov	r1, r3
 4993 00e4 1046     		mov	r0, r2
 4994 00e6 FFF7FEFF 		bl	vListInsertEnd
4634:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4635:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
4636:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 4995              		.loc 1 4636 0 is_stmt 1 discriminator 3
 4996 00ea 3B6A     		ldr	r3, [r7, #32]
 4997 00ec 9B6A     		ldr	r3, [r3, #40]
 4998 00ee 002B     		cmp	r3, #0
 4999 00f0 09D0     		beq	.L368
 5000              	.LBB170:
 5001              	.LBB171:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5002              		.loc 2 156 0 discriminator 1
 5003              		.syntax unified
 5004              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5005 00f2 4FF03F03 			mov r3, #63												
 5006 00f6 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 175


 5007 00fa BFF36F8F 		isb														
 5008 00fe BFF34F8F 		dsb														
 5009              	
 5010              	@ 0 "" 2
 5011              		.thumb
 5012              		.syntax unified
 5013 0102 BB61     		str	r3, [r7, #24]
 5014              	.L369:
 5015              	.LBE171:
 5016              	.LBE170:
 5017              		.loc 1 4636 0 discriminator 2
 5018 0104 FEE7     		b	.L369
 5019              	.L368:
4637:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4638:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4639:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4640:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4641:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4642:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4643:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4644:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					because it will automatically get reset to a new value when
4645:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4646:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4647:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4648:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4649:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					earliest possible time. */
4650:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4651:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4652:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				#endif
4653:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4654:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5020              		.loc 1 4654 0
 5021 0106 3B6A     		ldr	r3, [r7, #32]
 5022 0108 DA6A     		ldr	r2, [r3, #44]
 5023 010a 0C4B     		ldr	r3, .L372+8
 5024 010c 1B68     		ldr	r3, [r3]
 5025 010e DB6A     		ldr	r3, [r3, #44]
 5026 0110 9A42     		cmp	r2, r3
 5027 0112 07D9     		bls	.L366
4655:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4656:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4657:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4658:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5028              		.loc 1 4658 0
 5029 0114 0A4B     		ldr	r3, .L372+12
 5030 0116 4FF08052 		mov	r2, #268435456
 5031 011a 1A60     		str	r2, [r3]
 5032              		.syntax unified
 5033              	@ 4658 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 5034 011c BFF34F8F 		dsb
 5035              	@ 0 "" 2
 5036              	@ 4658 "Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source\tasks.c" 1
 5037 0120 BFF36F8F 		isb
 5038              	@ 0 "" 2
 5039              		.thumb
 5040              		.syntax unified
 5041              	.L366:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 176


4659:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4660:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4661:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4662:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4663:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4664:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4665:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4666:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4667:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4668:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4669:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4670:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5042              		.loc 1 4670 0
 5043 0124 FFF7FEFF 		bl	vPortExitCritical
4671:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4672:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 5044              		.loc 1 4672 0
 5045 0128 7B6A     		ldr	r3, [r7, #36]
4673:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 5046              		.loc 1 4673 0
 5047 012a 1846     		mov	r0, r3
 5048 012c 2837     		adds	r7, r7, #40
 5049              		.cfi_def_cfa_offset 8
 5050 012e BD46     		mov	sp, r7
 5051              		.cfi_def_cfa_register 13
 5052              		@ sp needed
 5053 0130 80BD     		pop	{r7, pc}
 5054              	.L373:
 5055 0132 00BF     		.align	2
 5056              	.L372:
 5057 0134 08010000 		.word	uxTopReadyPriority
 5058 0138 04000000 		.word	pxReadyTasksLists
 5059 013c 00000000 		.word	pxCurrentTCB
 5060 0140 04ED00E0 		.word	-536810236
 5061              		.cfi_endproc
 5062              	.LFE180:
 5063              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 5064              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5065              		.align	2
 5066              		.global	xTaskGenericNotifyFromISR
 5067              		.thumb
 5068              		.thumb_func
 5069              		.type	xTaskGenericNotifyFromISR, %function
 5070              	xTaskGenericNotifyFromISR:
 5071              	.LFB181:
4674:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4675:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4676:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4677:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4678:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4679:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4680:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4681:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 5072              		.loc 1 4681 0
 5073              		.cfi_startproc
 5074              		@ args = 4, pretend = 0, frame = 56
 5075              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 177


 5076 0000 80B5     		push	{r7, lr}
 5077              		.cfi_def_cfa_offset 8
 5078              		.cfi_offset 7, -8
 5079              		.cfi_offset 14, -4
 5080 0002 8EB0     		sub	sp, sp, #56
 5081              		.cfi_def_cfa_offset 64
 5082 0004 00AF     		add	r7, sp, #0
 5083              		.cfi_def_cfa_register 7
 5084 0006 F860     		str	r0, [r7, #12]
 5085 0008 B960     		str	r1, [r7, #8]
 5086 000a 3B60     		str	r3, [r7]
 5087 000c 1346     		mov	r3, r2
 5088 000e FB71     		strb	r3, [r7, #7]
4682:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4683:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4684:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5089              		.loc 1 4684 0
 5090 0010 0123     		movs	r3, #1
 5091 0012 7B63     		str	r3, [r7, #52]
4685:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4686:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4687:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5092              		.loc 1 4687 0
 5093 0014 FB68     		ldr	r3, [r7, #12]
 5094 0016 002B     		cmp	r3, #0
 5095 0018 09D1     		bne	.L375
 5096              	.LBB172:
 5097              	.LBB173:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5098              		.loc 2 156 0 discriminator 1
 5099              		.syntax unified
 5100              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5101 001a 4FF03F03 			mov r3, #63												
 5102 001e 83F31188 		msr basepri, r3											
 5103 0022 BFF36F8F 		isb														
 5104 0026 BFF34F8F 		dsb														
 5105              	
 5106              	@ 0 "" 2
 5107              		.thumb
 5108              		.syntax unified
 5109 002a BB61     		str	r3, [r7, #24]
 5110              	.L376:
 5111              	.LBE173:
 5112              	.LBE172:
 5113              		.loc 1 4687 0 discriminator 1
 5114 002c FEE7     		b	.L376
 5115              	.L375:
4688:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4689:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4690:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4691:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4692:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4693:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4694:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4695:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4696:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4697:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 178


4698:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4699:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4700:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4701:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4702:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4703:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
4704:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4705:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5116              		.loc 1 4705 0
 5117 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4706:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4707:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5118              		.loc 1 4707 0
 5119 0032 FB68     		ldr	r3, [r7, #12]
 5120 0034 3B63     		str	r3, [r7, #48]
 5121              	.LBB174:
 5122              	.LBB175:
 172:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5123              		.loc 2 172 0
 5124              		.syntax unified
 5125              	@ 172 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5126 0036 EFF31182 			mrs r2, basepri											
 5127 003a 4FF03F03 		mov r3, #63												
 5128 003e 83F31188 		msr basepri, r3											
 5129 0042 BFF36F8F 		isb														
 5130 0046 BFF34F8F 		dsb														
 5131              	
 5132              	@ 0 "" 2
 5133              		.thumb
 5134              		.syntax unified
 5135 004a FA61     		str	r2, [r7, #28]
 5136 004c 7B61     		str	r3, [r7, #20]
 184:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 5137              		.loc 2 184 0
 5138 004e FB69     		ldr	r3, [r7, #28]
 5139              	.LBE175:
 5140              	.LBE174:
4708:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4709:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5141              		.loc 1 4709 0
 5142 0050 BB62     		str	r3, [r7, #40]
4710:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4711:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5143              		.loc 1 4711 0
 5144 0052 3B68     		ldr	r3, [r7]
 5145 0054 002B     		cmp	r3, #0
 5146 0056 03D0     		beq	.L378
4712:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4713:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5147              		.loc 1 4713 0
 5148 0058 3B6B     		ldr	r3, [r7, #48]
 5149 005a 9A6D     		ldr	r2, [r3, #88]
 5150 005c 3B68     		ldr	r3, [r7]
 5151 005e 1A60     		str	r2, [r3]
 5152              	.L378:
4714:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4715:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 179


4716:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5153              		.loc 1 4716 0
 5154 0060 3B6B     		ldr	r3, [r7, #48]
 5155 0062 93F85C30 		ldrb	r3, [r3, #92]
 5156 0066 87F82730 		strb	r3, [r7, #39]
4717:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5157              		.loc 1 4717 0
 5158 006a 3B6B     		ldr	r3, [r7, #48]
 5159 006c 0222     		movs	r2, #2
 5160 006e 83F85C20 		strb	r2, [r3, #92]
4718:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4719:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			switch( eAction )
 5161              		.loc 1 4719 0
 5162 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5163 0074 042B     		cmp	r3, #4
 5164 0076 29D8     		bhi	.L379
 5165 0078 01A2     		adr	r2, .L381
 5166 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5167 007e 00BF     		.p2align 2
 5168              	.L381:
 5169 0080 CD000000 		.word	.L379+1
 5170 0084 95000000 		.word	.L382+1
 5171 0088 A3000000 		.word	.L383+1
 5172 008c AF000000 		.word	.L384+1
 5173 0090 B7000000 		.word	.L385+1
 5174              		.p2align 1
 5175              	.L382:
4720:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4721:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetBits	:
4722:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5176              		.loc 1 4722 0
 5177 0094 3B6B     		ldr	r3, [r7, #48]
 5178 0096 9A6D     		ldr	r2, [r3, #88]
 5179 0098 BB68     		ldr	r3, [r7, #8]
 5180 009a 1A43     		orrs	r2, r2, r3
 5181 009c 3B6B     		ldr	r3, [r7, #48]
 5182 009e 9A65     		str	r2, [r3, #88]
4723:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 5183              		.loc 1 4723 0
 5184 00a0 14E0     		b	.L379
 5185              	.L383:
4724:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4725:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eIncrement	:
4726:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5186              		.loc 1 4726 0
 5187 00a2 3B6B     		ldr	r3, [r7, #48]
 5188 00a4 9B6D     		ldr	r3, [r3, #88]
 5189 00a6 5A1C     		adds	r2, r3, #1
 5190 00a8 3B6B     		ldr	r3, [r7, #48]
 5191 00aa 9A65     		str	r2, [r3, #88]
4727:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 5192              		.loc 1 4727 0
 5193 00ac 0EE0     		b	.L379
 5194              	.L384:
4728:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4729:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4730:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 180


 5195              		.loc 1 4730 0
 5196 00ae 3B6B     		ldr	r3, [r7, #48]
 5197 00b0 BA68     		ldr	r2, [r7, #8]
 5198 00b2 9A65     		str	r2, [r3, #88]
4731:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 5199              		.loc 1 4731 0
 5200 00b4 0AE0     		b	.L379
 5201              	.L385:
4732:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4733:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4734:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5202              		.loc 1 4734 0
 5203 00b6 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5204 00ba 022B     		cmp	r3, #2
 5205 00bc 03D0     		beq	.L386
4735:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4736:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5206              		.loc 1 4736 0
 5207 00be 3B6B     		ldr	r3, [r7, #48]
 5208 00c0 BA68     		ldr	r2, [r7, #8]
 5209 00c2 9A65     		str	r2, [r3, #88]
4737:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4738:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4739:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4740:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* The value could not be written to the task. */
4741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xReturn = pdFAIL;
4742:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4743:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
 5210              		.loc 1 4743 0
 5211 00c4 01E0     		b	.L397
 5212              	.L386:
4741:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
 5213              		.loc 1 4741 0
 5214 00c6 0023     		movs	r3, #0
 5215 00c8 7B63     		str	r3, [r7, #52]
 5216              	.L397:
 5217              		.loc 1 4743 0
 5218 00ca 00BF     		nop
 5219              	.L379:
4744:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4745:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				case eNoAction :
4746:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The task is being notified without its notify value being
4747:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					updated. */
4748:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					break;
4749:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4750:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4751:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4752:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4753:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4754:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4755:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5220              		.loc 1 4755 0
 5221 00cc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 5222 00d0 012B     		cmp	r3, #1
 5223 00d2 46D1     		bne	.L388
4756:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4757:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 181


4758:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5224              		.loc 1 4758 0
 5225 00d4 3B6B     		ldr	r3, [r7, #48]
 5226 00d6 9B6A     		ldr	r3, [r3, #40]
 5227 00d8 002B     		cmp	r3, #0
 5228 00da 09D0     		beq	.L389
 5229              	.LBB176:
 5230              	.LBB177:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5231              		.loc 2 156 0 discriminator 1
 5232              		.syntax unified
 5233              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5234 00dc 4FF03F03 			mov r3, #63												
 5235 00e0 83F31188 		msr basepri, r3											
 5236 00e4 BFF36F8F 		isb														
 5237 00e8 BFF34F8F 		dsb														
 5238              	
 5239              	@ 0 "" 2
 5240              		.thumb
 5241              		.syntax unified
 5242 00ec FB62     		str	r3, [r7, #44]
 5243              	.L390:
 5244              	.LBE177:
 5245              	.LBE176:
 5246              		.loc 1 4758 0 discriminator 2
 5247 00ee FEE7     		b	.L390
 5248              	.L389:
4759:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4760:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5249              		.loc 1 4760 0
 5250 00f0 214B     		ldr	r3, .L398
 5251 00f2 1B68     		ldr	r3, [r3]
 5252 00f4 002B     		cmp	r3, #0
 5253 00f6 1DD1     		bne	.L391
4761:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4762:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5254              		.loc 1 4762 0
 5255 00f8 3B6B     		ldr	r3, [r7, #48]
 5256 00fa 0433     		adds	r3, r3, #4
 5257 00fc 1846     		mov	r0, r3
 5258 00fe FFF7FEFF 		bl	uxListRemove
4763:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5259              		.loc 1 4763 0
 5260 0102 3B6B     		ldr	r3, [r7, #48]
 5261 0104 DA6A     		ldr	r2, [r3, #44]
 5262 0106 1D4B     		ldr	r3, .L398+4
 5263 0108 1B68     		ldr	r3, [r3]
 5264 010a 9A42     		cmp	r2, r3
 5265 010c 03D9     		bls	.L392
 5266              		.loc 1 4763 0 is_stmt 0 discriminator 1
 5267 010e 3B6B     		ldr	r3, [r7, #48]
 5268 0110 DB6A     		ldr	r3, [r3, #44]
 5269 0112 1A4A     		ldr	r2, .L398+4
 5270 0114 1360     		str	r3, [r2]
 5271              	.L392:
 5272              		.loc 1 4763 0 discriminator 3
 5273 0116 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 182


 5274 0118 DA6A     		ldr	r2, [r3, #44]
 5275 011a 1346     		mov	r3, r2
 5276 011c 9B00     		lsls	r3, r3, #2
 5277 011e 1344     		add	r3, r3, r2
 5278 0120 9B00     		lsls	r3, r3, #2
 5279 0122 174A     		ldr	r2, .L398+8
 5280 0124 1A44     		add	r2, r2, r3
 5281 0126 3B6B     		ldr	r3, [r7, #48]
 5282 0128 0433     		adds	r3, r3, #4
 5283 012a 1946     		mov	r1, r3
 5284 012c 1046     		mov	r0, r2
 5285 012e FFF7FEFF 		bl	vListInsertEnd
 5286 0132 05E0     		b	.L393
 5287              	.L391:
4764:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4765:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4766:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4767:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4768:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4769:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5288              		.loc 1 4769 0 is_stmt 1
 5289 0134 3B6B     		ldr	r3, [r7, #48]
 5290 0136 1833     		adds	r3, r3, #24
 5291 0138 1946     		mov	r1, r3
 5292 013a 1248     		ldr	r0, .L398+12
 5293 013c FFF7FEFF 		bl	vListInsertEnd
 5294              	.L393:
4770:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4771:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4772:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5295              		.loc 1 4772 0
 5296 0140 3B6B     		ldr	r3, [r7, #48]
 5297 0142 DA6A     		ldr	r2, [r3, #44]
 5298 0144 104B     		ldr	r3, .L398+16
 5299 0146 1B68     		ldr	r3, [r3]
 5300 0148 DB6A     		ldr	r3, [r3, #44]
 5301 014a 9A42     		cmp	r2, r3
 5302 014c 09D9     		bls	.L388
4773:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4774:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4775:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4776:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5303              		.loc 1 4776 0
 5304 014e 3B6C     		ldr	r3, [r7, #64]
 5305 0150 002B     		cmp	r3, #0
 5306 0152 03D0     		beq	.L394
4777:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4778:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5307              		.loc 1 4778 0
 5308 0154 3B6C     		ldr	r3, [r7, #64]
 5309 0156 0122     		movs	r2, #1
 5310 0158 1A60     		str	r2, [r3]
 5311 015a 02E0     		b	.L388
 5312              	.L394:
4779:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4780:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4781:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 183


4782:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4783:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4784:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						safe FreeRTOS function. */
4785:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
 5313              		.loc 1 4785 0
 5314 015c 0B4B     		ldr	r3, .L398+20
 5315 015e 0122     		movs	r2, #1
 5316 0160 1A60     		str	r2, [r3]
 5317              	.L388:
 5318 0162 BB6A     		ldr	r3, [r7, #40]
 5319 0164 3B62     		str	r3, [r7, #32]
 5320              	.LBB178:
 5321              	.LBB179:
 5322              		.loc 2 190 0
 5323 0166 3B6A     		ldr	r3, [r7, #32]
 5324              		.syntax unified
 5325              	@ 190 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5326 0168 83F31188 			msr basepri, r3	
 5327              	@ 0 "" 2
 5328              		.thumb
 5329              		.syntax unified
 5330              	.LBE179:
 5331              	.LBE178:
4786:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4787:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4788:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4789:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4790:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4791:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4792:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4793:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4794:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4795:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4796:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 5332              		.loc 1 4796 0
 5333 016c 7B6B     		ldr	r3, [r7, #52]
4797:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 5334              		.loc 1 4797 0
 5335 016e 1846     		mov	r0, r3
 5336 0170 3837     		adds	r7, r7, #56
 5337              		.cfi_def_cfa_offset 8
 5338 0172 BD46     		mov	sp, r7
 5339              		.cfi_def_cfa_register 13
 5340              		@ sp needed
 5341 0174 80BD     		pop	{r7, pc}
 5342              	.L399:
 5343 0176 00BF     		.align	2
 5344              	.L398:
 5345 0178 28010000 		.word	uxSchedulerSuspended
 5346 017c 08010000 		.word	uxTopReadyPriority
 5347 0180 04000000 		.word	pxReadyTasksLists
 5348 0184 C0000000 		.word	xPendingReadyList
 5349 0188 00000000 		.word	pxCurrentTCB
 5350 018c 14010000 		.word	xYieldPending
 5351              		.cfi_endproc
 5352              	.LFE181:
 5353              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 184


 5354              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5355              		.align	2
 5356              		.global	vTaskNotifyGiveFromISR
 5357              		.thumb
 5358              		.thumb_func
 5359              		.type	vTaskNotifyGiveFromISR, %function
 5360              	vTaskNotifyGiveFromISR:
 5361              	.LFB182:
4798:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4799:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4800:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4801:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4802:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4803:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4804:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4805:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 5362              		.loc 1 4805 0
 5363              		.cfi_startproc
 5364              		@ args = 0, pretend = 0, frame = 40
 5365              		@ frame_needed = 1, uses_anonymous_args = 0
 5366 0000 80B5     		push	{r7, lr}
 5367              		.cfi_def_cfa_offset 8
 5368              		.cfi_offset 7, -8
 5369              		.cfi_offset 14, -4
 5370 0002 8AB0     		sub	sp, sp, #40
 5371              		.cfi_def_cfa_offset 48
 5372 0004 00AF     		add	r7, sp, #0
 5373              		.cfi_def_cfa_register 7
 5374 0006 7860     		str	r0, [r7, #4]
 5375 0008 3960     		str	r1, [r7]
4806:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t * pxTCB;
4807:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4808:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4809:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4810:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		configASSERT( xTaskToNotify );
 5376              		.loc 1 4810 0
 5377 000a 7B68     		ldr	r3, [r7, #4]
 5378 000c 002B     		cmp	r3, #0
 5379 000e 09D1     		bne	.L401
 5380              	.LBB180:
 5381              	.LBB181:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5382              		.loc 2 156 0 discriminator 1
 5383              		.syntax unified
 5384              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5385 0010 4FF03F03 			mov r3, #63												
 5386 0014 83F31188 		msr basepri, r3											
 5387 0018 BFF36F8F 		isb														
 5388 001c BFF34F8F 		dsb														
 5389              	
 5390              	@ 0 "" 2
 5391              		.thumb
 5392              		.syntax unified
 5393 0020 FB60     		str	r3, [r7, #12]
 5394              	.L402:
 5395              	.LBE181:
 5396              	.LBE180:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 185


 5397              		.loc 1 4810 0 discriminator 1
 5398 0022 FEE7     		b	.L402
 5399              	.L401:
4811:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4812:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4813:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4814:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4815:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4816:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4817:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4818:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4819:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4820:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4821:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4822:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4823:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4824:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4825:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4826:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		provided on the following link:
4827:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4828:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 5400              		.loc 1 4828 0
 5401 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4829:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4830:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5402              		.loc 1 4830 0
 5403 0028 7B68     		ldr	r3, [r7, #4]
 5404 002a 7B62     		str	r3, [r7, #36]
 5405              	.LBB182:
 5406              	.LBB183:
 172:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5407              		.loc 2 172 0
 5408              		.syntax unified
 5409              	@ 172 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5410 002c EFF31182 			mrs r2, basepri											
 5411 0030 4FF03F03 		mov r3, #63												
 5412 0034 83F31188 		msr basepri, r3											
 5413 0038 BFF36F8F 		isb														
 5414 003c BFF34F8F 		dsb														
 5415              	
 5416              	@ 0 "" 2
 5417              		.thumb
 5418              		.syntax unified
 5419 0040 3A61     		str	r2, [r7, #16]
 5420 0042 BB60     		str	r3, [r7, #8]
 184:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** }
 5421              		.loc 2 184 0
 5422 0044 3B69     		ldr	r3, [r7, #16]
 5423              	.LBE183:
 5424              	.LBE182:
4831:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4832:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5425              		.loc 1 4832 0
 5426 0046 FB61     		str	r3, [r7, #28]
4833:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4834:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5427              		.loc 1 4834 0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 186


 5428 0048 7B6A     		ldr	r3, [r7, #36]
 5429 004a 93F85C30 		ldrb	r3, [r3, #92]
 5430 004e FB76     		strb	r3, [r7, #27]
4835:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5431              		.loc 1 4835 0
 5432 0050 7B6A     		ldr	r3, [r7, #36]
 5433 0052 0222     		movs	r2, #2
 5434 0054 83F85C20 		strb	r2, [r3, #92]
4836:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4837:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4838:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			semaphore. */
4839:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5435              		.loc 1 4839 0
 5436 0058 7B6A     		ldr	r3, [r7, #36]
 5437 005a 9B6D     		ldr	r3, [r3, #88]
 5438 005c 5A1C     		adds	r2, r3, #1
 5439 005e 7B6A     		ldr	r3, [r7, #36]
 5440 0060 9A65     		str	r2, [r3, #88]
4840:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4841:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4842:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4843:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4844:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			notification then unblock it now. */
4845:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5441              		.loc 1 4845 0
 5442 0062 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 5443 0064 012B     		cmp	r3, #1
 5444 0066 46D1     		bne	.L404
4846:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4847:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The task should not have been on an event list. */
4848:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 5445              		.loc 1 4848 0
 5446 0068 7B6A     		ldr	r3, [r7, #36]
 5447 006a 9B6A     		ldr	r3, [r3, #40]
 5448 006c 002B     		cmp	r3, #0
 5449 006e 09D0     		beq	.L405
 5450              	.LBB184:
 5451              	.LBB185:
 156:Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h **** 	(
 5452              		.loc 2 156 0 discriminator 1
 5453              		.syntax unified
 5454              	@ 156 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5455 0070 4FF03F03 			mov r3, #63												
 5456 0074 83F31188 		msr basepri, r3											
 5457 0078 BFF36F8F 		isb														
 5458 007c BFF34F8F 		dsb														
 5459              	
 5460              	@ 0 "" 2
 5461              		.thumb
 5462              		.syntax unified
 5463 0080 3B62     		str	r3, [r7, #32]
 5464              	.L406:
 5465              	.LBE185:
 5466              	.LBE184:
 5467              		.loc 1 4848 0 discriminator 2
 5468 0082 FEE7     		b	.L406
 5469              	.L405:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 187


4849:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4850:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5470              		.loc 1 4850 0
 5471 0084 204B     		ldr	r3, .L412
 5472 0086 1B68     		ldr	r3, [r3]
 5473 0088 002B     		cmp	r3, #0
 5474 008a 1DD1     		bne	.L407
4851:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4852:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5475              		.loc 1 4852 0
 5476 008c 7B6A     		ldr	r3, [r7, #36]
 5477 008e 0433     		adds	r3, r3, #4
 5478 0090 1846     		mov	r0, r3
 5479 0092 FFF7FEFF 		bl	uxListRemove
4853:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5480              		.loc 1 4853 0
 5481 0096 7B6A     		ldr	r3, [r7, #36]
 5482 0098 DA6A     		ldr	r2, [r3, #44]
 5483 009a 1C4B     		ldr	r3, .L412+4
 5484 009c 1B68     		ldr	r3, [r3]
 5485 009e 9A42     		cmp	r2, r3
 5486 00a0 03D9     		bls	.L408
 5487              		.loc 1 4853 0 is_stmt 0 discriminator 1
 5488 00a2 7B6A     		ldr	r3, [r7, #36]
 5489 00a4 DB6A     		ldr	r3, [r3, #44]
 5490 00a6 194A     		ldr	r2, .L412+4
 5491 00a8 1360     		str	r3, [r2]
 5492              	.L408:
 5493              		.loc 1 4853 0 discriminator 3
 5494 00aa 7B6A     		ldr	r3, [r7, #36]
 5495 00ac DA6A     		ldr	r2, [r3, #44]
 5496 00ae 1346     		mov	r3, r2
 5497 00b0 9B00     		lsls	r3, r3, #2
 5498 00b2 1344     		add	r3, r3, r2
 5499 00b4 9B00     		lsls	r3, r3, #2
 5500 00b6 164A     		ldr	r2, .L412+8
 5501 00b8 1A44     		add	r2, r2, r3
 5502 00ba 7B6A     		ldr	r3, [r7, #36]
 5503 00bc 0433     		adds	r3, r3, #4
 5504 00be 1946     		mov	r1, r3
 5505 00c0 1046     		mov	r0, r2
 5506 00c2 FFF7FEFF 		bl	vListInsertEnd
 5507 00c6 05E0     		b	.L409
 5508              	.L407:
4854:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4855:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4856:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4857:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4858:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4859:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5509              		.loc 1 4859 0 is_stmt 1
 5510 00c8 7B6A     		ldr	r3, [r7, #36]
 5511 00ca 1833     		adds	r3, r3, #24
 5512 00cc 1946     		mov	r1, r3
 5513 00ce 1148     		ldr	r0, .L412+12
 5514 00d0 FFF7FEFF 		bl	vListInsertEnd
 5515              	.L409:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 188


4860:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4861:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4862:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5516              		.loc 1 4862 0
 5517 00d4 7B6A     		ldr	r3, [r7, #36]
 5518 00d6 DA6A     		ldr	r2, [r3, #44]
 5519 00d8 0F4B     		ldr	r3, .L412+16
 5520 00da 1B68     		ldr	r3, [r3]
 5521 00dc DB6A     		ldr	r3, [r3, #44]
 5522 00de 9A42     		cmp	r2, r3
 5523 00e0 09D9     		bls	.L404
4863:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4864:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					/* The notified task has a priority above the currently
4865:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					executing task so a yield is required. */
4866:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5524              		.loc 1 4866 0
 5525 00e2 3B68     		ldr	r3, [r7]
 5526 00e4 002B     		cmp	r3, #0
 5527 00e6 03D0     		beq	.L410
4867:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4868:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5528              		.loc 1 4868 0
 5529 00e8 3B68     		ldr	r3, [r7]
 5530 00ea 0122     		movs	r2, #1
 5531 00ec 1A60     		str	r2, [r3]
 5532 00ee 02E0     		b	.L404
 5533              	.L410:
4869:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4870:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					else
4871:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					{
4872:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4873:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4874:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						safe FreeRTOS function. */
4875:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 						xYieldPending = pdTRUE;
 5534              		.loc 1 4875 0
 5535 00f0 0A4B     		ldr	r3, .L412+20
 5536 00f2 0122     		movs	r2, #1
 5537 00f4 1A60     		str	r2, [r3]
 5538              	.L404:
 5539 00f6 FB69     		ldr	r3, [r7, #28]
 5540 00f8 7B61     		str	r3, [r7, #20]
 5541              	.LBB186:
 5542              	.LBB187:
 5543              		.loc 2 190 0
 5544 00fa 7B69     		ldr	r3, [r7, #20]
 5545              		.syntax unified
 5546              	@ 190 "Generated_Source\PSoC6\pdl\rtos/FreeRTOS/10.0.1/Source/portable/GCC/CM4F/portmacro.h" 1
 5547 00fc 83F31188 			msr basepri, r3	
 5548              	@ 0 "" 2
 5549              		.thumb
 5550              		.syntax unified
 5551              	.LBE187:
 5552              	.LBE186:
4876:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					}
4877:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4878:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4879:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 189


4880:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4881:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4882:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4883:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4884:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4885:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 5553              		.loc 1 4885 0
 5554 0100 00BF     		nop
 5555 0102 2837     		adds	r7, r7, #40
 5556              		.cfi_def_cfa_offset 8
 5557 0104 BD46     		mov	sp, r7
 5558              		.cfi_def_cfa_register 13
 5559              		@ sp needed
 5560 0106 80BD     		pop	{r7, pc}
 5561              	.L413:
 5562              		.align	2
 5563              	.L412:
 5564 0108 28010000 		.word	uxSchedulerSuspended
 5565 010c 08010000 		.word	uxTopReadyPriority
 5566 0110 04000000 		.word	pxReadyTasksLists
 5567 0114 C0000000 		.word	xPendingReadyList
 5568 0118 00000000 		.word	pxCurrentTCB
 5569 011c 14010000 		.word	xYieldPending
 5570              		.cfi_endproc
 5571              	.LFE182:
 5572              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5573              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5574              		.align	2
 5575              		.global	xTaskNotifyStateClear
 5576              		.thumb
 5577              		.thumb_func
 5578              		.type	xTaskNotifyStateClear, %function
 5579              	xTaskNotifyStateClear:
 5580              	.LFB183:
4886:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4887:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4888:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4889:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4890:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4891:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4892:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4893:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4894:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
 5581              		.loc 1 4894 0
 5582              		.cfi_startproc
 5583              		@ args = 0, pretend = 0, frame = 16
 5584              		@ frame_needed = 1, uses_anonymous_args = 0
 5585 0000 80B5     		push	{r7, lr}
 5586              		.cfi_def_cfa_offset 8
 5587              		.cfi_offset 7, -8
 5588              		.cfi_offset 14, -4
 5589 0002 84B0     		sub	sp, sp, #16
 5590              		.cfi_def_cfa_offset 24
 5591 0004 00AF     		add	r7, sp, #0
 5592              		.cfi_def_cfa_register 7
 5593 0006 7860     		str	r0, [r7, #4]
4895:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 190


4896:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	BaseType_t xReturn;
4897:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4898:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4899:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		its notification state cleared. */
4900:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5594              		.loc 1 4900 0
 5595 0008 7B68     		ldr	r3, [r7, #4]
 5596 000a 002B     		cmp	r3, #0
 5597 000c 02D1     		bne	.L415
 5598              		.loc 1 4900 0 is_stmt 0 discriminator 1
 5599 000e 0E4B     		ldr	r3, .L420
 5600 0010 1B68     		ldr	r3, [r3]
 5601 0012 00E0     		b	.L416
 5602              	.L415:
 5603              		.loc 1 4900 0 discriminator 2
 5604 0014 7B68     		ldr	r3, [r7, #4]
 5605              	.L416:
 5606              		.loc 1 4900 0 discriminator 4
 5607 0016 BB60     		str	r3, [r7, #8]
4901:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4902:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskENTER_CRITICAL();
 5608              		.loc 1 4902 0 is_stmt 1 discriminator 4
 5609 0018 FFF7FEFF 		bl	vPortEnterCritical
4903:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4904:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5610              		.loc 1 4904 0 discriminator 4
 5611 001c BB68     		ldr	r3, [r7, #8]
 5612 001e 93F85C30 		ldrb	r3, [r3, #92]
 5613 0022 DBB2     		uxtb	r3, r3
 5614 0024 022B     		cmp	r3, #2
 5615 0026 06D1     		bne	.L417
4905:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4906:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5616              		.loc 1 4906 0
 5617 0028 BB68     		ldr	r3, [r7, #8]
 5618 002a 0022     		movs	r2, #0
 5619 002c 83F85C20 		strb	r2, [r3, #92]
4907:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdPASS;
 5620              		.loc 1 4907 0
 5621 0030 0123     		movs	r3, #1
 5622 0032 FB60     		str	r3, [r7, #12]
 5623 0034 01E0     		b	.L418
 5624              	.L417:
4908:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4909:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4910:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4911:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xReturn = pdFAIL;
 5625              		.loc 1 4911 0
 5626 0036 0023     		movs	r3, #0
 5627 0038 FB60     		str	r3, [r7, #12]
 5628              	.L418:
4912:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4913:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4914:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5629              		.loc 1 4914 0
 5630 003a FFF7FEFF 		bl	vPortExitCritical
4915:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 191


4916:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		return xReturn;
 5631              		.loc 1 4916 0
 5632 003e FB68     		ldr	r3, [r7, #12]
4917:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
 5633              		.loc 1 4917 0
 5634 0040 1846     		mov	r0, r3
 5635 0042 1037     		adds	r7, r7, #16
 5636              		.cfi_def_cfa_offset 8
 5637 0044 BD46     		mov	sp, r7
 5638              		.cfi_def_cfa_register 13
 5639              		@ sp needed
 5640 0046 80BD     		pop	{r7, pc}
 5641              	.L421:
 5642              		.align	2
 5643              	.L420:
 5644 0048 00000000 		.word	pxCurrentTCB
 5645              		.cfi_endproc
 5646              	.LFE183:
 5647              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5648              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5649              		.align	2
 5650              		.thumb
 5651              		.thumb_func
 5652              		.type	prvAddCurrentTaskToDelayedList, %function
 5653              	prvAddCurrentTaskToDelayedList:
 5654              	.LFB184:
4918:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4919:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4920:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** /*-----------------------------------------------------------*/
4921:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4922:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4923:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4924:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** {
 5655              		.loc 1 4924 0
 5656              		.cfi_startproc
 5657              		@ args = 0, pretend = 0, frame = 16
 5658              		@ frame_needed = 1, uses_anonymous_args = 0
 5659 0000 80B5     		push	{r7, lr}
 5660              		.cfi_def_cfa_offset 8
 5661              		.cfi_offset 7, -8
 5662              		.cfi_offset 14, -4
 5663 0002 84B0     		sub	sp, sp, #16
 5664              		.cfi_def_cfa_offset 24
 5665 0004 00AF     		add	r7, sp, #0
 5666              		.cfi_def_cfa_register 7
 5667 0006 7860     		str	r0, [r7, #4]
 5668 0008 3960     		str	r1, [r7]
4925:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** TickType_t xTimeToWake;
4926:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5669              		.loc 1 4926 0
 5670 000a 214B     		ldr	r3, .L427
 5671 000c 1B68     		ldr	r3, [r3]
 5672 000e FB60     		str	r3, [r7, #12]
4927:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4928:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4929:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4930:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 192


4931:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4932:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		when the task leaves the Blocked state. */
4933:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4934:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4935:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif
4936:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4937:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4938:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	as the same list item is used for both lists. */
4939:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5673              		.loc 1 4939 0
 5674 0010 204B     		ldr	r3, .L427+4
 5675 0012 1B68     		ldr	r3, [r3]
 5676 0014 0433     		adds	r3, r3, #4
 5677 0016 1846     		mov	r0, r3
 5678 0018 FFF7FEFF 		bl	uxListRemove
4940:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4941:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4942:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4943:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4944:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4945:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	else
4946:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4947:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4948:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4949:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4950:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4951:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4952:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5679              		.loc 1 4952 0
 5680 001c 7B68     		ldr	r3, [r7, #4]
 5681 001e B3F1FF3F 		cmp	r3, #-1
 5682 0022 0AD1     		bne	.L423
 5683              		.loc 1 4952 0 is_stmt 0 discriminator 1
 5684 0024 3B68     		ldr	r3, [r7]
 5685 0026 002B     		cmp	r3, #0
 5686 0028 07D0     		beq	.L423
4953:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4954:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4955:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4956:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			indefinitely. */
4957:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5687              		.loc 1 4957 0 is_stmt 1
 5688 002a 1A4B     		ldr	r3, .L427+4
 5689 002c 1B68     		ldr	r3, [r3]
 5690 002e 0433     		adds	r3, r3, #4
 5691 0030 1946     		mov	r1, r3
 5692 0032 1948     		ldr	r0, .L427+8
 5693 0034 FFF7FEFF 		bl	vListInsertEnd
4958:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4959:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
4960:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
4961:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4962:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4963:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			kernel will manage it correctly. */
4964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4965:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4966:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 193


4967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4968:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4970:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4971:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4972:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				list. */
4973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4974:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4975:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
4976:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
4977:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4978:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				is used. */
4979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4980:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
4981:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4982:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4983:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				needs to be updated too. */
4984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4985:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4987:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4988:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				else
4989:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
4990:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4991:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
4992:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
4993:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
4994:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
4995:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4996:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	{
4997:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4998:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4999:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		will manage it correctly. */
5000:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5001:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
5002:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5003:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5004:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
5005:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5006:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
5007:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5008:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5009:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
5010:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		else
5011:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		{
5012:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5013:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5014:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
5015:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5016:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5017:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			too. */
5018:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5019:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
5020:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5021:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
5022:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			else
5023:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 194


5024:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5025:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
5026:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		}
5027:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
5028:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5029:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5030:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	}
5031:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5032:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** }
 5694              		.loc 1 5032 0
 5695 0038 26E0     		b	.L426
 5696              	.L423:
4964:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 5697              		.loc 1 4964 0
 5698 003a FA68     		ldr	r2, [r7, #12]
 5699 003c 7B68     		ldr	r3, [r7, #4]
 5700 003e 1344     		add	r3, r3, r2
 5701 0040 BB60     		str	r3, [r7, #8]
4967:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 5702              		.loc 1 4967 0
 5703 0042 144B     		ldr	r3, .L427+4
 5704 0044 1B68     		ldr	r3, [r3]
 5705 0046 BA68     		ldr	r2, [r7, #8]
 5706 0048 5A60     		str	r2, [r3, #4]
4969:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			{
 5707              		.loc 1 4969 0
 5708 004a BA68     		ldr	r2, [r7, #8]
 5709 004c FB68     		ldr	r3, [r7, #12]
 5710 004e 9A42     		cmp	r2, r3
 5711 0050 09D2     		bcs	.L425
4973:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 			}
 5712              		.loc 1 4973 0
 5713 0052 124B     		ldr	r3, .L427+12
 5714 0054 1A68     		ldr	r2, [r3]
 5715 0056 0F4B     		ldr	r3, .L427+4
 5716 0058 1B68     		ldr	r3, [r3]
 5717 005a 0433     		adds	r3, r3, #4
 5718 005c 1946     		mov	r1, r3
 5719 005e 1046     		mov	r0, r2
 5720 0060 FFF7FEFF 		bl	vListInsert
 5721              		.loc 1 5032 0
 5722 0064 10E0     		b	.L426
 5723              	.L425:
4979:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 
 5724              		.loc 1 4979 0
 5725 0066 0E4B     		ldr	r3, .L427+16
 5726 0068 1A68     		ldr	r2, [r3]
 5727 006a 0A4B     		ldr	r3, .L427+4
 5728 006c 1B68     		ldr	r3, [r3]
 5729 006e 0433     		adds	r3, r3, #4
 5730 0070 1946     		mov	r1, r3
 5731 0072 1046     		mov	r0, r2
 5732 0074 FFF7FEFF 		bl	vListInsert
4984:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				{
 5733              		.loc 1 4984 0
 5734 0078 0A4B     		ldr	r3, .L427+20
 5735 007a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 195


 5736 007c BA68     		ldr	r2, [r7, #8]
 5737 007e 9A42     		cmp	r2, r3
 5738 0080 02D2     		bcs	.L426
4986:Generated_Source\PSoC6\pdl\rtos\FreeRTOS\10.0.1\Source/tasks.c **** 				}
 5739              		.loc 1 4986 0
 5740 0082 084A     		ldr	r2, .L427+20
 5741 0084 BB68     		ldr	r3, [r7, #8]
 5742 0086 1360     		str	r3, [r2]
 5743              	.L426:
 5744              		.loc 1 5032 0
 5745 0088 00BF     		nop
 5746 008a 1037     		adds	r7, r7, #16
 5747              		.cfi_def_cfa_offset 8
 5748 008c BD46     		mov	sp, r7
 5749              		.cfi_def_cfa_register 13
 5750              		@ sp needed
 5751 008e 80BD     		pop	{r7, pc}
 5752              	.L428:
 5753              		.align	2
 5754              	.L427:
 5755 0090 04010000 		.word	xTickCount
 5756 0094 00000000 		.word	pxCurrentTCB
 5757 0098 EC000000 		.word	xSuspendedTaskList
 5758 009c BC000000 		.word	pxOverflowDelayedTaskList
 5759 00a0 B8000000 		.word	pxDelayedTaskList
 5760 00a4 20010000 		.word	xNextTaskUnblockTime
 5761              		.cfi_endproc
 5762              	.LFE184:
 5763              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5764              		.text
 5765              	.Letext0:
 5766              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5767              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5768              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 5769              		.file 6 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/10.0.1/Source/include/projdefs.h"
 5770              		.file 7 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/10.0.1/Source/include/list.h"
 5771              		.file 8 "Generated_Source\\PSoC6\\pdl\\rtos/FreeRTOS/10.0.1/Source/include/task.h"
 5772              		.file 9 "Generated_Source\\PSoC6\\pdl\\cmsis/include/core_cm4.h"
 5773              		.section	.debug_info,"",%progbits
 5774              	.Ldebug_info0:
 5775 0000 EB190000 		.4byte	0x19eb
 5776 0004 0400     		.2byte	0x4
 5777 0006 00000000 		.4byte	.Ldebug_abbrev0
 5778 000a 04       		.byte	0x4
 5779 000b 01       		.uleb128 0x1
 5780 000c 850C0000 		.4byte	.LASF204
 5781 0010 0C       		.byte	0xc
 5782 0011 28050000 		.4byte	.LASF205
 5783 0015 D8030000 		.4byte	.LASF206
 5784 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5785 001d 00000000 		.4byte	0
 5786 0021 00000000 		.4byte	.Ldebug_line0
 5787 0025 02       		.uleb128 0x2
 5788 0026 5C000000 		.4byte	.LASF4
 5789 002a 03       		.byte	0x3
 5790 002b D8       		.byte	0xd8
 5791 002c 30000000 		.4byte	0x30
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 196


 5792 0030 03       		.uleb128 0x3
 5793 0031 04       		.byte	0x4
 5794 0032 07       		.byte	0x7
 5795 0033 620A0000 		.4byte	.LASF0
 5796 0037 04       		.uleb128 0x4
 5797 0038 04       		.byte	0x4
 5798 0039 05       		.byte	0x5
 5799 003a 696E7400 		.ascii	"int\000"
 5800 003e 03       		.uleb128 0x3
 5801 003f 08       		.byte	0x8
 5802 0040 05       		.byte	0x5
 5803 0041 F3010000 		.4byte	.LASF1
 5804 0045 03       		.uleb128 0x3
 5805 0046 08       		.byte	0x8
 5806 0047 04       		.byte	0x4
 5807 0048 000A0000 		.4byte	.LASF2
 5808 004c 03       		.uleb128 0x3
 5809 004d 01       		.byte	0x1
 5810 004e 06       		.byte	0x6
 5811 004f DD000000 		.4byte	.LASF3
 5812 0053 02       		.uleb128 0x2
 5813 0054 E9000000 		.4byte	.LASF5
 5814 0058 04       		.byte	0x4
 5815 0059 1D       		.byte	0x1d
 5816 005a 5E000000 		.4byte	0x5e
 5817 005e 03       		.uleb128 0x3
 5818 005f 01       		.byte	0x1
 5819 0060 08       		.byte	0x8
 5820 0061 79080000 		.4byte	.LASF6
 5821 0065 03       		.uleb128 0x3
 5822 0066 02       		.byte	0x2
 5823 0067 05       		.byte	0x5
 5824 0068 B3080000 		.4byte	.LASF7
 5825 006c 02       		.uleb128 0x2
 5826 006d 6F0A0000 		.4byte	.LASF8
 5827 0071 04       		.byte	0x4
 5828 0072 2B       		.byte	0x2b
 5829 0073 77000000 		.4byte	0x77
 5830 0077 03       		.uleb128 0x3
 5831 0078 02       		.byte	0x2
 5832 0079 07       		.byte	0x7
 5833 007a AA050000 		.4byte	.LASF9
 5834 007e 02       		.uleb128 0x2
 5835 007f C20A0000 		.4byte	.LASF10
 5836 0083 04       		.byte	0x4
 5837 0084 3F       		.byte	0x3f
 5838 0085 89000000 		.4byte	0x89
 5839 0089 03       		.uleb128 0x3
 5840 008a 04       		.byte	0x4
 5841 008b 05       		.byte	0x5
 5842 008c 2B010000 		.4byte	.LASF11
 5843 0090 02       		.uleb128 0x2
 5844 0091 65040000 		.4byte	.LASF12
 5845 0095 04       		.byte	0x4
 5846 0096 41       		.byte	0x41
 5847 0097 9B000000 		.4byte	0x9b
 5848 009b 03       		.uleb128 0x3
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 197


 5849 009c 04       		.byte	0x4
 5850 009d 07       		.byte	0x7
 5851 009e 16050000 		.4byte	.LASF13
 5852 00a2 03       		.uleb128 0x3
 5853 00a3 08       		.byte	0x8
 5854 00a4 07       		.byte	0x7
 5855 00a5 57010000 		.4byte	.LASF14
 5856 00a9 03       		.uleb128 0x3
 5857 00aa 04       		.byte	0x4
 5858 00ab 07       		.byte	0x7
 5859 00ac 310C0000 		.4byte	.LASF15
 5860 00b0 05       		.uleb128 0x5
 5861 00b1 04       		.byte	0x4
 5862 00b2 06       		.uleb128 0x6
 5863 00b3 04       		.byte	0x4
 5864 00b4 B8000000 		.4byte	0xb8
 5865 00b8 03       		.uleb128 0x3
 5866 00b9 01       		.byte	0x1
 5867 00ba 08       		.byte	0x8
 5868 00bb 2B0A0000 		.4byte	.LASF16
 5869 00bf 06       		.uleb128 0x6
 5870 00c0 04       		.byte	0x4
 5871 00c1 C5000000 		.4byte	0xc5
 5872 00c5 07       		.uleb128 0x7
 5873 00c6 B8000000 		.4byte	0xb8
 5874 00ca 02       		.uleb128 0x2
 5875 00cb 010C0000 		.4byte	.LASF17
 5876 00cf 05       		.byte	0x5
 5877 00d0 18       		.byte	0x18
 5878 00d1 53000000 		.4byte	0x53
 5879 00d5 02       		.uleb128 0x2
 5880 00d6 59030000 		.4byte	.LASF18
 5881 00da 05       		.byte	0x5
 5882 00db 24       		.byte	0x24
 5883 00dc 6C000000 		.4byte	0x6c
 5884 00e0 02       		.uleb128 0x2
 5885 00e1 75050000 		.4byte	.LASF19
 5886 00e5 05       		.byte	0x5
 5887 00e6 2C       		.byte	0x2c
 5888 00e7 7E000000 		.4byte	0x7e
 5889 00eb 02       		.uleb128 0x2
 5890 00ec E7090000 		.4byte	.LASF20
 5891 00f0 05       		.byte	0x5
 5892 00f1 30       		.byte	0x30
 5893 00f2 90000000 		.4byte	0x90
 5894 00f6 08       		.uleb128 0x8
 5895 00f7 EB000000 		.4byte	0xeb
 5896 00fb 08       		.uleb128 0x8
 5897 00fc CA000000 		.4byte	0xca
 5898 0100 03       		.uleb128 0x3
 5899 0101 04       		.byte	0x4
 5900 0102 04       		.byte	0x4
 5901 0103 25080000 		.4byte	.LASF21
 5902 0107 03       		.uleb128 0x3
 5903 0108 08       		.byte	0x8
 5904 0109 04       		.byte	0x4
 5905 010a 62030000 		.4byte	.LASF22
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 198


 5906 010e 02       		.uleb128 0x2
 5907 010f 1A090000 		.4byte	.LASF23
 5908 0113 06       		.byte	0x6
 5909 0114 23       		.byte	0x23
 5910 0115 19010000 		.4byte	0x119
 5911 0119 06       		.uleb128 0x6
 5912 011a 04       		.byte	0x4
 5913 011b 1F010000 		.4byte	0x11f
 5914 011f 09       		.uleb128 0x9
 5915 0120 2A010000 		.4byte	0x12a
 5916 0124 0A       		.uleb128 0xa
 5917 0125 B0000000 		.4byte	0xb0
 5918 0129 00       		.byte	0
 5919 012a 02       		.uleb128 0x2
 5920 012b BD050000 		.4byte	.LASF24
 5921 012f 02       		.byte	0x2
 5922 0130 37       		.byte	0x37
 5923 0131 EB000000 		.4byte	0xeb
 5924 0135 02       		.uleb128 0x2
 5925 0136 69030000 		.4byte	.LASF25
 5926 013a 02       		.byte	0x2
 5927 013b 38       		.byte	0x38
 5928 013c 89000000 		.4byte	0x89
 5929 0140 02       		.uleb128 0x2
 5930 0141 BA0D0000 		.4byte	.LASF26
 5931 0145 02       		.byte	0x2
 5932 0146 39       		.byte	0x39
 5933 0147 9B000000 		.4byte	0x9b
 5934 014b 02       		.uleb128 0x2
 5935 014c 3F030000 		.4byte	.LASF27
 5936 0150 02       		.byte	0x2
 5937 0151 3F       		.byte	0x3f
 5938 0152 EB000000 		.4byte	0xeb
 5939 0156 0B       		.uleb128 0xb
 5940 0157 B0000000 		.4byte	0xb0
 5941 015b 66010000 		.4byte	0x166
 5942 015f 0C       		.uleb128 0xc
 5943 0160 A9000000 		.4byte	0xa9
 5944 0164 04       		.byte	0x4
 5945 0165 00       		.byte	0
 5946 0166 0D       		.uleb128 0xd
 5947 0167 7A0C0000 		.4byte	.LASF34
 5948 016b 14       		.byte	0x14
 5949 016c 07       		.byte	0x7
 5950 016d 8B       		.byte	0x8b
 5951 016e AF010000 		.4byte	0x1af
 5952 0172 0E       		.uleb128 0xe
 5953 0173 570A0000 		.4byte	.LASF28
 5954 0177 07       		.byte	0x7
 5955 0178 8E       		.byte	0x8e
 5956 0179 4B010000 		.4byte	0x14b
 5957 017d 00       		.byte	0
 5958 017e 0E       		.uleb128 0xe
 5959 017f 3A0C0000 		.4byte	.LASF29
 5960 0183 07       		.byte	0x7
 5961 0184 8F       		.byte	0x8f
 5962 0185 AF010000 		.4byte	0x1af
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 199


 5963 0189 04       		.byte	0x4
 5964 018a 0E       		.uleb128 0xe
 5965 018b 04080000 		.4byte	.LASF30
 5966 018f 07       		.byte	0x7
 5967 0190 90       		.byte	0x90
 5968 0191 AF010000 		.4byte	0x1af
 5969 0195 08       		.byte	0x8
 5970 0196 0E       		.uleb128 0xe
 5971 0197 A7040000 		.4byte	.LASF31
 5972 019b 07       		.byte	0x7
 5973 019c 91       		.byte	0x91
 5974 019d B0000000 		.4byte	0xb0
 5975 01a1 0C       		.byte	0xc
 5976 01a2 0E       		.uleb128 0xe
 5977 01a3 44080000 		.4byte	.LASF32
 5978 01a7 07       		.byte	0x7
 5979 01a8 92       		.byte	0x92
 5980 01a9 B0000000 		.4byte	0xb0
 5981 01ad 10       		.byte	0x10
 5982 01ae 00       		.byte	0
 5983 01af 06       		.uleb128 0x6
 5984 01b0 04       		.byte	0x4
 5985 01b1 66010000 		.4byte	0x166
 5986 01b5 02       		.uleb128 0x2
 5987 01b6 D6070000 		.4byte	.LASF33
 5988 01ba 07       		.byte	0x7
 5989 01bb 95       		.byte	0x95
 5990 01bc 66010000 		.4byte	0x166
 5991 01c0 0D       		.uleb128 0xd
 5992 01c1 BF010000 		.4byte	.LASF35
 5993 01c5 0C       		.byte	0xc
 5994 01c6 07       		.byte	0x7
 5995 01c7 97       		.byte	0x97
 5996 01c8 F1010000 		.4byte	0x1f1
 5997 01cc 0E       		.uleb128 0xe
 5998 01cd 570A0000 		.4byte	.LASF28
 5999 01d1 07       		.byte	0x7
 6000 01d2 9A       		.byte	0x9a
 6001 01d3 4B010000 		.4byte	0x14b
 6002 01d7 00       		.byte	0
 6003 01d8 0E       		.uleb128 0xe
 6004 01d9 3A0C0000 		.4byte	.LASF29
 6005 01dd 07       		.byte	0x7
 6006 01de 9B       		.byte	0x9b
 6007 01df AF010000 		.4byte	0x1af
 6008 01e3 04       		.byte	0x4
 6009 01e4 0E       		.uleb128 0xe
 6010 01e5 04080000 		.4byte	.LASF30
 6011 01e9 07       		.byte	0x7
 6012 01ea 9C       		.byte	0x9c
 6013 01eb AF010000 		.4byte	0x1af
 6014 01ef 08       		.byte	0x8
 6015 01f0 00       		.byte	0
 6016 01f1 02       		.uleb128 0x2
 6017 01f2 63000000 		.4byte	.LASF36
 6018 01f6 07       		.byte	0x7
 6019 01f7 9E       		.byte	0x9e
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 200


 6020 01f8 C0010000 		.4byte	0x1c0
 6021 01fc 0D       		.uleb128 0xd
 6022 01fd 29090000 		.4byte	.LASF37
 6023 0201 14       		.byte	0x14
 6024 0202 07       		.byte	0x7
 6025 0203 A3       		.byte	0xa3
 6026 0204 2D020000 		.4byte	0x22d
 6027 0208 0E       		.uleb128 0xe
 6028 0209 06050000 		.4byte	.LASF38
 6029 020d 07       		.byte	0x7
 6030 020e A6       		.byte	0xa6
 6031 020f 2D020000 		.4byte	0x22d
 6032 0213 00       		.byte	0
 6033 0214 0E       		.uleb128 0xe
 6034 0215 97010000 		.4byte	.LASF39
 6035 0219 07       		.byte	0x7
 6036 021a A7       		.byte	0xa7
 6037 021b 32020000 		.4byte	0x232
 6038 021f 04       		.byte	0x4
 6039 0220 0E       		.uleb128 0xe
 6040 0221 9F010000 		.4byte	.LASF40
 6041 0225 07       		.byte	0x7
 6042 0226 A8       		.byte	0xa8
 6043 0227 F1010000 		.4byte	0x1f1
 6044 022b 08       		.byte	0x8
 6045 022c 00       		.byte	0
 6046 022d 08       		.uleb128 0x8
 6047 022e 40010000 		.4byte	0x140
 6048 0232 06       		.uleb128 0x6
 6049 0233 04       		.byte	0x4
 6050 0234 B5010000 		.4byte	0x1b5
 6051 0238 02       		.uleb128 0x2
 6052 0239 70090000 		.4byte	.LASF41
 6053 023d 07       		.byte	0x7
 6054 023e AA       		.byte	0xaa
 6055 023f FC010000 		.4byte	0x1fc
 6056 0243 02       		.uleb128 0x2
 6057 0244 2A030000 		.4byte	.LASF42
 6058 0248 08       		.byte	0x8
 6059 0249 3D       		.byte	0x3d
 6060 024a B0000000 		.4byte	0xb0
 6061 024e 0F       		.uleb128 0xf
 6062 024f 01       		.byte	0x1
 6063 0250 5E000000 		.4byte	0x5e
 6064 0254 08       		.byte	0x8
 6065 0255 52       		.byte	0x52
 6066 0256 79020000 		.4byte	0x279
 6067 025a 10       		.uleb128 0x10
 6068 025b 270C0000 		.4byte	.LASF43
 6069 025f 00       		.byte	0
 6070 0260 10       		.uleb128 0x10
 6071 0261 860A0000 		.4byte	.LASF44
 6072 0265 01       		.byte	0x1
 6073 0266 10       		.uleb128 0x10
 6074 0267 C4060000 		.4byte	.LASF45
 6075 026b 02       		.byte	0x2
 6076 026c 10       		.uleb128 0x10
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 201


 6077 026d 8C070000 		.4byte	.LASF46
 6078 0271 03       		.byte	0x3
 6079 0272 10       		.uleb128 0x10
 6080 0273 DC0B0000 		.4byte	.LASF47
 6081 0277 04       		.byte	0x4
 6082 0278 00       		.byte	0
 6083 0279 02       		.uleb128 0x2
 6084 027a 01020000 		.4byte	.LASF48
 6085 027e 08       		.byte	0x8
 6086 027f 58       		.byte	0x58
 6087 0280 4E020000 		.4byte	0x24e
 6088 0284 0D       		.uleb128 0xd
 6089 0285 B5010000 		.4byte	.LASF49
 6090 0289 08       		.byte	0x8
 6091 028a 08       		.byte	0x8
 6092 028b 5D       		.byte	0x5d
 6093 028c A9020000 		.4byte	0x2a9
 6094 0290 0E       		.uleb128 0xe
 6095 0291 00000000 		.4byte	.LASF50
 6096 0295 08       		.byte	0x8
 6097 0296 5F       		.byte	0x5f
 6098 0297 35010000 		.4byte	0x135
 6099 029b 00       		.byte	0
 6100 029c 0E       		.uleb128 0xe
 6101 029d C9040000 		.4byte	.LASF51
 6102 02a1 08       		.byte	0x8
 6103 02a2 60       		.byte	0x60
 6104 02a3 4B010000 		.4byte	0x14b
 6105 02a7 04       		.byte	0x4
 6106 02a8 00       		.byte	0
 6107 02a9 02       		.uleb128 0x2
 6108 02aa 72000000 		.4byte	.LASF52
 6109 02ae 08       		.byte	0x8
 6110 02af 61       		.byte	0x61
 6111 02b0 84020000 		.4byte	0x284
 6112 02b4 0D       		.uleb128 0xd
 6113 02b5 4F060000 		.4byte	.LASF53
 6114 02b9 0C       		.byte	0xc
 6115 02ba 08       		.byte	0x8
 6116 02bb 66       		.byte	0x66
 6117 02bc E5020000 		.4byte	0x2e5
 6118 02c0 0E       		.uleb128 0xe
 6119 02c1 86020000 		.4byte	.LASF54
 6120 02c5 08       		.byte	0x8
 6121 02c6 68       		.byte	0x68
 6122 02c7 B0000000 		.4byte	0xb0
 6123 02cb 00       		.byte	0
 6124 02cc 0E       		.uleb128 0xe
 6125 02cd B6070000 		.4byte	.LASF55
 6126 02d1 08       		.byte	0x8
 6127 02d2 69       		.byte	0x69
 6128 02d3 EB000000 		.4byte	0xeb
 6129 02d7 04       		.byte	0x4
 6130 02d8 0E       		.uleb128 0xe
 6131 02d9 F8060000 		.4byte	.LASF56
 6132 02dd 08       		.byte	0x8
 6133 02de 6A       		.byte	0x6a
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 202


 6134 02df EB000000 		.4byte	0xeb
 6135 02e3 08       		.byte	0x8
 6136 02e4 00       		.byte	0
 6137 02e5 02       		.uleb128 0x2
 6138 02e6 4A030000 		.4byte	.LASF57
 6139 02ea 08       		.byte	0x8
 6140 02eb 6B       		.byte	0x6b
 6141 02ec B4020000 		.4byte	0x2b4
 6142 02f0 07       		.uleb128 0x7
 6143 02f1 BF000000 		.4byte	0xbf
 6144 02f5 06       		.uleb128 0x6
 6145 02f6 04       		.byte	0x4
 6146 02f7 2A010000 		.4byte	0x12a
 6147 02fb 11       		.uleb128 0x11
 6148 02fc C4020000 		.4byte	.LASF58
 6149 0300 60       		.byte	0x60
 6150 0301 01       		.byte	0x1
 6151 0302 0D01     		.2byte	0x10d
 6152 0304 7E030000 		.4byte	0x37e
 6153 0308 12       		.uleb128 0x12
 6154 0309 7D050000 		.4byte	.LASF59
 6155 030d 01       		.byte	0x1
 6156 030e 0F01     		.2byte	0x10f
 6157 0310 7E030000 		.4byte	0x37e
 6158 0314 00       		.byte	0
 6159 0315 12       		.uleb128 0x12
 6160 0316 5F020000 		.4byte	.LASF60
 6161 031a 01       		.byte	0x1
 6162 031b 1501     		.2byte	0x115
 6163 031d B5010000 		.4byte	0x1b5
 6164 0321 04       		.byte	0x4
 6165 0322 12       		.uleb128 0x12
 6166 0323 6E010000 		.4byte	.LASF61
 6167 0327 01       		.byte	0x1
 6168 0328 1601     		.2byte	0x116
 6169 032a B5010000 		.4byte	0x1b5
 6170 032e 18       		.byte	0x18
 6171 032f 12       		.uleb128 0x12
 6172 0330 380D0000 		.4byte	.LASF62
 6173 0334 01       		.byte	0x1
 6174 0335 1701     		.2byte	0x117
 6175 0337 40010000 		.4byte	0x140
 6176 033b 2C       		.byte	0x2c
 6177 033c 12       		.uleb128 0x12
 6178 033d 37030000 		.4byte	.LASF63
 6179 0341 01       		.byte	0x1
 6180 0342 1801     		.2byte	0x118
 6181 0344 F5020000 		.4byte	0x2f5
 6182 0348 30       		.byte	0x30
 6183 0349 12       		.uleb128 0x12
 6184 034a F60B0000 		.4byte	.LASF64
 6185 034e 01       		.byte	0x1
 6186 034f 1901     		.2byte	0x119
 6187 0351 89030000 		.4byte	0x389
 6188 0355 34       		.byte	0x34
 6189 0356 12       		.uleb128 0x12
 6190 0357 94020000 		.4byte	.LASF65
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 203


 6191 035b 01       		.byte	0x1
 6192 035c 3201     		.2byte	0x132
 6193 035e 56010000 		.4byte	0x156
 6194 0362 44       		.byte	0x44
 6195 0363 12       		.uleb128 0x12
 6196 0364 87080000 		.4byte	.LASF66
 6197 0368 01       		.byte	0x1
 6198 0369 4501     		.2byte	0x145
 6199 036b F6000000 		.4byte	0xf6
 6200 036f 58       		.byte	0x58
 6201 0370 12       		.uleb128 0x12
 6202 0371 5F080000 		.4byte	.LASF67
 6203 0375 01       		.byte	0x1
 6204 0376 4601     		.2byte	0x146
 6205 0378 FB000000 		.4byte	0xfb
 6206 037c 5C       		.byte	0x5c
 6207 037d 00       		.byte	0
 6208 037e 06       		.uleb128 0x6
 6209 037f 04       		.byte	0x4
 6210 0380 84030000 		.4byte	0x384
 6211 0384 08       		.uleb128 0x8
 6212 0385 2A010000 		.4byte	0x12a
 6213 0389 0B       		.uleb128 0xb
 6214 038a B8000000 		.4byte	0xb8
 6215 038e 99030000 		.4byte	0x399
 6216 0392 0C       		.uleb128 0xc
 6217 0393 A9000000 		.4byte	0xa9
 6218 0397 0F       		.byte	0xf
 6219 0398 00       		.byte	0
 6220 0399 13       		.uleb128 0x13
 6221 039a 97050000 		.4byte	.LASF68
 6222 039e 01       		.byte	0x1
 6223 039f 5301     		.2byte	0x153
 6224 03a1 FB020000 		.4byte	0x2fb
 6225 03a5 13       		.uleb128 0x13
 6226 03a6 AD080000 		.4byte	.LASF69
 6227 03aa 01       		.byte	0x1
 6228 03ab 5701     		.2byte	0x157
 6229 03ad 99030000 		.4byte	0x399
 6230 03b1 14       		.uleb128 0x14
 6231 03b2 6B060000 		.4byte	.LASF72
 6232 03b6 02       		.byte	0x2
 6233 03b7 98       		.byte	0x98
 6234 03b8 03       		.byte	0x3
 6235 03b9 C9030000 		.4byte	0x3c9
 6236 03bd 15       		.uleb128 0x15
 6237 03be 4A010000 		.4byte	.LASF70
 6238 03c2 02       		.byte	0x2
 6239 03c3 9A       		.byte	0x9a
 6240 03c4 EB000000 		.4byte	0xeb
 6241 03c8 00       		.byte	0
 6242 03c9 16       		.uleb128 0x16
 6243 03ca B1020000 		.4byte	.LASF207
 6244 03ce 02       		.byte	0x2
 6245 03cf A8       		.byte	0xa8
 6246 03d0 EB000000 		.4byte	0xeb
 6247 03d4 03       		.byte	0x3
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 204


 6248 03d5 F0030000 		.4byte	0x3f0
 6249 03d9 15       		.uleb128 0x15
 6250 03da 25000000 		.4byte	.LASF71
 6251 03de 02       		.byte	0x2
 6252 03df AA       		.byte	0xaa
 6253 03e0 EB000000 		.4byte	0xeb
 6254 03e4 15       		.uleb128 0x15
 6255 03e5 4A010000 		.4byte	.LASF70
 6256 03e9 02       		.byte	0x2
 6257 03ea AA       		.byte	0xaa
 6258 03eb EB000000 		.4byte	0xeb
 6259 03ef 00       		.byte	0
 6260 03f0 14       		.uleb128 0x14
 6261 03f1 C6070000 		.4byte	.LASF73
 6262 03f5 02       		.byte	0x2
 6263 03f6 BC       		.byte	0xbc
 6264 03f7 03       		.byte	0x3
 6265 03f8 08040000 		.4byte	0x408
 6266 03fc 17       		.uleb128 0x17
 6267 03fd 85040000 		.4byte	.LASF208
 6268 0401 02       		.byte	0x2
 6269 0402 BC       		.byte	0xbc
 6270 0403 EB000000 		.4byte	0xeb
 6271 0407 00       		.byte	0
 6272 0408 18       		.uleb128 0x18
 6273 0409 50000000 		.4byte	.LASF97
 6274 040d 01       		.byte	0x1
 6275 040e DC02     		.2byte	0x2dc
 6276 0410 35010000 		.4byte	0x135
 6277 0414 00000000 		.4byte	.LFB136
 6278 0418 82000000 		.4byte	.LFE136-.LFB136
 6279 041c 01       		.uleb128 0x1
 6280 041d 9C       		.byte	0x9c
 6281 041e B4040000 		.4byte	0x4b4
 6282 0422 19       		.uleb128 0x19
 6283 0423 4C070000 		.4byte	.LASF74
 6284 0427 01       		.byte	0x1
 6285 0428 DC02     		.2byte	0x2dc
 6286 042a 0E010000 		.4byte	0x10e
 6287 042e 02       		.uleb128 0x2
 6288 042f 91       		.byte	0x91
 6289 0430 64       		.sleb128 -28
 6290 0431 19       		.uleb128 0x19
 6291 0432 780D0000 		.4byte	.LASF75
 6292 0436 01       		.byte	0x1
 6293 0437 DD02     		.2byte	0x2dd
 6294 0439 F0020000 		.4byte	0x2f0
 6295 043d 02       		.uleb128 0x2
 6296 043e 91       		.byte	0x91
 6297 043f 60       		.sleb128 -32
 6298 0440 19       		.uleb128 0x19
 6299 0441 AD030000 		.4byte	.LASF76
 6300 0445 01       		.byte	0x1
 6301 0446 DE02     		.2byte	0x2de
 6302 0448 B4040000 		.4byte	0x4b4
 6303 044c 02       		.uleb128 0x2
 6304 044d 91       		.byte	0x91
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 205


 6305 044e 5E       		.sleb128 -34
 6306 044f 19       		.uleb128 0x19
 6307 0450 8A050000 		.4byte	.LASF77
 6308 0454 01       		.byte	0x1
 6309 0455 DF02     		.2byte	0x2df
 6310 0457 B9040000 		.4byte	0x4b9
 6311 045b 02       		.uleb128 0x2
 6312 045c 91       		.byte	0x91
 6313 045d 58       		.sleb128 -40
 6314 045e 19       		.uleb128 0x19
 6315 045f 380D0000 		.4byte	.LASF62
 6316 0463 01       		.byte	0x1
 6317 0464 E002     		.2byte	0x2e0
 6318 0466 40010000 		.4byte	0x140
 6319 046a 02       		.uleb128 0x2
 6320 046b 91       		.byte	0x91
 6321 046c 00       		.sleb128 0
 6322 046d 19       		.uleb128 0x19
 6323 046e F8040000 		.4byte	.LASF78
 6324 0472 01       		.byte	0x1
 6325 0473 E102     		.2byte	0x2e1
 6326 0475 C4040000 		.4byte	0x4c4
 6327 0479 02       		.uleb128 0x2
 6328 047a 91       		.byte	0x91
 6329 047b 04       		.sleb128 4
 6330 047c 1A       		.uleb128 0x1a
 6331 047d D8020000 		.4byte	.LASF79
 6332 0481 01       		.byte	0x1
 6333 0482 E302     		.2byte	0x2e3
 6334 0484 C9040000 		.4byte	0x4c9
 6335 0488 02       		.uleb128 0x2
 6336 0489 91       		.byte	0x91
 6337 048a 74       		.sleb128 -12
 6338 048b 1A       		.uleb128 0x1a
 6339 048c AF040000 		.4byte	.LASF80
 6340 0490 01       		.byte	0x1
 6341 0491 E402     		.2byte	0x2e4
 6342 0493 35010000 		.4byte	0x135
 6343 0497 02       		.uleb128 0x2
 6344 0498 91       		.byte	0x91
 6345 0499 70       		.sleb128 -16
 6346 049a 1B       		.uleb128 0x1b
 6347 049b 10000000 		.4byte	.LBB94
 6348 049f 34000000 		.4byte	.LBE94-.LBB94
 6349 04a3 1A       		.uleb128 0x1a
 6350 04a4 37030000 		.4byte	.LASF63
 6351 04a8 01       		.byte	0x1
 6352 04a9 0103     		.2byte	0x301
 6353 04ab F5020000 		.4byte	0x2f5
 6354 04af 02       		.uleb128 0x2
 6355 04b0 91       		.byte	0x91
 6356 04b1 6C       		.sleb128 -20
 6357 04b2 00       		.byte	0
 6358 04b3 00       		.byte	0
 6359 04b4 07       		.uleb128 0x7
 6360 04b5 D5000000 		.4byte	0xd5
 6361 04b9 07       		.uleb128 0x7
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 206


 6362 04ba B0000000 		.4byte	0xb0
 6363 04be 06       		.uleb128 0x6
 6364 04bf 04       		.byte	0x4
 6365 04c0 43020000 		.4byte	0x243
 6366 04c4 07       		.uleb128 0x7
 6367 04c5 BE040000 		.4byte	0x4be
 6368 04c9 06       		.uleb128 0x6
 6369 04ca 04       		.byte	0x4
 6370 04cb A5030000 		.4byte	0x3a5
 6371 04cf 1C       		.uleb128 0x1c
 6372 04d0 77090000 		.4byte	.LASF83
 6373 04d4 01       		.byte	0x1
 6374 04d5 3703     		.2byte	0x337
 6375 04d7 00000000 		.4byte	.LFB137
 6376 04db 20010000 		.4byte	.LFE137-.LFB137
 6377 04df 01       		.uleb128 0x1
 6378 04e0 9C       		.byte	0x9c
 6379 04e1 9D050000 		.4byte	0x59d
 6380 04e5 19       		.uleb128 0x19
 6381 04e6 4C070000 		.4byte	.LASF74
 6382 04ea 01       		.byte	0x1
 6383 04eb 3703     		.2byte	0x337
 6384 04ed 0E010000 		.4byte	0x10e
 6385 04f1 02       		.uleb128 0x2
 6386 04f2 91       		.byte	0x91
 6387 04f3 64       		.sleb128 -28
 6388 04f4 19       		.uleb128 0x19
 6389 04f5 780D0000 		.4byte	.LASF75
 6390 04f9 01       		.byte	0x1
 6391 04fa 3803     		.2byte	0x338
 6392 04fc F0020000 		.4byte	0x2f0
 6393 0500 02       		.uleb128 0x2
 6394 0501 91       		.byte	0x91
 6395 0502 60       		.sleb128 -32
 6396 0503 19       		.uleb128 0x19
 6397 0504 57070000 		.4byte	.LASF81
 6398 0508 01       		.byte	0x1
 6399 0509 3903     		.2byte	0x339
 6400 050b 9D050000 		.4byte	0x59d
 6401 050f 02       		.uleb128 0x2
 6402 0510 91       		.byte	0x91
 6403 0511 5C       		.sleb128 -36
 6404 0512 19       		.uleb128 0x19
 6405 0513 8A050000 		.4byte	.LASF77
 6406 0517 01       		.byte	0x1
 6407 0518 3A03     		.2byte	0x33a
 6408 051a B9040000 		.4byte	0x4b9
 6409 051e 02       		.uleb128 0x2
 6410 051f 91       		.byte	0x91
 6411 0520 58       		.sleb128 -40
 6412 0521 19       		.uleb128 0x19
 6413 0522 380D0000 		.4byte	.LASF62
 6414 0526 01       		.byte	0x1
 6415 0527 3B03     		.2byte	0x33b
 6416 0529 40010000 		.4byte	0x140
 6417 052d 02       		.uleb128 0x2
 6418 052e 91       		.byte	0x91
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 207


 6419 052f 00       		.sleb128 0
 6420 0530 19       		.uleb128 0x19
 6421 0531 F8040000 		.4byte	.LASF78
 6422 0535 01       		.byte	0x1
 6423 0536 3C03     		.2byte	0x33c
 6424 0538 C4040000 		.4byte	0x4c4
 6425 053c 02       		.uleb128 0x2
 6426 053d 91       		.byte	0x91
 6427 053e 04       		.sleb128 4
 6428 053f 19       		.uleb128 0x19
 6429 0540 D8020000 		.4byte	.LASF79
 6430 0544 01       		.byte	0x1
 6431 0545 3D03     		.2byte	0x33d
 6432 0547 C9040000 		.4byte	0x4c9
 6433 054b 02       		.uleb128 0x2
 6434 054c 91       		.byte	0x91
 6435 054d 08       		.sleb128 8
 6436 054e 19       		.uleb128 0x19
 6437 054f 05070000 		.4byte	.LASF82
 6438 0553 01       		.byte	0x1
 6439 0554 3E03     		.2byte	0x33e
 6440 0556 AD050000 		.4byte	0x5ad
 6441 055a 02       		.uleb128 0x2
 6442 055b 91       		.byte	0x91
 6443 055c 0C       		.sleb128 12
 6444 055d 1A       		.uleb128 0x1a
 6445 055e 7D050000 		.4byte	.LASF59
 6446 0562 01       		.byte	0x1
 6447 0563 4003     		.2byte	0x340
 6448 0565 F5020000 		.4byte	0x2f5
 6449 0569 02       		.uleb128 0x2
 6450 056a 91       		.byte	0x91
 6451 056b 70       		.sleb128 -16
 6452 056c 1D       		.uleb128 0x1d
 6453 056d 7800     		.ascii	"x\000"
 6454 056f 01       		.byte	0x1
 6455 0570 4103     		.2byte	0x341
 6456 0572 40010000 		.4byte	0x140
 6457 0576 02       		.uleb128 0x2
 6458 0577 91       		.byte	0x91
 6459 0578 74       		.sleb128 -12
 6460 0579 1E       		.uleb128 0x1e
 6461 057a B1030000 		.4byte	0x3b1
 6462 057e 42000000 		.4byte	.LBB95
 6463 0582 12000000 		.4byte	.LBE95-.LBB95
 6464 0586 01       		.byte	0x1
 6465 0587 6303     		.2byte	0x363
 6466 0589 1B       		.uleb128 0x1b
 6467 058a 42000000 		.4byte	.LBB96
 6468 058e 12000000 		.4byte	.LBE96-.LBB96
 6469 0592 1F       		.uleb128 0x1f
 6470 0593 BD030000 		.4byte	0x3bd
 6471 0597 02       		.uleb128 0x2
 6472 0598 91       		.byte	0x91
 6473 0599 6C       		.sleb128 -20
 6474 059a 00       		.byte	0
 6475 059b 00       		.byte	0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 208


 6476 059c 00       		.byte	0
 6477 059d 07       		.uleb128 0x7
 6478 059e EB000000 		.4byte	0xeb
 6479 05a2 06       		.uleb128 0x6
 6480 05a3 04       		.byte	0x4
 6481 05a4 A8050000 		.4byte	0x5a8
 6482 05a8 07       		.uleb128 0x7
 6483 05a9 E5020000 		.4byte	0x2e5
 6484 05ad 07       		.uleb128 0x7
 6485 05ae A2050000 		.4byte	0x5a2
 6486 05b2 1C       		.uleb128 0x1c
 6487 05b3 F3050000 		.4byte	.LASF84
 6488 05b7 01       		.byte	0x1
 6489 05b8 0304     		.2byte	0x403
 6490 05ba 00000000 		.4byte	.LFB138
 6491 05be D8000000 		.4byte	.LFE138-.LFB138
 6492 05c2 01       		.uleb128 0x1
 6493 05c3 9C       		.byte	0x9c
 6494 05c4 D8050000 		.4byte	0x5d8
 6495 05c8 19       		.uleb128 0x19
 6496 05c9 D8020000 		.4byte	.LASF79
 6497 05cd 01       		.byte	0x1
 6498 05ce 0304     		.2byte	0x403
 6499 05d0 C9040000 		.4byte	0x4c9
 6500 05d4 02       		.uleb128 0x2
 6501 05d5 91       		.byte	0x91
 6502 05d6 74       		.sleb128 -12
 6503 05d7 00       		.byte	0
 6504 05d8 20       		.uleb128 0x20
 6505 05d9 7A0A0000 		.4byte	.LASF87
 6506 05dd 01       		.byte	0x1
 6507 05de 5804     		.2byte	0x458
 6508 05e0 00000000 		.4byte	.LFB139
 6509 05e4 E4000000 		.4byte	.LFE139-.LFB139
 6510 05e8 01       		.uleb128 0x1
 6511 05e9 9C       		.byte	0x9c
 6512 05ea 30060000 		.4byte	0x630
 6513 05ee 19       		.uleb128 0x19
 6514 05ef 0F080000 		.4byte	.LASF85
 6515 05f3 01       		.byte	0x1
 6516 05f4 5804     		.2byte	0x458
 6517 05f6 43020000 		.4byte	0x243
 6518 05fa 02       		.uleb128 0x2
 6519 05fb 91       		.byte	0x91
 6520 05fc 6C       		.sleb128 -20
 6521 05fd 1A       		.uleb128 0x1a
 6522 05fe C9050000 		.4byte	.LASF86
 6523 0602 01       		.byte	0x1
 6524 0603 5A04     		.2byte	0x45a
 6525 0605 C9040000 		.4byte	0x4c9
 6526 0609 02       		.uleb128 0x2
 6527 060a 91       		.byte	0x91
 6528 060b 74       		.sleb128 -12
 6529 060c 1E       		.uleb128 0x1e
 6530 060d B1030000 		.4byte	0x3b1
 6531 0611 96000000 		.4byte	.LBB97
 6532 0615 12000000 		.4byte	.LBE97-.LBB97
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 209


 6533 0619 01       		.byte	0x1
 6534 061a A504     		.2byte	0x4a5
 6535 061c 1B       		.uleb128 0x1b
 6536 061d 96000000 		.4byte	.LBB98
 6537 0621 12000000 		.4byte	.LBE98-.LBB98
 6538 0625 1F       		.uleb128 0x1f
 6539 0626 BD030000 		.4byte	0x3bd
 6540 062a 02       		.uleb128 0x2
 6541 062b 91       		.byte	0x91
 6542 062c 70       		.sleb128 -16
 6543 062d 00       		.byte	0
 6544 062e 00       		.byte	0
 6545 062f 00       		.byte	0
 6546 0630 20       		.uleb128 0x20
 6547 0631 6E020000 		.4byte	.LASF88
 6548 0635 01       		.byte	0x1
 6549 0636 B404     		.2byte	0x4b4
 6550 0638 00000000 		.4byte	.LFB140
 6551 063c F4000000 		.4byte	.LFE140-.LFB140
 6552 0640 01       		.uleb128 0x1
 6553 0641 9C       		.byte	0x9c
 6554 0642 20070000 		.4byte	0x720
 6555 0646 19       		.uleb128 0x19
 6556 0647 64070000 		.4byte	.LASF89
 6557 064b 01       		.byte	0x1
 6558 064c B404     		.2byte	0x4b4
 6559 064e 26070000 		.4byte	0x726
 6560 0652 02       		.uleb128 0x2
 6561 0653 91       		.byte	0x91
 6562 0654 54       		.sleb128 -44
 6563 0655 19       		.uleb128 0x19
 6564 0656 CD0B0000 		.4byte	.LASF90
 6565 065a 01       		.byte	0x1
 6566 065b B404     		.2byte	0x4b4
 6567 065d 2B070000 		.4byte	0x72b
 6568 0661 02       		.uleb128 0x2
 6569 0662 91       		.byte	0x91
 6570 0663 50       		.sleb128 -48
 6571 0664 1A       		.uleb128 0x1a
 6572 0665 6D080000 		.4byte	.LASF91
 6573 0669 01       		.byte	0x1
 6574 066a B604     		.2byte	0x4b6
 6575 066c 4B010000 		.4byte	0x14b
 6576 0670 02       		.uleb128 0x2
 6577 0671 91       		.byte	0x91
 6578 0672 6C       		.sleb128 -20
 6579 0673 1A       		.uleb128 0x1a
 6580 0674 7D010000 		.4byte	.LASF92
 6581 0678 01       		.byte	0x1
 6582 0679 B704     		.2byte	0x4b7
 6583 067b 35010000 		.4byte	0x135
 6584 067f 02       		.uleb128 0x2
 6585 0680 91       		.byte	0x91
 6586 0681 68       		.sleb128 -24
 6587 0682 1A       		.uleb128 0x1a
 6588 0683 BA090000 		.4byte	.LASF93
 6589 0687 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 210


 6590 0688 B704     		.2byte	0x4b7
 6591 068a 35010000 		.4byte	0x135
 6592 068e 02       		.uleb128 0x2
 6593 068f 91       		.byte	0x91
 6594 0690 74       		.sleb128 -12
 6595 0691 21       		.uleb128 0x21
 6596 0692 B1030000 		.4byte	0x3b1
 6597 0696 14000000 		.4byte	.LBB99
 6598 069a 12000000 		.4byte	.LBE99-.LBB99
 6599 069e 01       		.byte	0x1
 6600 069f B904     		.2byte	0x4b9
 6601 06a1 B8060000 		.4byte	0x6b8
 6602 06a5 1B       		.uleb128 0x1b
 6603 06a6 14000000 		.4byte	.LBB100
 6604 06aa 12000000 		.4byte	.LBE100-.LBB100
 6605 06ae 1F       		.uleb128 0x1f
 6606 06af BD030000 		.4byte	0x3bd
 6607 06b3 02       		.uleb128 0x2
 6608 06b4 91       		.byte	0x91
 6609 06b5 5C       		.sleb128 -36
 6610 06b6 00       		.byte	0
 6611 06b7 00       		.byte	0
 6612 06b8 21       		.uleb128 0x21
 6613 06b9 B1030000 		.4byte	0x3b1
 6614 06bd 2E000000 		.4byte	.LBB101
 6615 06c1 12000000 		.4byte	.LBE101-.LBB101
 6616 06c5 01       		.byte	0x1
 6617 06c6 BA04     		.2byte	0x4ba
 6618 06c8 DF060000 		.4byte	0x6df
 6619 06cc 1B       		.uleb128 0x1b
 6620 06cd 2E000000 		.4byte	.LBB102
 6621 06d1 12000000 		.4byte	.LBE102-.LBB102
 6622 06d5 1F       		.uleb128 0x1f
 6623 06d6 BD030000 		.4byte	0x3bd
 6624 06da 02       		.uleb128 0x2
 6625 06db 91       		.byte	0x91
 6626 06dc 60       		.sleb128 -32
 6627 06dd 00       		.byte	0
 6628 06de 00       		.byte	0
 6629 06df 21       		.uleb128 0x21
 6630 06e0 B1030000 		.4byte	0x3b1
 6631 06e4 4A000000 		.4byte	.LBB103
 6632 06e8 12000000 		.4byte	.LBE103-.LBB103
 6633 06ec 01       		.byte	0x1
 6634 06ed BB04     		.2byte	0x4bb
 6635 06ef 06070000 		.4byte	0x706
 6636 06f3 1B       		.uleb128 0x1b
 6637 06f4 4A000000 		.4byte	.LBB104
 6638 06f8 12000000 		.4byte	.LBE104-.LBB104
 6639 06fc 1F       		.uleb128 0x1f
 6640 06fd BD030000 		.4byte	0x3bd
 6641 0701 02       		.uleb128 0x2
 6642 0702 91       		.byte	0x91
 6643 0703 64       		.sleb128 -28
 6644 0704 00       		.byte	0
 6645 0705 00       		.byte	0
 6646 0706 1B       		.uleb128 0x1b
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 211


 6647 0707 62000000 		.4byte	.LBB105
 6648 070b 62000000 		.4byte	.LBE105-.LBB105
 6649 070f 1A       		.uleb128 0x1a
 6650 0710 34080000 		.4byte	.LASF94
 6651 0714 01       		.byte	0x1
 6652 0715 C104     		.2byte	0x4c1
 6653 0717 2B070000 		.4byte	0x72b
 6654 071b 02       		.uleb128 0x2
 6655 071c 91       		.byte	0x91
 6656 071d 70       		.sleb128 -16
 6657 071e 00       		.byte	0
 6658 071f 00       		.byte	0
 6659 0720 06       		.uleb128 0x6
 6660 0721 04       		.byte	0x4
 6661 0722 4B010000 		.4byte	0x14b
 6662 0726 07       		.uleb128 0x7
 6663 0727 20070000 		.4byte	0x720
 6664 072b 07       		.uleb128 0x7
 6665 072c 4B010000 		.4byte	0x14b
 6666 0730 20       		.uleb128 0x20
 6667 0731 20010000 		.4byte	.LASF95
 6668 0735 01       		.byte	0x1
 6669 0736 0805     		.2byte	0x508
 6670 0738 00000000 		.4byte	.LFB141
 6671 073c 68000000 		.4byte	.LFE141-.LFB141
 6672 0740 01       		.uleb128 0x1
 6673 0741 9C       		.byte	0x9c
 6674 0742 88070000 		.4byte	0x788
 6675 0746 19       		.uleb128 0x19
 6676 0747 BF0B0000 		.4byte	.LASF96
 6677 074b 01       		.byte	0x1
 6678 074c 0805     		.2byte	0x508
 6679 074e 2B070000 		.4byte	0x72b
 6680 0752 02       		.uleb128 0x2
 6681 0753 91       		.byte	0x91
 6682 0754 6C       		.sleb128 -20
 6683 0755 1A       		.uleb128 0x1a
 6684 0756 7D010000 		.4byte	.LASF92
 6685 075a 01       		.byte	0x1
 6686 075b 0A05     		.2byte	0x50a
 6687 075d 35010000 		.4byte	0x135
 6688 0761 02       		.uleb128 0x2
 6689 0762 91       		.byte	0x91
 6690 0763 74       		.sleb128 -12
 6691 0764 1E       		.uleb128 0x1e
 6692 0765 B1030000 		.4byte	0x3b1
 6693 0769 1A000000 		.4byte	.LBB106
 6694 076d 12000000 		.4byte	.LBE106-.LBB106
 6695 0771 01       		.byte	0x1
 6696 0772 0F05     		.2byte	0x50f
 6697 0774 1B       		.uleb128 0x1b
 6698 0775 1A000000 		.4byte	.LBB107
 6699 0779 12000000 		.4byte	.LBE107-.LBB107
 6700 077d 1F       		.uleb128 0x1f
 6701 077e BD030000 		.4byte	0x3bd
 6702 0782 02       		.uleb128 0x2
 6703 0783 91       		.byte	0x91
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 212


 6704 0784 70       		.sleb128 -16
 6705 0785 00       		.byte	0
 6706 0786 00       		.byte	0
 6707 0787 00       		.byte	0
 6708 0788 18       		.uleb128 0x18
 6709 0789 7F0D0000 		.4byte	.LASF98
 6710 078d 01       		.byte	0x1
 6711 078e 7C05     		.2byte	0x57c
 6712 0790 40010000 		.4byte	0x140
 6713 0794 00000000 		.4byte	.LFB142
 6714 0798 34000000 		.4byte	.LFE142-.LFB142
 6715 079c 01       		.uleb128 0x1
 6716 079d 9C       		.byte	0x9c
 6717 079e D0070000 		.4byte	0x7d0
 6718 07a2 19       		.uleb128 0x19
 6719 07a3 1F070000 		.4byte	.LASF99
 6720 07a7 01       		.byte	0x1
 6721 07a8 7C05     		.2byte	0x57c
 6722 07aa 43020000 		.4byte	0x243
 6723 07ae 02       		.uleb128 0x2
 6724 07af 91       		.byte	0x91
 6725 07b0 6C       		.sleb128 -20
 6726 07b1 1A       		.uleb128 0x1a
 6727 07b2 C9050000 		.4byte	.LASF86
 6728 07b6 01       		.byte	0x1
 6729 07b7 7E05     		.2byte	0x57e
 6730 07b9 C9040000 		.4byte	0x4c9
 6731 07bd 02       		.uleb128 0x2
 6732 07be 91       		.byte	0x91
 6733 07bf 74       		.sleb128 -12
 6734 07c0 1A       		.uleb128 0x1a
 6735 07c1 28060000 		.4byte	.LASF100
 6736 07c5 01       		.byte	0x1
 6737 07c6 7F05     		.2byte	0x57f
 6738 07c8 40010000 		.4byte	0x140
 6739 07cc 02       		.uleb128 0x2
 6740 07cd 91       		.byte	0x91
 6741 07ce 70       		.sleb128 -16
 6742 07cf 00       		.byte	0
 6743 07d0 18       		.uleb128 0x18
 6744 07d1 2F090000 		.4byte	.LASF101
 6745 07d5 01       		.byte	0x1
 6746 07d6 9205     		.2byte	0x592
 6747 07d8 40010000 		.4byte	0x140
 6748 07dc 00000000 		.4byte	.LFB143
 6749 07e0 58000000 		.4byte	.LFE143-.LFB143
 6750 07e4 01       		.uleb128 0x1
 6751 07e5 9C       		.byte	0x9c
 6752 07e6 6F080000 		.4byte	0x86f
 6753 07ea 19       		.uleb128 0x19
 6754 07eb 1F070000 		.4byte	.LASF99
 6755 07ef 01       		.byte	0x1
 6756 07f0 9205     		.2byte	0x592
 6757 07f2 43020000 		.4byte	0x243
 6758 07f6 02       		.uleb128 0x2
 6759 07f7 91       		.byte	0x91
 6760 07f8 5C       		.sleb128 -36
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 213


 6761 07f9 1A       		.uleb128 0x1a
 6762 07fa C9050000 		.4byte	.LASF86
 6763 07fe 01       		.byte	0x1
 6764 07ff 9405     		.2byte	0x594
 6765 0801 C9040000 		.4byte	0x4c9
 6766 0805 02       		.uleb128 0x2
 6767 0806 91       		.byte	0x91
 6768 0807 6C       		.sleb128 -20
 6769 0808 1A       		.uleb128 0x1a
 6770 0809 28060000 		.4byte	.LASF100
 6771 080d 01       		.byte	0x1
 6772 080e 9505     		.2byte	0x595
 6773 0810 40010000 		.4byte	0x140
 6774 0814 02       		.uleb128 0x2
 6775 0815 91       		.byte	0x91
 6776 0816 68       		.sleb128 -24
 6777 0817 1A       		.uleb128 0x1a
 6778 0818 AC0A0000 		.4byte	.LASF102
 6779 081c 01       		.byte	0x1
 6780 081d 9505     		.2byte	0x595
 6781 081f 40010000 		.4byte	0x140
 6782 0823 02       		.uleb128 0x2
 6783 0824 91       		.byte	0x91
 6784 0825 70       		.sleb128 -16
 6785 0826 21       		.uleb128 0x21
 6786 0827 C9030000 		.4byte	0x3c9
 6787 082b 0C000000 		.4byte	.LBB108
 6788 082f 1A000000 		.4byte	.LBE108-.LBB108
 6789 0833 01       		.byte	0x1
 6790 0834 A905     		.2byte	0x5a9
 6791 0836 55080000 		.4byte	0x855
 6792 083a 1B       		.uleb128 0x1b
 6793 083b 0C000000 		.4byte	.LBB109
 6794 083f 1A000000 		.4byte	.LBE109-.LBB109
 6795 0843 1F       		.uleb128 0x1f
 6796 0844 D9030000 		.4byte	0x3d9
 6797 0848 02       		.uleb128 0x2
 6798 0849 91       		.byte	0x91
 6799 084a 64       		.sleb128 -28
 6800 084b 1F       		.uleb128 0x1f
 6801 084c E4030000 		.4byte	0x3e4
 6802 0850 02       		.uleb128 0x2
 6803 0851 91       		.byte	0x91
 6804 0852 60       		.sleb128 -32
 6805 0853 00       		.byte	0
 6806 0854 00       		.byte	0
 6807 0855 1E       		.uleb128 0x1e
 6808 0856 F0030000 		.4byte	0x3f0
 6809 085a 42000000 		.4byte	.LBB110
 6810 085e 06000000 		.4byte	.LBE110-.LBB110
 6811 0862 01       		.byte	0x1
 6812 0863 B005     		.2byte	0x5b0
 6813 0865 22       		.uleb128 0x22
 6814 0866 FC030000 		.4byte	0x3fc
 6815 086a 02       		.uleb128 0x2
 6816 086b 91       		.byte	0x91
 6817 086c 74       		.sleb128 -12
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 214


 6818 086d 00       		.byte	0
 6819 086e 00       		.byte	0
 6820 086f 20       		.uleb128 0x20
 6821 0870 C7030000 		.4byte	.LASF103
 6822 0874 01       		.byte	0x1
 6823 0875 BA05     		.2byte	0x5ba
 6824 0877 00000000 		.4byte	.LFB144
 6825 087b 30010000 		.4byte	.LFE144-.LFB144
 6826 087f 01       		.uleb128 0x1
 6827 0880 9C       		.byte	0x9c
 6828 0881 03090000 		.4byte	0x903
 6829 0885 19       		.uleb128 0x19
 6830 0886 1F070000 		.4byte	.LASF99
 6831 088a 01       		.byte	0x1
 6832 088b BA05     		.2byte	0x5ba
 6833 088d 43020000 		.4byte	0x243
 6834 0891 02       		.uleb128 0x2
 6835 0892 91       		.byte	0x91
 6836 0893 5C       		.sleb128 -36
 6837 0894 19       		.uleb128 0x19
 6838 0895 3E070000 		.4byte	.LASF104
 6839 0899 01       		.byte	0x1
 6840 089a BA05     		.2byte	0x5ba
 6841 089c 40010000 		.4byte	0x140
 6842 08a0 02       		.uleb128 0x2
 6843 08a1 91       		.byte	0x91
 6844 08a2 58       		.sleb128 -40
 6845 08a3 1A       		.uleb128 0x1a
 6846 08a4 C9050000 		.4byte	.LASF86
 6847 08a8 01       		.byte	0x1
 6848 08a9 BC05     		.2byte	0x5bc
 6849 08ab C9040000 		.4byte	0x4c9
 6850 08af 02       		.uleb128 0x2
 6851 08b0 91       		.byte	0x91
 6852 08b1 70       		.sleb128 -16
 6853 08b2 1A       		.uleb128 0x1a
 6854 08b3 97080000 		.4byte	.LASF105
 6855 08b7 01       		.byte	0x1
 6856 08b8 BD05     		.2byte	0x5bd
 6857 08ba 40010000 		.4byte	0x140
 6858 08be 02       		.uleb128 0x2
 6859 08bf 91       		.byte	0x91
 6860 08c0 6C       		.sleb128 -20
 6861 08c1 1A       		.uleb128 0x1a
 6862 08c2 0F020000 		.4byte	.LASF106
 6863 08c6 01       		.byte	0x1
 6864 08c7 BD05     		.2byte	0x5bd
 6865 08c9 40010000 		.4byte	0x140
 6866 08cd 02       		.uleb128 0x2
 6867 08ce 91       		.byte	0x91
 6868 08cf 68       		.sleb128 -24
 6869 08d0 1A       		.uleb128 0x1a
 6870 08d1 CF050000 		.4byte	.LASF107
 6871 08d5 01       		.byte	0x1
 6872 08d6 BE05     		.2byte	0x5be
 6873 08d8 35010000 		.4byte	0x135
 6874 08dc 02       		.uleb128 0x2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 215


 6875 08dd 91       		.byte	0x91
 6876 08de 74       		.sleb128 -12
 6877 08df 1E       		.uleb128 0x1e
 6878 08e0 B1030000 		.4byte	0x3b1
 6879 08e4 14000000 		.4byte	.LBB112
 6880 08e8 12000000 		.4byte	.LBE112-.LBB112
 6881 08ec 01       		.byte	0x1
 6882 08ed C005     		.2byte	0x5c0
 6883 08ef 1B       		.uleb128 0x1b
 6884 08f0 14000000 		.4byte	.LBB113
 6885 08f4 12000000 		.4byte	.LBE113-.LBB113
 6886 08f8 1F       		.uleb128 0x1f
 6887 08f9 BD030000 		.4byte	0x3bd
 6888 08fd 02       		.uleb128 0x2
 6889 08fe 91       		.byte	0x91
 6890 08ff 64       		.sleb128 -28
 6891 0900 00       		.byte	0
 6892 0901 00       		.byte	0
 6893 0902 00       		.byte	0
 6894 0903 20       		.uleb128 0x20
 6895 0904 43000000 		.4byte	.LASF108
 6896 0908 01       		.byte	0x1
 6897 0909 5E06     		.2byte	0x65e
 6898 090b 00000000 		.4byte	.LFB145
 6899 090f E8000000 		.4byte	.LFE145-.LFB145
 6900 0913 01       		.uleb128 0x1
 6901 0914 9C       		.byte	0x9c
 6902 0915 5B090000 		.4byte	0x95b
 6903 0919 19       		.uleb128 0x19
 6904 091a CF060000 		.4byte	.LASF109
 6905 091e 01       		.byte	0x1
 6906 091f 5E06     		.2byte	0x65e
 6907 0921 43020000 		.4byte	0x243
 6908 0925 02       		.uleb128 0x2
 6909 0926 91       		.byte	0x91
 6910 0927 6C       		.sleb128 -20
 6911 0928 1A       		.uleb128 0x1a
 6912 0929 C9050000 		.4byte	.LASF86
 6913 092d 01       		.byte	0x1
 6914 092e 6006     		.2byte	0x660
 6915 0930 C9040000 		.4byte	0x4c9
 6916 0934 02       		.uleb128 0x2
 6917 0935 91       		.byte	0x91
 6918 0936 74       		.sleb128 -12
 6919 0937 1E       		.uleb128 0x1e
 6920 0938 B1030000 		.4byte	0x3b1
 6921 093c 8A000000 		.4byte	.LBB114
 6922 0940 12000000 		.4byte	.LBE114-.LBB114
 6923 0944 01       		.byte	0x1
 6924 0945 A206     		.2byte	0x6a2
 6925 0947 1B       		.uleb128 0x1b
 6926 0948 8A000000 		.4byte	.LBB115
 6927 094c 12000000 		.4byte	.LBE115-.LBB115
 6928 0950 1F       		.uleb128 0x1f
 6929 0951 BD030000 		.4byte	0x3bd
 6930 0955 02       		.uleb128 0x2
 6931 0956 91       		.byte	0x91
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 216


 6932 0957 70       		.sleb128 -16
 6933 0958 00       		.byte	0
 6934 0959 00       		.byte	0
 6935 095a 00       		.byte	0
 6936 095b 23       		.uleb128 0x23
 6937 095c 100C0000 		.4byte	.LASF209
 6938 0960 01       		.byte	0x1
 6939 0961 C306     		.2byte	0x6c3
 6940 0963 35010000 		.4byte	0x135
 6941 0967 00000000 		.4byte	.LFB146
 6942 096b 74000000 		.4byte	.LFE146-.LFB146
 6943 096f 01       		.uleb128 0x1
 6944 0970 9C       		.byte	0x9c
 6945 0971 C6090000 		.4byte	0x9c6
 6946 0975 19       		.uleb128 0x19
 6947 0976 1F070000 		.4byte	.LASF99
 6948 097a 01       		.byte	0x1
 6949 097b C306     		.2byte	0x6c3
 6950 097d C6090000 		.4byte	0x9c6
 6951 0981 02       		.uleb128 0x2
 6952 0982 91       		.byte	0x91
 6953 0983 64       		.sleb128 -28
 6954 0984 1A       		.uleb128 0x1a
 6955 0985 AF040000 		.4byte	.LASF80
 6956 0989 01       		.byte	0x1
 6957 098a C506     		.2byte	0x6c5
 6958 098c 35010000 		.4byte	0x135
 6959 0990 02       		.uleb128 0x2
 6960 0991 91       		.byte	0x91
 6961 0992 74       		.sleb128 -12
 6962 0993 1A       		.uleb128 0x1a
 6963 0994 C9050000 		.4byte	.LASF86
 6964 0998 01       		.byte	0x1
 6965 0999 C606     		.2byte	0x6c6
 6966 099b D6090000 		.4byte	0x9d6
 6967 099f 02       		.uleb128 0x2
 6968 09a0 91       		.byte	0x91
 6969 09a1 70       		.sleb128 -16
 6970 09a2 1E       		.uleb128 0x1e
 6971 09a3 B1030000 		.4byte	0x3b1
 6972 09a7 16000000 		.4byte	.LBB116
 6973 09ab 12000000 		.4byte	.LBE116-.LBB116
 6974 09af 01       		.byte	0x1
 6975 09b0 CC06     		.2byte	0x6cc
 6976 09b2 1B       		.uleb128 0x1b
 6977 09b3 16000000 		.4byte	.LBB117
 6978 09b7 12000000 		.4byte	.LBE117-.LBB117
 6979 09bb 1F       		.uleb128 0x1f
 6980 09bc BD030000 		.4byte	0x3bd
 6981 09c0 02       		.uleb128 0x2
 6982 09c1 91       		.byte	0x91
 6983 09c2 6C       		.sleb128 -20
 6984 09c3 00       		.byte	0
 6985 09c4 00       		.byte	0
 6986 09c5 00       		.byte	0
 6987 09c6 07       		.uleb128 0x7
 6988 09c7 43020000 		.4byte	0x243
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 217


 6989 09cb 06       		.uleb128 0x6
 6990 09cc 04       		.byte	0x4
 6991 09cd D1090000 		.4byte	0x9d1
 6992 09d1 07       		.uleb128 0x7
 6993 09d2 A5030000 		.4byte	0x3a5
 6994 09d6 07       		.uleb128 0x7
 6995 09d7 CB090000 		.4byte	0x9cb
 6996 09db 20       		.uleb128 0x20
 6997 09dc 0C060000 		.4byte	.LASF110
 6998 09e0 01       		.byte	0x1
 6999 09e1 F106     		.2byte	0x6f1
 7000 09e3 00000000 		.4byte	.LFB147
 7001 09e7 BC000000 		.4byte	.LFE147-.LFB147
 7002 09eb 01       		.uleb128 0x1
 7003 09ec 9C       		.byte	0x9c
 7004 09ed 330A0000 		.4byte	0xa33
 7005 09f1 19       		.uleb128 0x19
 7006 09f2 FD080000 		.4byte	.LASF111
 7007 09f6 01       		.byte	0x1
 7008 09f7 F106     		.2byte	0x6f1
 7009 09f9 43020000 		.4byte	0x243
 7010 09fd 02       		.uleb128 0x2
 7011 09fe 91       		.byte	0x91
 7012 09ff 6C       		.sleb128 -20
 7013 0a00 1A       		.uleb128 0x1a
 7014 0a01 C9050000 		.4byte	.LASF86
 7015 0a05 01       		.byte	0x1
 7016 0a06 F306     		.2byte	0x6f3
 7017 0a08 330A0000 		.4byte	0xa33
 7018 0a0c 02       		.uleb128 0x2
 7019 0a0d 91       		.byte	0x91
 7020 0a0e 74       		.sleb128 -12
 7021 0a0f 1E       		.uleb128 0x1e
 7022 0a10 B1030000 		.4byte	0x3b1
 7023 0a14 12000000 		.4byte	.LBB118
 7024 0a18 12000000 		.4byte	.LBE118-.LBB118
 7025 0a1c 01       		.byte	0x1
 7026 0a1d F606     		.2byte	0x6f6
 7027 0a1f 1B       		.uleb128 0x1b
 7028 0a20 12000000 		.4byte	.LBB119
 7029 0a24 12000000 		.4byte	.LBE119-.LBB119
 7030 0a28 1F       		.uleb128 0x1f
 7031 0a29 BD030000 		.4byte	0x3bd
 7032 0a2d 02       		.uleb128 0x2
 7033 0a2e 91       		.byte	0x91
 7034 0a2f 70       		.sleb128 -16
 7035 0a30 00       		.byte	0
 7036 0a31 00       		.byte	0
 7037 0a32 00       		.byte	0
 7038 0a33 07       		.uleb128 0x7
 7039 0a34 C9040000 		.4byte	0x4c9
 7040 0a38 18       		.uleb128 0x18
 7041 0a39 94040000 		.4byte	.LASF112
 7042 0a3d 01       		.byte	0x1
 7043 0a3e 2707     		.2byte	0x727
 7044 0a40 35010000 		.4byte	0x135
 7045 0a44 00000000 		.4byte	.LFB148
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 218


 7046 0a48 E0000000 		.4byte	.LFE148-.LFB148
 7047 0a4c 01       		.uleb128 0x1
 7048 0a4d 9C       		.byte	0x9c
 7049 0a4e FE0A0000 		.4byte	0xafe
 7050 0a52 19       		.uleb128 0x19
 7051 0a53 FD080000 		.4byte	.LASF111
 7052 0a57 01       		.byte	0x1
 7053 0a58 2707     		.2byte	0x727
 7054 0a5a 43020000 		.4byte	0x243
 7055 0a5e 02       		.uleb128 0x2
 7056 0a5f 91       		.byte	0x91
 7057 0a60 54       		.sleb128 -44
 7058 0a61 1A       		.uleb128 0x1a
 7059 0a62 CF050000 		.4byte	.LASF107
 7060 0a66 01       		.byte	0x1
 7061 0a67 2907     		.2byte	0x729
 7062 0a69 35010000 		.4byte	0x135
 7063 0a6d 02       		.uleb128 0x2
 7064 0a6e 91       		.byte	0x91
 7065 0a6f 74       		.sleb128 -12
 7066 0a70 1A       		.uleb128 0x1a
 7067 0a71 C9050000 		.4byte	.LASF86
 7068 0a75 01       		.byte	0x1
 7069 0a76 2A07     		.2byte	0x72a
 7070 0a78 330A0000 		.4byte	0xa33
 7071 0a7c 02       		.uleb128 0x2
 7072 0a7d 91       		.byte	0x91
 7073 0a7e 70       		.sleb128 -16
 7074 0a7f 1A       		.uleb128 0x1a
 7075 0a80 A3090000 		.4byte	.LASF113
 7076 0a84 01       		.byte	0x1
 7077 0a85 2B07     		.2byte	0x72b
 7078 0a87 40010000 		.4byte	0x140
 7079 0a8b 02       		.uleb128 0x2
 7080 0a8c 91       		.byte	0x91
 7081 0a8d 68       		.sleb128 -24
 7082 0a8e 21       		.uleb128 0x21
 7083 0a8f B1030000 		.4byte	0x3b1
 7084 0a93 16000000 		.4byte	.LBB120
 7085 0a97 12000000 		.4byte	.LBE120-.LBB120
 7086 0a9b 01       		.byte	0x1
 7087 0a9c 2D07     		.2byte	0x72d
 7088 0a9e B50A0000 		.4byte	0xab5
 7089 0aa2 1B       		.uleb128 0x1b
 7090 0aa3 16000000 		.4byte	.LBB121
 7091 0aa7 12000000 		.4byte	.LBE121-.LBB121
 7092 0aab 1F       		.uleb128 0x1f
 7093 0aac BD030000 		.4byte	0x3bd
 7094 0ab0 02       		.uleb128 0x2
 7095 0ab1 91       		.byte	0x91
 7096 0ab2 60       		.sleb128 -32
 7097 0ab3 00       		.byte	0
 7098 0ab4 00       		.byte	0
 7099 0ab5 21       		.uleb128 0x21
 7100 0ab6 C9030000 		.4byte	0x3c9
 7101 0aba 2E000000 		.4byte	.LBB122
 7102 0abe 1A000000 		.4byte	.LBE122-.LBB122
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 219


 7103 0ac2 01       		.byte	0x1
 7104 0ac3 4107     		.2byte	0x741
 7105 0ac5 E40A0000 		.4byte	0xae4
 7106 0ac9 1B       		.uleb128 0x1b
 7107 0aca 2E000000 		.4byte	.LBB123
 7108 0ace 1A000000 		.4byte	.LBE123-.LBB123
 7109 0ad2 1F       		.uleb128 0x1f
 7110 0ad3 D9030000 		.4byte	0x3d9
 7111 0ad7 02       		.uleb128 0x2
 7112 0ad8 91       		.byte	0x91
 7113 0ad9 64       		.sleb128 -28
 7114 0ada 1F       		.uleb128 0x1f
 7115 0adb E4030000 		.4byte	0x3e4
 7116 0adf 02       		.uleb128 0x2
 7117 0ae0 91       		.byte	0x91
 7118 0ae1 5C       		.sleb128 -36
 7119 0ae2 00       		.byte	0
 7120 0ae3 00       		.byte	0
 7121 0ae4 1E       		.uleb128 0x1e
 7122 0ae5 F0030000 		.4byte	0x3f0
 7123 0ae9 BC000000 		.4byte	.LBB124
 7124 0aed 06000000 		.4byte	.LBE124-.LBB124
 7125 0af1 01       		.byte	0x1
 7126 0af2 6507     		.2byte	0x765
 7127 0af4 22       		.uleb128 0x22
 7128 0af5 FC030000 		.4byte	0x3fc
 7129 0af9 02       		.uleb128 0x2
 7130 0afa 91       		.byte	0x91
 7131 0afb 6C       		.sleb128 -20
 7132 0afc 00       		.byte	0
 7133 0afd 00       		.byte	0
 7134 0afe 20       		.uleb128 0x20
 7135 0aff 28040000 		.4byte	.LASF114
 7136 0b03 01       		.byte	0x1
 7137 0b04 6D07     		.2byte	0x76d
 7138 0b06 00000000 		.4byte	.LFB149
 7139 0b0a 98000000 		.4byte	.LFE149-.LFB149
 7140 0b0e 01       		.uleb128 0x1
 7141 0b0f 9C       		.byte	0x9c
 7142 0b10 6E0B0000 		.4byte	0xb6e
 7143 0b14 1A       		.uleb128 0x1a
 7144 0b15 AF040000 		.4byte	.LASF80
 7145 0b19 01       		.byte	0x1
 7146 0b1a 6F07     		.2byte	0x76f
 7147 0b1c 35010000 		.4byte	0x135
 7148 0b20 02       		.uleb128 0x2
 7149 0b21 91       		.byte	0x91
 7150 0b22 74       		.sleb128 -12
 7151 0b23 21       		.uleb128 0x21
 7152 0b24 B1030000 		.4byte	0x3b1
 7153 0b28 2E000000 		.4byte	.LBB126
 7154 0b2c 12000000 		.4byte	.LBE126-.LBB126
 7155 0b30 01       		.byte	0x1
 7156 0b31 B507     		.2byte	0x7b5
 7157 0b33 4A0B0000 		.4byte	0xb4a
 7158 0b37 1B       		.uleb128 0x1b
 7159 0b38 2E000000 		.4byte	.LBB127
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 220


 7160 0b3c 12000000 		.4byte	.LBE127-.LBB127
 7161 0b40 1F       		.uleb128 0x1f
 7162 0b41 BD030000 		.4byte	0x3bd
 7163 0b45 02       		.uleb128 0x2
 7164 0b46 91       		.byte	0x91
 7165 0b47 6C       		.sleb128 -20
 7166 0b48 00       		.byte	0
 7167 0b49 00       		.byte	0
 7168 0b4a 1E       		.uleb128 0x1e
 7169 0b4b B1030000 		.4byte	0x3b1
 7170 0b4f 62000000 		.4byte	.LBB128
 7171 0b53 12000000 		.4byte	.LBE128-.LBB128
 7172 0b57 01       		.byte	0x1
 7173 0b58 DC07     		.2byte	0x7dc
 7174 0b5a 1B       		.uleb128 0x1b
 7175 0b5b 62000000 		.4byte	.LBB129
 7176 0b5f 12000000 		.4byte	.LBE129-.LBB129
 7177 0b63 1F       		.uleb128 0x1f
 7178 0b64 BD030000 		.4byte	0x3bd
 7179 0b68 02       		.uleb128 0x2
 7180 0b69 91       		.byte	0x91
 7181 0b6a 70       		.sleb128 -16
 7182 0b6b 00       		.byte	0
 7183 0b6c 00       		.byte	0
 7184 0b6d 00       		.byte	0
 7185 0b6e 20       		.uleb128 0x20
 7186 0b6f DC080000 		.4byte	.LASF115
 7187 0b73 01       		.byte	0x1
 7188 0b74 E507     		.2byte	0x7e5
 7189 0b76 00000000 		.4byte	.LFB150
 7190 0b7a 30000000 		.4byte	.LFE150-.LFB150
 7191 0b7e 01       		.uleb128 0x1
 7192 0b7f 9C       		.byte	0x9c
 7193 0b80 A80B0000 		.4byte	0xba8
 7194 0b84 1E       		.uleb128 0x1e
 7195 0b85 B1030000 		.4byte	0x3b1
 7196 0b89 06000000 		.4byte	.LBB130
 7197 0b8d 12000000 		.4byte	.LBE130-.LBB130
 7198 0b91 01       		.byte	0x1
 7199 0b92 EA07     		.2byte	0x7ea
 7200 0b94 1B       		.uleb128 0x1b
 7201 0b95 06000000 		.4byte	.LBB131
 7202 0b99 12000000 		.4byte	.LBE131-.LBB131
 7203 0b9d 1F       		.uleb128 0x1f
 7204 0b9e BD030000 		.4byte	0x3bd
 7205 0ba2 02       		.uleb128 0x2
 7206 0ba3 91       		.byte	0x91
 7207 0ba4 74       		.sleb128 -12
 7208 0ba5 00       		.byte	0
 7209 0ba6 00       		.byte	0
 7210 0ba7 00       		.byte	0
 7211 0ba8 24       		.uleb128 0x24
 7212 0ba9 F0090000 		.4byte	.LASF147
 7213 0bad 01       		.byte	0x1
 7214 0bae F007     		.2byte	0x7f0
 7215 0bb0 00000000 		.4byte	.LFB151
 7216 0bb4 1C000000 		.4byte	.LFE151-.LFB151
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 221


 7217 0bb8 01       		.uleb128 0x1
 7218 0bb9 9C       		.byte	0x9c
 7219 0bba 18       		.uleb128 0x18
 7220 0bbb 0B090000 		.4byte	.LASF116
 7221 0bbf 01       		.byte	0x1
 7222 0bc0 3908     		.2byte	0x839
 7223 0bc2 35010000 		.4byte	0x135
 7224 0bc6 00000000 		.4byte	.LFB152
 7225 0bca 38010000 		.4byte	.LFE152-.LFB152
 7226 0bce 01       		.uleb128 0x1
 7227 0bcf 9C       		.byte	0x9c
 7228 0bd0 330C0000 		.4byte	0xc33
 7229 0bd4 1A       		.uleb128 0x1a
 7230 0bd5 C9050000 		.4byte	.LASF86
 7231 0bd9 01       		.byte	0x1
 7232 0bda 3B08     		.2byte	0x83b
 7233 0bdc C9040000 		.4byte	0x4c9
 7234 0be0 02       		.uleb128 0x2
 7235 0be1 91       		.byte	0x91
 7236 0be2 74       		.sleb128 -12
 7237 0be3 1A       		.uleb128 0x1a
 7238 0be4 7D010000 		.4byte	.LASF92
 7239 0be8 01       		.byte	0x1
 7240 0be9 3C08     		.2byte	0x83c
 7241 0beb 35010000 		.4byte	0x135
 7242 0bef 02       		.uleb128 0x2
 7243 0bf0 91       		.byte	0x91
 7244 0bf1 70       		.sleb128 -16
 7245 0bf2 21       		.uleb128 0x21
 7246 0bf3 B1030000 		.4byte	0x3b1
 7247 0bf7 16000000 		.4byte	.LBB132
 7248 0bfb 12000000 		.4byte	.LBE132-.LBB132
 7249 0bff 01       		.byte	0x1
 7250 0c00 4008     		.2byte	0x840
 7251 0c02 190C0000 		.4byte	0xc19
 7252 0c06 1B       		.uleb128 0x1b
 7253 0c07 16000000 		.4byte	.LBB133
 7254 0c0b 12000000 		.4byte	.LBE133-.LBB133
 7255 0c0f 1F       		.uleb128 0x1f
 7256 0c10 BD030000 		.4byte	0x3bd
 7257 0c14 02       		.uleb128 0x2
 7258 0c15 91       		.byte	0x91
 7259 0c16 68       		.sleb128 -24
 7260 0c17 00       		.byte	0
 7261 0c18 00       		.byte	0
 7262 0c19 1B       		.uleb128 0x1b
 7263 0c1a BC000000 		.4byte	.LBB134
 7264 0c1e 2E000000 		.4byte	.LBE134-.LBB134
 7265 0c22 1A       		.uleb128 0x1a
 7266 0c23 EE080000 		.4byte	.LASF117
 7267 0c27 01       		.byte	0x1
 7268 0c28 7408     		.2byte	0x874
 7269 0c2a 40010000 		.4byte	0x140
 7270 0c2e 02       		.uleb128 0x2
 7271 0c2f 91       		.byte	0x91
 7272 0c30 6C       		.sleb128 -20
 7273 0c31 00       		.byte	0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 222


 7274 0c32 00       		.byte	0
 7275 0c33 25       		.uleb128 0x25
 7276 0c34 E1010000 		.4byte	.LASF118
 7277 0c38 01       		.byte	0x1
 7278 0c39 A708     		.2byte	0x8a7
 7279 0c3b 4B010000 		.4byte	0x14b
 7280 0c3f 00000000 		.4byte	.LFB153
 7281 0c43 20000000 		.4byte	.LFE153-.LFB153
 7282 0c47 01       		.uleb128 0x1
 7283 0c48 9C       		.byte	0x9c
 7284 0c49 5D0C0000 		.4byte	0xc5d
 7285 0c4d 1A       		.uleb128 0x1a
 7286 0c4e 090C0000 		.4byte	.LASF119
 7287 0c52 01       		.byte	0x1
 7288 0c53 A908     		.2byte	0x8a9
 7289 0c55 4B010000 		.4byte	0x14b
 7290 0c59 02       		.uleb128 0x2
 7291 0c5a 91       		.byte	0x91
 7292 0c5b 74       		.sleb128 -12
 7293 0c5c 00       		.byte	0
 7294 0c5d 18       		.uleb128 0x18
 7295 0c5e 11030000 		.4byte	.LASF120
 7296 0c62 01       		.byte	0x1
 7297 0c63 B608     		.2byte	0x8b6
 7298 0c65 4B010000 		.4byte	0x14b
 7299 0c69 00000000 		.4byte	.LFB154
 7300 0c6d 24000000 		.4byte	.LFE154-.LFB154
 7301 0c71 01       		.uleb128 0x1
 7302 0c72 9C       		.byte	0x9c
 7303 0c73 960C0000 		.4byte	0xc96
 7304 0c77 1A       		.uleb128 0x1a
 7305 0c78 AF040000 		.4byte	.LASF80
 7306 0c7c 01       		.byte	0x1
 7307 0c7d B808     		.2byte	0x8b8
 7308 0c7f 4B010000 		.4byte	0x14b
 7309 0c83 02       		.uleb128 0x2
 7310 0c84 91       		.byte	0x91
 7311 0c85 70       		.sleb128 -16
 7312 0c86 1A       		.uleb128 0x1a
 7313 0c87 A3090000 		.4byte	.LASF113
 7314 0c8b 01       		.byte	0x1
 7315 0c8c B908     		.2byte	0x8b9
 7316 0c8e 40010000 		.4byte	0x140
 7317 0c92 02       		.uleb128 0x2
 7318 0c93 91       		.byte	0x91
 7319 0c94 74       		.sleb128 -12
 7320 0c95 00       		.byte	0
 7321 0c96 26       		.uleb128 0x26
 7322 0c97 390B0000 		.4byte	.LASF210
 7323 0c9b 01       		.byte	0x1
 7324 0c9c D508     		.2byte	0x8d5
 7325 0c9e 40010000 		.4byte	0x140
 7326 0ca2 00000000 		.4byte	.LFB155
 7327 0ca6 18000000 		.4byte	.LFE155-.LFB155
 7328 0caa 01       		.uleb128 0x1
 7329 0cab 9C       		.byte	0x9c
 7330 0cac 25       		.uleb128 0x25
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 223


 7331 0cad 300A0000 		.4byte	.LASF121
 7332 0cb1 01       		.byte	0x1
 7333 0cb2 DD08     		.2byte	0x8dd
 7334 0cb4 B2000000 		.4byte	0xb2
 7335 0cb8 00000000 		.4byte	.LFB156
 7336 0cbc 48000000 		.4byte	.LFE156-.LFB156
 7337 0cc0 01       		.uleb128 0x1
 7338 0cc1 9C       		.byte	0x9c
 7339 0cc2 080D0000 		.4byte	0xd08
 7340 0cc6 19       		.uleb128 0x19
 7341 0cc7 BA030000 		.4byte	.LASF122
 7342 0ccb 01       		.byte	0x1
 7343 0ccc DD08     		.2byte	0x8dd
 7344 0cce 43020000 		.4byte	0x243
 7345 0cd2 02       		.uleb128 0x2
 7346 0cd3 91       		.byte	0x91
 7347 0cd4 6C       		.sleb128 -20
 7348 0cd5 1A       		.uleb128 0x1a
 7349 0cd6 C9050000 		.4byte	.LASF86
 7350 0cda 01       		.byte	0x1
 7351 0cdb DF08     		.2byte	0x8df
 7352 0cdd C9040000 		.4byte	0x4c9
 7353 0ce1 02       		.uleb128 0x2
 7354 0ce2 91       		.byte	0x91
 7355 0ce3 74       		.sleb128 -12
 7356 0ce4 1E       		.uleb128 0x1e
 7357 0ce5 B1030000 		.4byte	0x3b1
 7358 0ce9 1E000000 		.4byte	.LBB135
 7359 0ced 12000000 		.4byte	.LBE135-.LBB135
 7360 0cf1 01       		.byte	0x1
 7361 0cf2 E408     		.2byte	0x8e4
 7362 0cf4 1B       		.uleb128 0x1b
 7363 0cf5 1E000000 		.4byte	.LBB136
 7364 0cf9 12000000 		.4byte	.LBE136-.LBB136
 7365 0cfd 1F       		.uleb128 0x1f
 7366 0cfe BD030000 		.4byte	0x3bd
 7367 0d02 02       		.uleb128 0x2
 7368 0d03 91       		.byte	0x91
 7369 0d04 70       		.sleb128 -16
 7370 0d05 00       		.byte	0
 7371 0d06 00       		.byte	0
 7372 0d07 00       		.byte	0
 7373 0d08 18       		.uleb128 0x18
 7374 0d09 3C040000 		.4byte	.LASF123
 7375 0d0d 01       		.byte	0x1
 7376 0d0e 1D0A     		.2byte	0xa1d
 7377 0d10 35010000 		.4byte	0x135
 7378 0d14 00000000 		.4byte	.LFB157
 7379 0d18 5C010000 		.4byte	.LFE157-.LFB157
 7380 0d1c 01       		.uleb128 0x1
 7381 0d1d 9C       		.byte	0x9c
 7382 0d1e A50D0000 		.4byte	0xda5
 7383 0d22 1A       		.uleb128 0x1a
 7384 0d23 C9050000 		.4byte	.LASF86
 7385 0d27 01       		.byte	0x1
 7386 0d28 1F0A     		.2byte	0xa1f
 7387 0d2a C9040000 		.4byte	0x4c9
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 224


 7388 0d2e 02       		.uleb128 0x2
 7389 0d2f 91       		.byte	0x91
 7390 0d30 68       		.sleb128 -24
 7391 0d31 1A       		.uleb128 0x1a
 7392 0d32 570A0000 		.4byte	.LASF28
 7393 0d36 01       		.byte	0x1
 7394 0d37 200A     		.2byte	0xa20
 7395 0d39 4B010000 		.4byte	0x14b
 7396 0d3d 02       		.uleb128 0x2
 7397 0d3e 91       		.byte	0x91
 7398 0d3f 64       		.sleb128 -28
 7399 0d40 1A       		.uleb128 0x1a
 7400 0d41 18060000 		.4byte	.LASF124
 7401 0d45 01       		.byte	0x1
 7402 0d46 210A     		.2byte	0xa21
 7403 0d48 35010000 		.4byte	0x135
 7404 0d4c 02       		.uleb128 0x2
 7405 0d4d 91       		.byte	0x91
 7406 0d4e 74       		.sleb128 -12
 7407 0d4f 1B       		.uleb128 0x1b
 7408 0d50 12000000 		.4byte	.LBB137
 7409 0d54 FC000000 		.4byte	.LBE137-.LBB137
 7410 0d58 1A       		.uleb128 0x1a
 7411 0d59 34080000 		.4byte	.LASF94
 7412 0d5d 01       		.byte	0x1
 7413 0d5e 2B0A     		.2byte	0xa2b
 7414 0d60 2B070000 		.4byte	0x72b
 7415 0d64 02       		.uleb128 0x2
 7416 0d65 91       		.byte	0x91
 7417 0d66 70       		.sleb128 -16
 7418 0d67 1B       		.uleb128 0x1b
 7419 0d68 26000000 		.4byte	.LBB138
 7420 0d6c 40000000 		.4byte	.LBE138-.LBB138
 7421 0d70 1A       		.uleb128 0x1a
 7422 0d71 FE0A0000 		.4byte	.LASF125
 7423 0d75 01       		.byte	0x1
 7424 0d76 330A     		.2byte	0xa33
 7425 0d78 A50D0000 		.4byte	0xda5
 7426 0d7c 02       		.uleb128 0x2
 7427 0d7d 91       		.byte	0x91
 7428 0d7e 6C       		.sleb128 -20
 7429 0d7f 1E       		.uleb128 0x1e
 7430 0d80 B1030000 		.4byte	0x3b1
 7431 0d84 30000000 		.4byte	.LBB139
 7432 0d88 12000000 		.4byte	.LBE139-.LBB139
 7433 0d8c 01       		.byte	0x1
 7434 0d8d 330A     		.2byte	0xa33
 7435 0d8f 1B       		.uleb128 0x1b
 7436 0d90 30000000 		.4byte	.LBB140
 7437 0d94 12000000 		.4byte	.LBE140-.LBB140
 7438 0d98 1F       		.uleb128 0x1f
 7439 0d99 BD030000 		.4byte	0x3bd
 7440 0d9d 02       		.uleb128 0x2
 7441 0d9e 91       		.byte	0x91
 7442 0d9f 60       		.sleb128 -32
 7443 0da0 00       		.byte	0
 7444 0da1 00       		.byte	0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 225


 7445 0da2 00       		.byte	0
 7446 0da3 00       		.byte	0
 7447 0da4 00       		.byte	0
 7448 0da5 06       		.uleb128 0x6
 7449 0da6 04       		.byte	0x4
 7450 0da7 38020000 		.4byte	0x238
 7451 0dab 20       		.uleb128 0x20
 7452 0dac B1060000 		.4byte	.LASF126
 7453 0db0 01       		.byte	0x1
 7454 0db1 230B     		.2byte	0xb23
 7455 0db3 00000000 		.4byte	.LFB158
 7456 0db7 04010000 		.4byte	.LFE158-.LFB158
 7457 0dbb 01       		.uleb128 0x1
 7458 0dbc 9C       		.byte	0x9c
 7459 0dbd 470E0000 		.4byte	0xe47
 7460 0dc1 27       		.uleb128 0x27
 7461 0dc2 1C000000 		.4byte	.LBB141
 7462 0dc6 4E000000 		.4byte	.LBE141-.LBB141
 7463 0dca ED0D0000 		.4byte	0xded
 7464 0dce 1A       		.uleb128 0x1a
 7465 0dcf E80D0000 		.4byte	.LASF127
 7466 0dd3 01       		.byte	0x1
 7467 0dd4 4D0B     		.2byte	0xb4d
 7468 0dd6 4D0E0000 		.4byte	0xe4d
 7469 0dda 02       		.uleb128 0x2
 7470 0ddb 91       		.byte	0x91
 7471 0ddc 70       		.sleb128 -16
 7472 0ddd 1A       		.uleb128 0x1a
 7473 0dde BD080000 		.4byte	.LASF128
 7474 0de2 01       		.byte	0x1
 7475 0de3 4E0B     		.2byte	0xb4e
 7476 0de5 9D050000 		.4byte	0x59d
 7477 0de9 02       		.uleb128 0x2
 7478 0dea 91       		.byte	0x91
 7479 0deb 6C       		.sleb128 -20
 7480 0dec 00       		.byte	0
 7481 0ded 1B       		.uleb128 0x1b
 7482 0dee 6A000000 		.4byte	.LBB142
 7483 0df2 7C000000 		.4byte	.LBE142-.LBB142
 7484 0df6 1A       		.uleb128 0x1a
 7485 0df7 E1070000 		.4byte	.LASF129
 7486 0dfb 01       		.byte	0x1
 7487 0dfc 5B0B     		.2byte	0xb5b
 7488 0dfe 40010000 		.4byte	0x140
 7489 0e02 02       		.uleb128 0x2
 7490 0e03 91       		.byte	0x91
 7491 0e04 74       		.sleb128 -12
 7492 0e05 21       		.uleb128 0x21
 7493 0e06 B1030000 		.4byte	0x3b1
 7494 0e0a 78000000 		.4byte	.LBB143
 7495 0e0e 12000000 		.4byte	.LBE143-.LBB143
 7496 0e12 01       		.byte	0x1
 7497 0e13 5B0B     		.2byte	0xb5b
 7498 0e15 2C0E0000 		.4byte	0xe2c
 7499 0e19 1B       		.uleb128 0x1b
 7500 0e1a 78000000 		.4byte	.LBB144
 7501 0e1e 12000000 		.4byte	.LBE144-.LBB144
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 226


 7502 0e22 1F       		.uleb128 0x1f
 7503 0e23 BD030000 		.4byte	0x3bd
 7504 0e27 02       		.uleb128 0x2
 7505 0e28 91       		.byte	0x91
 7506 0e29 64       		.sleb128 -28
 7507 0e2a 00       		.byte	0
 7508 0e2b 00       		.byte	0
 7509 0e2c 1B       		.uleb128 0x1b
 7510 0e2d A6000000 		.4byte	.LBB145
 7511 0e31 3A000000 		.4byte	.LBE145-.LBB145
 7512 0e35 1A       		.uleb128 0x1a
 7513 0e36 9E050000 		.4byte	.LASF130
 7514 0e3a 01       		.byte	0x1
 7515 0e3b 5B0B     		.2byte	0xb5b
 7516 0e3d 520E0000 		.4byte	0xe52
 7517 0e41 02       		.uleb128 0x2
 7518 0e42 91       		.byte	0x91
 7519 0e43 68       		.sleb128 -24
 7520 0e44 00       		.byte	0
 7521 0e45 00       		.byte	0
 7522 0e46 00       		.byte	0
 7523 0e47 06       		.uleb128 0x6
 7524 0e48 04       		.byte	0x4
 7525 0e49 9D050000 		.4byte	0x59d
 7526 0e4d 07       		.uleb128 0x7
 7527 0e4e 470E0000 		.4byte	0xe47
 7528 0e52 07       		.uleb128 0x7
 7529 0e53 A50D0000 		.4byte	0xda5
 7530 0e57 20       		.uleb128 0x20
 7531 0e58 4F040000 		.4byte	.LASF131
 7532 0e5c 01       		.byte	0x1
 7533 0e5d 690B     		.2byte	0xb69
 7534 0e5f 00000000 		.4byte	.LFB159
 7535 0e63 48000000 		.4byte	.LFE159-.LFB159
 7536 0e67 01       		.uleb128 0x1
 7537 0e68 9C       		.byte	0x9c
 7538 0e69 AF0E0000 		.4byte	0xeaf
 7539 0e6d 19       		.uleb128 0x19
 7540 0e6e 37000000 		.4byte	.LASF132
 7541 0e72 01       		.byte	0x1
 7542 0e73 690B     		.2byte	0xb69
 7543 0e75 520E0000 		.4byte	0xe52
 7544 0e79 02       		.uleb128 0x2
 7545 0e7a 91       		.byte	0x91
 7546 0e7b 6C       		.sleb128 -20
 7547 0e7c 19       		.uleb128 0x19
 7548 0e7d 25020000 		.4byte	.LASF133
 7549 0e81 01       		.byte	0x1
 7550 0e82 690B     		.2byte	0xb69
 7551 0e84 2B070000 		.4byte	0x72b
 7552 0e88 02       		.uleb128 0x2
 7553 0e89 91       		.byte	0x91
 7554 0e8a 68       		.sleb128 -24
 7555 0e8b 1E       		.uleb128 0x1e
 7556 0e8c B1030000 		.4byte	0x3b1
 7557 0e90 10000000 		.4byte	.LBB146
 7558 0e94 12000000 		.4byte	.LBE146-.LBB146
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 227


 7559 0e98 01       		.byte	0x1
 7560 0e99 6B0B     		.2byte	0xb6b
 7561 0e9b 1B       		.uleb128 0x1b
 7562 0e9c 10000000 		.4byte	.LBB147
 7563 0ea0 12000000 		.4byte	.LBE147-.LBB147
 7564 0ea4 1F       		.uleb128 0x1f
 7565 0ea5 BD030000 		.4byte	0x3bd
 7566 0ea9 02       		.uleb128 0x2
 7567 0eaa 91       		.byte	0x91
 7568 0eab 74       		.sleb128 -12
 7569 0eac 00       		.byte	0
 7570 0ead 00       		.byte	0
 7571 0eae 00       		.byte	0
 7572 0eaf 20       		.uleb128 0x20
 7573 0eb0 D9040000 		.4byte	.LASF134
 7574 0eb4 01       		.byte	0x1
 7575 0eb5 7A0B     		.2byte	0xb7a
 7576 0eb7 00000000 		.4byte	.LFB160
 7577 0ebb 74000000 		.4byte	.LFE160-.LFB160
 7578 0ebf 01       		.uleb128 0x1
 7579 0ec0 9C       		.byte	0x9c
 7580 0ec1 3D0F0000 		.4byte	0xf3d
 7581 0ec5 19       		.uleb128 0x19
 7582 0ec6 37000000 		.4byte	.LASF132
 7583 0eca 01       		.byte	0x1
 7584 0ecb 7A0B     		.2byte	0xb7a
 7585 0ecd A50D0000 		.4byte	0xda5
 7586 0ed1 02       		.uleb128 0x2
 7587 0ed2 91       		.byte	0x91
 7588 0ed3 6C       		.sleb128 -20
 7589 0ed4 19       		.uleb128 0x19
 7590 0ed5 570A0000 		.4byte	.LASF28
 7591 0ed9 01       		.byte	0x1
 7592 0eda 7A0B     		.2byte	0xb7a
 7593 0edc 2B070000 		.4byte	0x72b
 7594 0ee0 02       		.uleb128 0x2
 7595 0ee1 91       		.byte	0x91
 7596 0ee2 68       		.sleb128 -24
 7597 0ee3 19       		.uleb128 0x19
 7598 0ee4 25020000 		.4byte	.LASF133
 7599 0ee8 01       		.byte	0x1
 7600 0ee9 7A0B     		.2byte	0xb7a
 7601 0eeb 2B070000 		.4byte	0x72b
 7602 0eef 02       		.uleb128 0x2
 7603 0ef0 91       		.byte	0x91
 7604 0ef1 64       		.sleb128 -28
 7605 0ef2 21       		.uleb128 0x21
 7606 0ef3 B1030000 		.4byte	0x3b1
 7607 0ef7 12000000 		.4byte	.LBB148
 7608 0efb 12000000 		.4byte	.LBE148-.LBB148
 7609 0eff 01       		.byte	0x1
 7610 0f00 7C0B     		.2byte	0xb7c
 7611 0f02 190F0000 		.4byte	0xf19
 7612 0f06 1B       		.uleb128 0x1b
 7613 0f07 12000000 		.4byte	.LBB149
 7614 0f0b 12000000 		.4byte	.LBE149-.LBB149
 7615 0f0f 1F       		.uleb128 0x1f
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 228


 7616 0f10 BD030000 		.4byte	0x3bd
 7617 0f14 02       		.uleb128 0x2
 7618 0f15 91       		.byte	0x91
 7619 0f16 70       		.sleb128 -16
 7620 0f17 00       		.byte	0
 7621 0f18 00       		.byte	0
 7622 0f19 1E       		.uleb128 0x1e
 7623 0f1a B1030000 		.4byte	0x3b1
 7624 0f1e 2E000000 		.4byte	.LBB150
 7625 0f22 12000000 		.4byte	.LBE150-.LBB150
 7626 0f26 01       		.byte	0x1
 7627 0f27 800B     		.2byte	0xb80
 7628 0f29 1B       		.uleb128 0x1b
 7629 0f2a 2E000000 		.4byte	.LBB151
 7630 0f2e 12000000 		.4byte	.LBE151-.LBB151
 7631 0f32 1F       		.uleb128 0x1f
 7632 0f33 BD030000 		.4byte	0x3bd
 7633 0f37 02       		.uleb128 0x2
 7634 0f38 91       		.byte	0x91
 7635 0f39 74       		.sleb128 -12
 7636 0f3a 00       		.byte	0
 7637 0f3b 00       		.byte	0
 7638 0f3c 00       		.byte	0
 7639 0f3d 20       		.uleb128 0x20
 7640 0f3e 410C0000 		.4byte	.LASF135
 7641 0f42 01       		.byte	0x1
 7642 0f43 940B     		.2byte	0xb94
 7643 0f45 00000000 		.4byte	.LFB161
 7644 0f49 54000000 		.4byte	.LFE161-.LFB161
 7645 0f4d 01       		.uleb128 0x1
 7646 0f4e 9C       		.byte	0x9c
 7647 0f4f A40F0000 		.4byte	0xfa4
 7648 0f53 19       		.uleb128 0x19
 7649 0f54 37000000 		.4byte	.LASF132
 7650 0f58 01       		.byte	0x1
 7651 0f59 940B     		.2byte	0xb94
 7652 0f5b 520E0000 		.4byte	0xe52
 7653 0f5f 02       		.uleb128 0x2
 7654 0f60 91       		.byte	0x91
 7655 0f61 6C       		.sleb128 -20
 7656 0f62 19       		.uleb128 0x19
 7657 0f63 25020000 		.4byte	.LASF133
 7658 0f67 01       		.byte	0x1
 7659 0f68 940B     		.2byte	0xb94
 7660 0f6a 4B010000 		.4byte	0x14b
 7661 0f6e 02       		.uleb128 0x2
 7662 0f6f 91       		.byte	0x91
 7663 0f70 68       		.sleb128 -24
 7664 0f71 19       		.uleb128 0x19
 7665 0f72 270B0000 		.4byte	.LASF136
 7666 0f76 01       		.byte	0x1
 7667 0f77 940B     		.2byte	0xb94
 7668 0f79 A40F0000 		.4byte	0xfa4
 7669 0f7d 02       		.uleb128 0x2
 7670 0f7e 91       		.byte	0x91
 7671 0f7f 64       		.sleb128 -28
 7672 0f80 1E       		.uleb128 0x1e
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 229


 7673 0f81 B1030000 		.4byte	0x3b1
 7674 0f85 12000000 		.4byte	.LBB152
 7675 0f89 12000000 		.4byte	.LBE152-.LBB152
 7676 0f8d 01       		.byte	0x1
 7677 0f8e 960B     		.2byte	0xb96
 7678 0f90 1B       		.uleb128 0x1b
 7679 0f91 12000000 		.4byte	.LBB153
 7680 0f95 12000000 		.4byte	.LBE153-.LBB153
 7681 0f99 1F       		.uleb128 0x1f
 7682 0f9a BD030000 		.4byte	0x3bd
 7683 0f9e 02       		.uleb128 0x2
 7684 0f9f 91       		.byte	0x91
 7685 0fa0 74       		.sleb128 -12
 7686 0fa1 00       		.byte	0
 7687 0fa2 00       		.byte	0
 7688 0fa3 00       		.byte	0
 7689 0fa4 07       		.uleb128 0x7
 7690 0fa5 35010000 		.4byte	0x135
 7691 0fa9 18       		.uleb128 0x18
 7692 0faa 3E0A0000 		.4byte	.LASF137
 7693 0fae 01       		.byte	0x1
 7694 0faf B30B     		.2byte	0xbb3
 7695 0fb1 35010000 		.4byte	0x135
 7696 0fb5 00000000 		.4byte	.LFB162
 7697 0fb9 C4000000 		.4byte	.LFE162-.LFB162
 7698 0fbd 01       		.uleb128 0x1
 7699 0fbe 9C       		.byte	0x9c
 7700 0fbf 14100000 		.4byte	0x1014
 7701 0fc3 19       		.uleb128 0x19
 7702 0fc4 37000000 		.4byte	.LASF132
 7703 0fc8 01       		.byte	0x1
 7704 0fc9 B30B     		.2byte	0xbb3
 7705 0fcb 1F100000 		.4byte	0x101f
 7706 0fcf 02       		.uleb128 0x2
 7707 0fd0 91       		.byte	0x91
 7708 0fd1 64       		.sleb128 -28
 7709 0fd2 1A       		.uleb128 0x1a
 7710 0fd3 50080000 		.4byte	.LASF138
 7711 0fd7 01       		.byte	0x1
 7712 0fd8 B50B     		.2byte	0xbb5
 7713 0fda C9040000 		.4byte	0x4c9
 7714 0fde 02       		.uleb128 0x2
 7715 0fdf 91       		.byte	0x91
 7716 0fe0 70       		.sleb128 -16
 7717 0fe1 1A       		.uleb128 0x1a
 7718 0fe2 AF040000 		.4byte	.LASF80
 7719 0fe6 01       		.byte	0x1
 7720 0fe7 B60B     		.2byte	0xbb6
 7721 0fe9 35010000 		.4byte	0x135
 7722 0fed 02       		.uleb128 0x2
 7723 0fee 91       		.byte	0x91
 7724 0fef 74       		.sleb128 -12
 7725 0ff0 1E       		.uleb128 0x1e
 7726 0ff1 B1030000 		.4byte	0x3b1
 7727 0ff5 16000000 		.4byte	.LBB154
 7728 0ff9 12000000 		.4byte	.LBE154-.LBB154
 7729 0ffd 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 230


 7730 0ffe C60B     		.2byte	0xbc6
 7731 1000 1B       		.uleb128 0x1b
 7732 1001 16000000 		.4byte	.LBB155
 7733 1005 12000000 		.4byte	.LBE155-.LBB155
 7734 1009 1F       		.uleb128 0x1f
 7735 100a BD030000 		.4byte	0x3bd
 7736 100e 02       		.uleb128 0x2
 7737 100f 91       		.byte	0x91
 7738 1010 6C       		.sleb128 -20
 7739 1011 00       		.byte	0
 7740 1012 00       		.byte	0
 7741 1013 00       		.byte	0
 7742 1014 06       		.uleb128 0x6
 7743 1015 04       		.byte	0x4
 7744 1016 1A100000 		.4byte	0x101a
 7745 101a 07       		.uleb128 0x7
 7746 101b 38020000 		.4byte	0x238
 7747 101f 07       		.uleb128 0x7
 7748 1020 14100000 		.4byte	0x1014
 7749 1024 20       		.uleb128 0x20
 7750 1025 C60D0000 		.4byte	.LASF139
 7751 1029 01       		.byte	0x1
 7752 102a F70B     		.2byte	0xbf7
 7753 102c 00000000 		.4byte	.LFB163
 7754 1030 C0000000 		.4byte	.LFE163-.LFB163
 7755 1034 01       		.uleb128 0x1
 7756 1035 9C       		.byte	0x9c
 7757 1036 B2100000 		.4byte	0x10b2
 7758 103a 19       		.uleb128 0x19
 7759 103b E10A0000 		.4byte	.LASF140
 7760 103f 01       		.byte	0x1
 7761 1040 F70B     		.2byte	0xbf7
 7762 1042 32020000 		.4byte	0x232
 7763 1046 02       		.uleb128 0x2
 7764 1047 91       		.byte	0x91
 7765 1048 64       		.sleb128 -28
 7766 1049 19       		.uleb128 0x19
 7767 104a 570A0000 		.4byte	.LASF28
 7768 104e 01       		.byte	0x1
 7769 104f F70B     		.2byte	0xbf7
 7770 1051 2B070000 		.4byte	0x72b
 7771 1055 02       		.uleb128 0x2
 7772 1056 91       		.byte	0x91
 7773 1057 60       		.sleb128 -32
 7774 1058 1A       		.uleb128 0x1a
 7775 1059 50080000 		.4byte	.LASF138
 7776 105d 01       		.byte	0x1
 7777 105e F90B     		.2byte	0xbf9
 7778 1060 C9040000 		.4byte	0x4c9
 7779 1064 02       		.uleb128 0x2
 7780 1065 91       		.byte	0x91
 7781 1066 74       		.sleb128 -12
 7782 1067 21       		.uleb128 0x21
 7783 1068 B1030000 		.4byte	0x3b1
 7784 106c 12000000 		.4byte	.LBB156
 7785 1070 12000000 		.4byte	.LBE156-.LBB156
 7786 1074 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 231


 7787 1075 FD0B     		.2byte	0xbfd
 7788 1077 8E100000 		.4byte	0x108e
 7789 107b 1B       		.uleb128 0x1b
 7790 107c 12000000 		.4byte	.LBB157
 7791 1080 12000000 		.4byte	.LBE157-.LBB157
 7792 1084 1F       		.uleb128 0x1f
 7793 1085 BD030000 		.4byte	0x3bd
 7794 1089 02       		.uleb128 0x2
 7795 108a 91       		.byte	0x91
 7796 108b 6C       		.sleb128 -20
 7797 108c 00       		.byte	0
 7798 108d 00       		.byte	0
 7799 108e 1E       		.uleb128 0x1e
 7800 108f B1030000 		.4byte	0x3b1
 7801 1093 3C000000 		.4byte	.LBB158
 7802 1097 12000000 		.4byte	.LBE158-.LBB158
 7803 109b 01       		.byte	0x1
 7804 109c 050C     		.2byte	0xc05
 7805 109e 1B       		.uleb128 0x1b
 7806 109f 3C000000 		.4byte	.LBB159
 7807 10a3 12000000 		.4byte	.LBE159-.LBB159
 7808 10a7 1F       		.uleb128 0x1f
 7809 10a8 BD030000 		.4byte	0x3bd
 7810 10ac 02       		.uleb128 0x2
 7811 10ad 91       		.byte	0x91
 7812 10ae 70       		.sleb128 -16
 7813 10af 00       		.byte	0
 7814 10b0 00       		.byte	0
 7815 10b1 00       		.byte	0
 7816 10b2 20       		.uleb128 0x20
 7817 10b3 910D0000 		.4byte	.LASF141
 7818 10b7 01       		.byte	0x1
 7819 10b8 190C     		.2byte	0xc19
 7820 10ba 00000000 		.4byte	.LFB164
 7821 10be 4C000000 		.4byte	.LFE164-.LFB164
 7822 10c2 01       		.uleb128 0x1
 7823 10c3 9C       		.byte	0x9c
 7824 10c4 FB100000 		.4byte	0x10fb
 7825 10c8 19       		.uleb128 0x19
 7826 10c9 8D010000 		.4byte	.LASF142
 7827 10cd 01       		.byte	0x1
 7828 10ce 190C     		.2byte	0xc19
 7829 10d0 01110000 		.4byte	0x1101
 7830 10d4 02       		.uleb128 0x2
 7831 10d5 91       		.byte	0x91
 7832 10d6 6C       		.sleb128 -20
 7833 10d7 1E       		.uleb128 0x1e
 7834 10d8 B1030000 		.4byte	0x3b1
 7835 10dc 0E000000 		.4byte	.LBB160
 7836 10e0 12000000 		.4byte	.LBE160-.LBB160
 7837 10e4 01       		.byte	0x1
 7838 10e5 1B0C     		.2byte	0xc1b
 7839 10e7 1B       		.uleb128 0x1b
 7840 10e8 0E000000 		.4byte	.LBB161
 7841 10ec 12000000 		.4byte	.LBE161-.LBB161
 7842 10f0 1F       		.uleb128 0x1f
 7843 10f1 BD030000 		.4byte	0x3bd
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 232


 7844 10f5 02       		.uleb128 0x2
 7845 10f6 91       		.byte	0x91
 7846 10f7 74       		.sleb128 -12
 7847 10f8 00       		.byte	0
 7848 10f9 00       		.byte	0
 7849 10fa 00       		.byte	0
 7850 10fb 06       		.uleb128 0x6
 7851 10fc 04       		.byte	0x4
 7852 10fd A9020000 		.4byte	0x2a9
 7853 1101 07       		.uleb128 0x7
 7854 1102 FB100000 		.4byte	0x10fb
 7855 1106 28       		.uleb128 0x28
 7856 1107 A20B0000 		.4byte	.LASF143
 7857 110b 01       		.byte	0x1
 7858 110c 250C     		.2byte	0xc25
 7859 110e 00000000 		.4byte	.LFB165
 7860 1112 2C000000 		.4byte	.LFE165-.LFB165
 7861 1116 01       		.uleb128 0x1
 7862 1117 9C       		.byte	0x9c
 7863 1118 2C110000 		.4byte	0x112c
 7864 111c 19       		.uleb128 0x19
 7865 111d 8D010000 		.4byte	.LASF142
 7866 1121 01       		.byte	0x1
 7867 1122 250C     		.2byte	0xc25
 7868 1124 01110000 		.4byte	0x1101
 7869 1128 02       		.uleb128 0x2
 7870 1129 91       		.byte	0x91
 7871 112a 74       		.sleb128 -12
 7872 112b 00       		.byte	0
 7873 112c 18       		.uleb128 0x18
 7874 112d CC0A0000 		.4byte	.LASF144
 7875 1131 01       		.byte	0x1
 7876 1132 2D0C     		.2byte	0xc2d
 7877 1134 35010000 		.4byte	0x135
 7878 1138 00000000 		.4byte	.LFB166
 7879 113c C0000000 		.4byte	.LFE166-.LFB166
 7880 1140 01       		.uleb128 0x1
 7881 1141 9C       		.byte	0x9c
 7882 1142 EA110000 		.4byte	0x11ea
 7883 1146 19       		.uleb128 0x19
 7884 1147 8D010000 		.4byte	.LASF142
 7885 114b 01       		.byte	0x1
 7886 114c 2D0C     		.2byte	0xc2d
 7887 114e 01110000 		.4byte	0x1101
 7888 1152 02       		.uleb128 0x2
 7889 1153 91       		.byte	0x91
 7890 1154 5C       		.sleb128 -36
 7891 1155 19       		.uleb128 0x19
 7892 1156 7D060000 		.4byte	.LASF145
 7893 115a 01       		.byte	0x1
 7894 115b 2D0C     		.2byte	0xc2d
 7895 115d 26070000 		.4byte	0x726
 7896 1161 02       		.uleb128 0x2
 7897 1162 91       		.byte	0x91
 7898 1163 58       		.sleb128 -40
 7899 1164 1A       		.uleb128 0x1a
 7900 1165 AF040000 		.4byte	.LASF80
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 233


 7901 1169 01       		.byte	0x1
 7902 116a 2F0C     		.2byte	0xc2f
 7903 116c 35010000 		.4byte	0x135
 7904 1170 02       		.uleb128 0x2
 7905 1171 91       		.byte	0x91
 7906 1172 74       		.sleb128 -12
 7907 1173 21       		.uleb128 0x21
 7908 1174 B1030000 		.4byte	0x3b1
 7909 1178 10000000 		.4byte	.LBB162
 7910 117c 12000000 		.4byte	.LBE162-.LBB162
 7911 1180 01       		.byte	0x1
 7912 1181 310C     		.2byte	0xc31
 7913 1183 9A110000 		.4byte	0x119a
 7914 1187 1B       		.uleb128 0x1b
 7915 1188 10000000 		.4byte	.LBB163
 7916 118c 12000000 		.4byte	.LBE163-.LBB163
 7917 1190 1F       		.uleb128 0x1f
 7918 1191 BD030000 		.4byte	0x3bd
 7919 1195 02       		.uleb128 0x2
 7920 1196 91       		.byte	0x91
 7921 1197 64       		.sleb128 -28
 7922 1198 00       		.byte	0
 7923 1199 00       		.byte	0
 7924 119a 21       		.uleb128 0x21
 7925 119b B1030000 		.4byte	0x3b1
 7926 119f 2A000000 		.4byte	.LBB164
 7927 11a3 12000000 		.4byte	.LBE164-.LBB164
 7928 11a7 01       		.byte	0x1
 7929 11a8 320C     		.2byte	0xc32
 7930 11aa C1110000 		.4byte	0x11c1
 7931 11ae 1B       		.uleb128 0x1b
 7932 11af 2A000000 		.4byte	.LBB165
 7933 11b3 12000000 		.4byte	.LBE165-.LBB165
 7934 11b7 1F       		.uleb128 0x1f
 7935 11b8 BD030000 		.4byte	0x3bd
 7936 11bc 02       		.uleb128 0x2
 7937 11bd 91       		.byte	0x91
 7938 11be 68       		.sleb128 -24
 7939 11bf 00       		.byte	0
 7940 11c0 00       		.byte	0
 7941 11c1 1B       		.uleb128 0x1b
 7942 11c2 42000000 		.4byte	.LBB166
 7943 11c6 68000000 		.4byte	.LBE166-.LBB166
 7944 11ca 1A       		.uleb128 0x1a
 7945 11cb 34080000 		.4byte	.LASF94
 7946 11cf 01       		.byte	0x1
 7947 11d0 370C     		.2byte	0xc37
 7948 11d2 2B070000 		.4byte	0x72b
 7949 11d6 02       		.uleb128 0x2
 7950 11d7 91       		.byte	0x91
 7951 11d8 70       		.sleb128 -16
 7952 11d9 1A       		.uleb128 0x1a
 7953 11da A4060000 		.4byte	.LASF146
 7954 11de 01       		.byte	0x1
 7955 11df 380C     		.2byte	0xc38
 7956 11e1 2B070000 		.4byte	0x72b
 7957 11e5 02       		.uleb128 0x2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 234


 7958 11e6 91       		.byte	0x91
 7959 11e7 6C       		.sleb128 -20
 7960 11e8 00       		.byte	0
 7961 11e9 00       		.byte	0
 7962 11ea 24       		.uleb128 0x24
 7963 11eb 48090000 		.4byte	.LASF148
 7964 11ef 01       		.byte	0x1
 7965 11f0 6C0C     		.2byte	0xc6c
 7966 11f2 00000000 		.4byte	.LFB167
 7967 11f6 18000000 		.4byte	.LFE167-.LFB167
 7968 11fa 01       		.uleb128 0x1
 7969 11fb 9C       		.byte	0x9c
 7970 11fc 1C       		.uleb128 0x1c
 7971 11fd 98060000 		.4byte	.LASF149
 7972 1201 01       		.byte	0x1
 7973 1202 A30C     		.2byte	0xca3
 7974 1204 00000000 		.4byte	.LFB168
 7975 1208 30000000 		.4byte	.LFE168-.LFB168
 7976 120c 01       		.uleb128 0x1
 7977 120d 9C       		.byte	0x9c
 7978 120e 22120000 		.4byte	0x1222
 7979 1212 19       		.uleb128 0x19
 7980 1213 8A050000 		.4byte	.LASF77
 7981 1217 01       		.byte	0x1
 7982 1218 A30C     		.2byte	0xca3
 7983 121a B0000000 		.4byte	0xb0
 7984 121e 02       		.uleb128 0x2
 7985 121f 91       		.byte	0x91
 7986 1220 74       		.sleb128 -12
 7987 1221 00       		.byte	0
 7988 1222 28       		.uleb128 0x28
 7989 1223 32020000 		.4byte	.LASF150
 7990 1227 01       		.byte	0x1
 7991 1228 420D     		.2byte	0xd42
 7992 122a 00000000 		.4byte	.LFB169
 7993 122e 40000000 		.4byte	.LFE169-.LFB169
 7994 1232 01       		.uleb128 0x1
 7995 1233 9C       		.byte	0x9c
 7996 1234 75120000 		.4byte	0x1275
 7997 1238 19       		.uleb128 0x19
 7998 1239 54020000 		.4byte	.LASF151
 7999 123d 01       		.byte	0x1
 8000 123e 420D     		.2byte	0xd42
 8001 1240 43020000 		.4byte	0x243
 8002 1244 02       		.uleb128 0x2
 8003 1245 91       		.byte	0x91
 8004 1246 6C       		.sleb128 -20
 8005 1247 19       		.uleb128 0x19
 8006 1248 31060000 		.4byte	.LASF152
 8007 124c 01       		.byte	0x1
 8008 124d 420D     		.2byte	0xd42
 8009 124f 35010000 		.4byte	0x135
 8010 1253 02       		.uleb128 0x2
 8011 1254 91       		.byte	0x91
 8012 1255 68       		.sleb128 -24
 8013 1256 19       		.uleb128 0x19
 8014 1257 1D080000 		.4byte	.LASF153
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 235


 8015 125b 01       		.byte	0x1
 8016 125c 420D     		.2byte	0xd42
 8017 125e B0000000 		.4byte	0xb0
 8018 1262 02       		.uleb128 0x2
 8019 1263 91       		.byte	0x91
 8020 1264 64       		.sleb128 -28
 8021 1265 1A       		.uleb128 0x1a
 8022 1266 C9050000 		.4byte	.LASF86
 8023 126a 01       		.byte	0x1
 8024 126b 440D     		.2byte	0xd44
 8025 126d C9040000 		.4byte	0x4c9
 8026 1271 02       		.uleb128 0x2
 8027 1272 91       		.byte	0x91
 8028 1273 74       		.sleb128 -12
 8029 1274 00       		.byte	0
 8030 1275 25       		.uleb128 0x25
 8031 1276 550D0000 		.4byte	.LASF154
 8032 127a 01       		.byte	0x1
 8033 127b 520D     		.2byte	0xd52
 8034 127d B0000000 		.4byte	0xb0
 8035 1281 00000000 		.4byte	.LFB170
 8036 1285 4C000000 		.4byte	.LFE170-.LFB170
 8037 1289 01       		.uleb128 0x1
 8038 128a 9C       		.byte	0x9c
 8039 128b CC120000 		.4byte	0x12cc
 8040 128f 19       		.uleb128 0x19
 8041 1290 BA030000 		.4byte	.LASF122
 8042 1294 01       		.byte	0x1
 8043 1295 520D     		.2byte	0xd52
 8044 1297 43020000 		.4byte	0x243
 8045 129b 02       		.uleb128 0x2
 8046 129c 91       		.byte	0x91
 8047 129d 6C       		.sleb128 -20
 8048 129e 19       		.uleb128 0x19
 8049 129f 31060000 		.4byte	.LASF152
 8050 12a3 01       		.byte	0x1
 8051 12a4 520D     		.2byte	0xd52
 8052 12a6 35010000 		.4byte	0x135
 8053 12aa 02       		.uleb128 0x2
 8054 12ab 91       		.byte	0x91
 8055 12ac 68       		.sleb128 -24
 8056 12ad 1A       		.uleb128 0x1a
 8057 12ae 2B080000 		.4byte	.LASF155
 8058 12b2 01       		.byte	0x1
 8059 12b3 540D     		.2byte	0xd54
 8060 12b5 B0000000 		.4byte	0xb0
 8061 12b9 02       		.uleb128 0x2
 8062 12ba 91       		.byte	0x91
 8063 12bb 74       		.sleb128 -12
 8064 12bc 1A       		.uleb128 0x1a
 8065 12bd C9050000 		.4byte	.LASF86
 8066 12c1 01       		.byte	0x1
 8067 12c2 550D     		.2byte	0xd55
 8068 12c4 C9040000 		.4byte	0x4c9
 8069 12c8 02       		.uleb128 0x2
 8070 12c9 91       		.byte	0x91
 8071 12ca 70       		.sleb128 -16
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 236


 8072 12cb 00       		.byte	0
 8073 12cc 1C       		.uleb128 0x1c
 8074 12cd 38060000 		.4byte	.LASF156
 8075 12d1 01       		.byte	0x1
 8076 12d2 770D     		.2byte	0xd77
 8077 12d4 00000000 		.4byte	.LFB171
 8078 12d8 80000000 		.4byte	.LFE171-.LFB171
 8079 12dc 01       		.uleb128 0x1
 8080 12dd 9C       		.byte	0x9c
 8081 12de F2120000 		.4byte	0x12f2
 8082 12e2 1A       		.uleb128 0x1a
 8083 12e3 380D0000 		.4byte	.LASF62
 8084 12e7 01       		.byte	0x1
 8085 12e8 790D     		.2byte	0xd79
 8086 12ea 40010000 		.4byte	0x140
 8087 12ee 02       		.uleb128 0x2
 8088 12ef 91       		.byte	0x91
 8089 12f0 74       		.sleb128 -12
 8090 12f1 00       		.byte	0
 8091 12f2 1C       		.uleb128 0x1c
 8092 12f3 C7090000 		.4byte	.LASF157
 8093 12f7 01       		.byte	0x1
 8094 12f8 970D     		.2byte	0xd97
 8095 12fa 00000000 		.4byte	.LFB172
 8096 12fe 58000000 		.4byte	.LFE172-.LFB172
 8097 1302 01       		.uleb128 0x1
 8098 1303 9C       		.byte	0x9c
 8099 1304 22130000 		.4byte	0x1322
 8100 1308 1B       		.uleb128 0x1b
 8101 1309 06000000 		.4byte	.LBB167
 8102 130d 3E000000 		.4byte	.LBE167-.LBB167
 8103 1311 1A       		.uleb128 0x1a
 8104 1312 C9050000 		.4byte	.LASF86
 8105 1316 01       		.byte	0x1
 8106 1317 9E0D     		.2byte	0xd9e
 8107 1319 C9040000 		.4byte	0x4c9
 8108 131d 02       		.uleb128 0x2
 8109 131e 91       		.byte	0x91
 8110 131f 74       		.sleb128 -12
 8111 1320 00       		.byte	0
 8112 1321 00       		.byte	0
 8113 1322 1C       		.uleb128 0x1c
 8114 1323 8B060000 		.4byte	.LASF158
 8115 1327 01       		.byte	0x1
 8116 1328 670E     		.2byte	0xe67
 8117 132a 00000000 		.4byte	.LFB173
 8118 132e 20000000 		.4byte	.LFE173-.LFB173
 8119 1332 01       		.uleb128 0x1
 8120 1333 9C       		.byte	0x9c
 8121 1334 48130000 		.4byte	0x1348
 8122 1338 19       		.uleb128 0x19
 8123 1339 C9050000 		.4byte	.LASF86
 8124 133d 01       		.byte	0x1
 8125 133e 670E     		.2byte	0xe67
 8126 1340 C9040000 		.4byte	0x4c9
 8127 1344 02       		.uleb128 0x2
 8128 1345 91       		.byte	0x91
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 237


 8129 1346 74       		.sleb128 -12
 8130 1347 00       		.byte	0
 8131 1348 29       		.uleb128 0x29
 8132 1349 91030000 		.4byte	.LASF159
 8133 134d 01       		.byte	0x1
 8134 134e 9D0E     		.2byte	0xe9d
 8135 1350 00000000 		.4byte	.LFB174
 8136 1354 4C000000 		.4byte	.LFE174-.LFB174
 8137 1358 01       		.uleb128 0x1
 8138 1359 9C       		.byte	0x9c
 8139 135a 6E130000 		.4byte	0x136e
 8140 135e 1A       		.uleb128 0x1a
 8141 135f C9050000 		.4byte	.LASF86
 8142 1363 01       		.byte	0x1
 8143 1364 9F0E     		.2byte	0xe9f
 8144 1366 C9040000 		.4byte	0x4c9
 8145 136a 02       		.uleb128 0x2
 8146 136b 91       		.byte	0x91
 8147 136c 74       		.sleb128 -12
 8148 136d 00       		.byte	0
 8149 136e 25       		.uleb128 0x25
 8150 136f C3000000 		.4byte	.LASF160
 8151 1373 01       		.byte	0x1
 8152 1374 B70E     		.2byte	0xeb7
 8153 1376 43020000 		.4byte	0x243
 8154 137a 00000000 		.4byte	.LFB175
 8155 137e 20000000 		.4byte	.LFE175-.LFB175
 8156 1382 01       		.uleb128 0x1
 8157 1383 9C       		.byte	0x9c
 8158 1384 98130000 		.4byte	0x1398
 8159 1388 1A       		.uleb128 0x1a
 8160 1389 AF040000 		.4byte	.LASF80
 8161 138d 01       		.byte	0x1
 8162 138e B90E     		.2byte	0xeb9
 8163 1390 43020000 		.4byte	0x243
 8164 1394 02       		.uleb128 0x2
 8165 1395 91       		.byte	0x91
 8166 1396 74       		.sleb128 -12
 8167 1397 00       		.byte	0
 8168 1398 25       		.uleb128 0x25
 8169 1399 8C090000 		.4byte	.LASF161
 8170 139d 01       		.byte	0x1
 8171 139e C80E     		.2byte	0xec8
 8172 13a0 35010000 		.4byte	0x135
 8173 13a4 00000000 		.4byte	.LFB176
 8174 13a8 3C000000 		.4byte	.LFE176-.LFB176
 8175 13ac 01       		.uleb128 0x1
 8176 13ad 9C       		.byte	0x9c
 8177 13ae C2130000 		.4byte	0x13c2
 8178 13b2 1A       		.uleb128 0x1a
 8179 13b3 AF040000 		.4byte	.LASF80
 8180 13b7 01       		.byte	0x1
 8181 13b8 CA0E     		.2byte	0xeca
 8182 13ba 35010000 		.4byte	0x135
 8183 13be 02       		.uleb128 0x2
 8184 13bf 91       		.byte	0x91
 8185 13c0 74       		.sleb128 -12
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 238


 8186 13c1 00       		.byte	0
 8187 13c2 25       		.uleb128 0x25
 8188 13c3 9B000000 		.4byte	.LASF162
 8189 13c7 01       		.byte	0x1
 8190 13c8 2911     		.2byte	0x1129
 8191 13ca 4B010000 		.4byte	0x14b
 8192 13ce 00000000 		.4byte	.LFB177
 8193 13d2 30000000 		.4byte	.LFE177-.LFB177
 8194 13d6 01       		.uleb128 0x1
 8195 13d7 9C       		.byte	0x9c
 8196 13d8 EC130000 		.4byte	0x13ec
 8197 13dc 1A       		.uleb128 0x1a
 8198 13dd 28060000 		.4byte	.LASF100
 8199 13e1 01       		.byte	0x1
 8200 13e2 2B11     		.2byte	0x112b
 8201 13e4 4B010000 		.4byte	0x14b
 8202 13e8 02       		.uleb128 0x2
 8203 13e9 91       		.byte	0x91
 8204 13ea 74       		.sleb128 -12
 8205 13eb 00       		.byte	0
 8206 13ec 18       		.uleb128 0x18
 8207 13ed 0E070000 		.4byte	.LASF163
 8208 13f1 01       		.byte	0x1
 8209 13f2 4A11     		.2byte	0x114a
 8210 13f4 EB000000 		.4byte	0xeb
 8211 13f8 00000000 		.4byte	.LFB178
 8212 13fc 90000000 		.4byte	.LFE178-.LFB178
 8213 1400 01       		.uleb128 0x1
 8214 1401 9C       		.byte	0x9c
 8215 1402 34140000 		.4byte	0x1434
 8216 1406 19       		.uleb128 0x19
 8217 1407 620B0000 		.4byte	.LASF164
 8218 140b 01       		.byte	0x1
 8219 140c 4A11     		.2byte	0x114a
 8220 140e 35010000 		.4byte	0x135
 8221 1412 02       		.uleb128 0x2
 8222 1413 91       		.byte	0x91
 8223 1414 6C       		.sleb128 -20
 8224 1415 19       		.uleb128 0x19
 8225 1416 25020000 		.4byte	.LASF133
 8226 141a 01       		.byte	0x1
 8227 141b 4A11     		.2byte	0x114a
 8228 141d 4B010000 		.4byte	0x14b
 8229 1421 02       		.uleb128 0x2
 8230 1422 91       		.byte	0x91
 8231 1423 68       		.sleb128 -24
 8232 1424 1A       		.uleb128 0x1a
 8233 1425 710C0000 		.4byte	.LASF165
 8234 1429 01       		.byte	0x1
 8235 142a 4C11     		.2byte	0x114c
 8236 142c EB000000 		.4byte	0xeb
 8237 1430 02       		.uleb128 0x2
 8238 1431 91       		.byte	0x91
 8239 1432 74       		.sleb128 -12
 8240 1433 00       		.byte	0
 8241 1434 18       		.uleb128 0x18
 8242 1435 610C0000 		.4byte	.LASF166
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 239


 8243 1439 01       		.byte	0x1
 8244 143a 8E11     		.2byte	0x118e
 8245 143c 35010000 		.4byte	0x135
 8246 1440 00000000 		.4byte	.LFB179
 8247 1444 B4000000 		.4byte	.LFE179-.LFB179
 8248 1448 01       		.uleb128 0x1
 8249 1449 9C       		.byte	0x9c
 8250 144a 9A140000 		.4byte	0x149a
 8251 144e 19       		.uleb128 0x19
 8252 144f DE050000 		.4byte	.LASF167
 8253 1453 01       		.byte	0x1
 8254 1454 8E11     		.2byte	0x118e
 8255 1456 EB000000 		.4byte	0xeb
 8256 145a 02       		.uleb128 0x2
 8257 145b 91       		.byte	0x91
 8258 145c 6C       		.sleb128 -20
 8259 145d 19       		.uleb128 0x19
 8260 145e A60D0000 		.4byte	.LASF168
 8261 1462 01       		.byte	0x1
 8262 1463 8E11     		.2byte	0x118e
 8263 1465 EB000000 		.4byte	0xeb
 8264 1469 02       		.uleb128 0x2
 8265 146a 91       		.byte	0x91
 8266 146b 68       		.sleb128 -24
 8267 146c 19       		.uleb128 0x19
 8268 146d EF070000 		.4byte	.LASF169
 8269 1471 01       		.byte	0x1
 8270 1472 8E11     		.2byte	0x118e
 8271 1474 9A140000 		.4byte	0x149a
 8272 1478 02       		.uleb128 0x2
 8273 1479 91       		.byte	0x91
 8274 147a 64       		.sleb128 -28
 8275 147b 19       		.uleb128 0x19
 8276 147c 25020000 		.4byte	.LASF133
 8277 1480 01       		.byte	0x1
 8278 1481 8E11     		.2byte	0x118e
 8279 1483 4B010000 		.4byte	0x14b
 8280 1487 02       		.uleb128 0x2
 8281 1488 91       		.byte	0x91
 8282 1489 60       		.sleb128 -32
 8283 148a 1A       		.uleb128 0x1a
 8284 148b AF040000 		.4byte	.LASF80
 8285 148f 01       		.byte	0x1
 8286 1490 9011     		.2byte	0x1190
 8287 1492 35010000 		.4byte	0x135
 8288 1496 02       		.uleb128 0x2
 8289 1497 91       		.byte	0x91
 8290 1498 74       		.sleb128 -12
 8291 1499 00       		.byte	0
 8292 149a 06       		.uleb128 0x6
 8293 149b 04       		.byte	0x4
 8294 149c EB000000 		.4byte	0xeb
 8295 14a0 18       		.uleb128 0x18
 8296 14a1 840B0000 		.4byte	.LASF170
 8297 14a5 01       		.byte	0x1
 8298 14a6 DE11     		.2byte	0x11de
 8299 14a8 35010000 		.4byte	0x135
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 240


 8300 14ac 00000000 		.4byte	.LFB180
 8301 14b0 44010000 		.4byte	.LFE180-.LFB180
 8302 14b4 01       		.uleb128 0x1
 8303 14b5 9C       		.byte	0x9c
 8304 14b6 6E150000 		.4byte	0x156e
 8305 14ba 19       		.uleb128 0x19
 8306 14bb 67050000 		.4byte	.LASF171
 8307 14bf 01       		.byte	0x1
 8308 14c0 DE11     		.2byte	0x11de
 8309 14c2 43020000 		.4byte	0x243
 8310 14c6 02       		.uleb128 0x2
 8311 14c7 91       		.byte	0x91
 8312 14c8 5C       		.sleb128 -36
 8313 14c9 19       		.uleb128 0x19
 8314 14ca 93000000 		.4byte	.LASF172
 8315 14ce 01       		.byte	0x1
 8316 14cf DE11     		.2byte	0x11de
 8317 14d1 EB000000 		.4byte	0xeb
 8318 14d5 02       		.uleb128 0x2
 8319 14d6 91       		.byte	0x91
 8320 14d7 58       		.sleb128 -40
 8321 14d8 19       		.uleb128 0x19
 8322 14d9 7E020000 		.4byte	.LASF173
 8323 14dd 01       		.byte	0x1
 8324 14de DE11     		.2byte	0x11de
 8325 14e0 79020000 		.4byte	0x279
 8326 14e4 02       		.uleb128 0x2
 8327 14e5 91       		.byte	0x91
 8328 14e6 57       		.sleb128 -41
 8329 14e7 19       		.uleb128 0x19
 8330 14e8 74030000 		.4byte	.LASF174
 8331 14ec 01       		.byte	0x1
 8332 14ed DE11     		.2byte	0x11de
 8333 14ef 9A140000 		.4byte	0x149a
 8334 14f3 02       		.uleb128 0x2
 8335 14f4 91       		.byte	0x91
 8336 14f5 50       		.sleb128 -48
 8337 14f6 1A       		.uleb128 0x1a
 8338 14f7 C9050000 		.4byte	.LASF86
 8339 14fb 01       		.byte	0x1
 8340 14fc E011     		.2byte	0x11e0
 8341 14fe C9040000 		.4byte	0x4c9
 8342 1502 02       		.uleb128 0x2
 8343 1503 91       		.byte	0x91
 8344 1504 70       		.sleb128 -16
 8345 1505 1A       		.uleb128 0x1a
 8346 1506 AF040000 		.4byte	.LASF80
 8347 150a 01       		.byte	0x1
 8348 150b E111     		.2byte	0x11e1
 8349 150d 35010000 		.4byte	0x135
 8350 1511 02       		.uleb128 0x2
 8351 1512 91       		.byte	0x91
 8352 1513 74       		.sleb128 -12
 8353 1514 1A       		.uleb128 0x1a
 8354 1515 FB020000 		.4byte	.LASF175
 8355 1519 01       		.byte	0x1
 8356 151a E211     		.2byte	0x11e2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 241


 8357 151c CA000000 		.4byte	0xca
 8358 1520 02       		.uleb128 0x2
 8359 1521 91       		.byte	0x91
 8360 1522 6F       		.sleb128 -17
 8361 1523 21       		.uleb128 0x21
 8362 1524 B1030000 		.4byte	0x3b1
 8363 1528 1A000000 		.4byte	.LBB168
 8364 152c 12000000 		.4byte	.LBE168-.LBB168
 8365 1530 01       		.byte	0x1
 8366 1531 E411     		.2byte	0x11e4
 8367 1533 4A150000 		.4byte	0x154a
 8368 1537 1B       		.uleb128 0x1b
 8369 1538 1A000000 		.4byte	.LBB169
 8370 153c 12000000 		.4byte	.LBE169-.LBB169
 8371 1540 1F       		.uleb128 0x1f
 8372 1541 BD030000 		.4byte	0x3bd
 8373 1545 02       		.uleb128 0x2
 8374 1546 91       		.byte	0x91
 8375 1547 64       		.sleb128 -28
 8376 1548 00       		.byte	0
 8377 1549 00       		.byte	0
 8378 154a 1E       		.uleb128 0x1e
 8379 154b B1030000 		.4byte	0x3b1
 8380 154f F2000000 		.4byte	.LBB170
 8381 1553 12000000 		.4byte	.LBE170-.LBB170
 8382 1557 01       		.byte	0x1
 8383 1558 1C12     		.2byte	0x121c
 8384 155a 1B       		.uleb128 0x1b
 8385 155b F2000000 		.4byte	.LBB171
 8386 155f 12000000 		.4byte	.LBE171-.LBB171
 8387 1563 1F       		.uleb128 0x1f
 8388 1564 BD030000 		.4byte	0x3bd
 8389 1568 02       		.uleb128 0x2
 8390 1569 91       		.byte	0x91
 8391 156a 68       		.sleb128 -24
 8392 156b 00       		.byte	0
 8393 156c 00       		.byte	0
 8394 156d 00       		.byte	0
 8395 156e 18       		.uleb128 0x18
 8396 156f F3000000 		.4byte	.LASF176
 8397 1573 01       		.byte	0x1
 8398 1574 4812     		.2byte	0x1248
 8399 1576 35010000 		.4byte	0x135
 8400 157a 00000000 		.4byte	.LFB181
 8401 157e 90010000 		.4byte	.LFE181-.LFB181
 8402 1582 01       		.uleb128 0x1
 8403 1583 9C       		.byte	0x9c
 8404 1584 A6160000 		.4byte	0x16a6
 8405 1588 19       		.uleb128 0x19
 8406 1589 67050000 		.4byte	.LASF171
 8407 158d 01       		.byte	0x1
 8408 158e 4812     		.2byte	0x1248
 8409 1590 43020000 		.4byte	0x243
 8410 1594 02       		.uleb128 0x2
 8411 1595 91       		.byte	0x91
 8412 1596 4C       		.sleb128 -52
 8413 1597 19       		.uleb128 0x19
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 242


 8414 1598 93000000 		.4byte	.LASF172
 8415 159c 01       		.byte	0x1
 8416 159d 4812     		.2byte	0x1248
 8417 159f EB000000 		.4byte	0xeb
 8418 15a3 02       		.uleb128 0x2
 8419 15a4 91       		.byte	0x91
 8420 15a5 48       		.sleb128 -56
 8421 15a6 19       		.uleb128 0x19
 8422 15a7 7E020000 		.4byte	.LASF173
 8423 15ab 01       		.byte	0x1
 8424 15ac 4812     		.2byte	0x1248
 8425 15ae 79020000 		.4byte	0x279
 8426 15b2 02       		.uleb128 0x2
 8427 15b3 91       		.byte	0x91
 8428 15b4 47       		.sleb128 -57
 8429 15b5 19       		.uleb128 0x19
 8430 15b6 74030000 		.4byte	.LASF174
 8431 15ba 01       		.byte	0x1
 8432 15bb 4812     		.2byte	0x1248
 8433 15bd 9A140000 		.4byte	0x149a
 8434 15c1 02       		.uleb128 0x2
 8435 15c2 91       		.byte	0x91
 8436 15c3 40       		.sleb128 -64
 8437 15c4 19       		.uleb128 0x19
 8438 15c5 E1020000 		.4byte	.LASF177
 8439 15c9 01       		.byte	0x1
 8440 15ca 4812     		.2byte	0x1248
 8441 15cc A6160000 		.4byte	0x16a6
 8442 15d0 02       		.uleb128 0x2
 8443 15d1 91       		.byte	0x91
 8444 15d2 00       		.sleb128 0
 8445 15d3 1A       		.uleb128 0x1a
 8446 15d4 C9050000 		.4byte	.LASF86
 8447 15d8 01       		.byte	0x1
 8448 15d9 4A12     		.2byte	0x124a
 8449 15db C9040000 		.4byte	0x4c9
 8450 15df 02       		.uleb128 0x2
 8451 15e0 91       		.byte	0x91
 8452 15e1 70       		.sleb128 -16
 8453 15e2 1A       		.uleb128 0x1a
 8454 15e3 FB020000 		.4byte	.LASF175
 8455 15e7 01       		.byte	0x1
 8456 15e8 4B12     		.2byte	0x124b
 8457 15ea CA000000 		.4byte	0xca
 8458 15ee 02       		.uleb128 0x2
 8459 15ef 91       		.byte	0x91
 8460 15f0 67       		.sleb128 -25
 8461 15f1 1A       		.uleb128 0x1a
 8462 15f2 AF040000 		.4byte	.LASF80
 8463 15f6 01       		.byte	0x1
 8464 15f7 4C12     		.2byte	0x124c
 8465 15f9 35010000 		.4byte	0x135
 8466 15fd 02       		.uleb128 0x2
 8467 15fe 91       		.byte	0x91
 8468 15ff 74       		.sleb128 -12
 8469 1600 1A       		.uleb128 0x1a
 8470 1601 A3090000 		.4byte	.LASF113
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 243


 8471 1605 01       		.byte	0x1
 8472 1606 4D12     		.2byte	0x124d
 8473 1608 40010000 		.4byte	0x140
 8474 160c 02       		.uleb128 0x2
 8475 160d 91       		.byte	0x91
 8476 160e 68       		.sleb128 -24
 8477 160f 21       		.uleb128 0x21
 8478 1610 B1030000 		.4byte	0x3b1
 8479 1614 1A000000 		.4byte	.LBB172
 8480 1618 12000000 		.4byte	.LBE172-.LBB172
 8481 161c 01       		.byte	0x1
 8482 161d 4F12     		.2byte	0x124f
 8483 161f 36160000 		.4byte	0x1636
 8484 1623 1B       		.uleb128 0x1b
 8485 1624 1A000000 		.4byte	.LBB173
 8486 1628 12000000 		.4byte	.LBE173-.LBB173
 8487 162c 1F       		.uleb128 0x1f
 8488 162d BD030000 		.4byte	0x3bd
 8489 1631 02       		.uleb128 0x2
 8490 1632 91       		.byte	0x91
 8491 1633 58       		.sleb128 -40
 8492 1634 00       		.byte	0
 8493 1635 00       		.byte	0
 8494 1636 21       		.uleb128 0x21
 8495 1637 C9030000 		.4byte	0x3c9
 8496 163b 36000000 		.4byte	.LBB174
 8497 163f 1A000000 		.4byte	.LBE174-.LBB174
 8498 1643 01       		.byte	0x1
 8499 1644 6512     		.2byte	0x1265
 8500 1646 65160000 		.4byte	0x1665
 8501 164a 1B       		.uleb128 0x1b
 8502 164b 36000000 		.4byte	.LBB175
 8503 164f 1A000000 		.4byte	.LBE175-.LBB175
 8504 1653 1F       		.uleb128 0x1f
 8505 1654 D9030000 		.4byte	0x3d9
 8506 1658 02       		.uleb128 0x2
 8507 1659 91       		.byte	0x91
 8508 165a 5C       		.sleb128 -36
 8509 165b 1F       		.uleb128 0x1f
 8510 165c E4030000 		.4byte	0x3e4
 8511 1660 02       		.uleb128 0x2
 8512 1661 91       		.byte	0x91
 8513 1662 54       		.sleb128 -44
 8514 1663 00       		.byte	0
 8515 1664 00       		.byte	0
 8516 1665 21       		.uleb128 0x21
 8517 1666 B1030000 		.4byte	0x3b1
 8518 166a DC000000 		.4byte	.LBB176
 8519 166e 12000000 		.4byte	.LBE176-.LBB176
 8520 1672 01       		.byte	0x1
 8521 1673 9612     		.2byte	0x1296
 8522 1675 8C160000 		.4byte	0x168c
 8523 1679 1B       		.uleb128 0x1b
 8524 167a DC000000 		.4byte	.LBB177
 8525 167e 12000000 		.4byte	.LBE177-.LBB177
 8526 1682 1F       		.uleb128 0x1f
 8527 1683 BD030000 		.4byte	0x3bd
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 244


 8528 1687 02       		.uleb128 0x2
 8529 1688 91       		.byte	0x91
 8530 1689 6C       		.sleb128 -20
 8531 168a 00       		.byte	0
 8532 168b 00       		.byte	0
 8533 168c 1E       		.uleb128 0x1e
 8534 168d F0030000 		.4byte	0x3f0
 8535 1691 66010000 		.4byte	.LBB178
 8536 1695 06000000 		.4byte	.LBE178-.LBB178
 8537 1699 01       		.byte	0x1
 8538 169a BA12     		.2byte	0x12ba
 8539 169c 22       		.uleb128 0x22
 8540 169d FC030000 		.4byte	0x3fc
 8541 16a1 02       		.uleb128 0x2
 8542 16a2 91       		.byte	0x91
 8543 16a3 60       		.sleb128 -32
 8544 16a4 00       		.byte	0
 8545 16a5 00       		.byte	0
 8546 16a6 06       		.uleb128 0x6
 8547 16a7 04       		.byte	0x4
 8548 16a8 35010000 		.4byte	0x135
 8549 16ac 20       		.uleb128 0x20
 8550 16ad 59090000 		.4byte	.LASF178
 8551 16b1 01       		.byte	0x1
 8552 16b2 C412     		.2byte	0x12c4
 8553 16b4 00000000 		.4byte	.LFB182
 8554 16b8 20010000 		.4byte	.LFE182-.LFB182
 8555 16bc 01       		.uleb128 0x1
 8556 16bd 9C       		.byte	0x9c
 8557 16be A4170000 		.4byte	0x17a4
 8558 16c2 19       		.uleb128 0x19
 8559 16c3 67050000 		.4byte	.LASF171
 8560 16c7 01       		.byte	0x1
 8561 16c8 C412     		.2byte	0x12c4
 8562 16ca 43020000 		.4byte	0x243
 8563 16ce 02       		.uleb128 0x2
 8564 16cf 91       		.byte	0x91
 8565 16d0 54       		.sleb128 -44
 8566 16d1 19       		.uleb128 0x19
 8567 16d2 E1020000 		.4byte	.LASF177
 8568 16d6 01       		.byte	0x1
 8569 16d7 C412     		.2byte	0x12c4
 8570 16d9 A6160000 		.4byte	0x16a6
 8571 16dd 02       		.uleb128 0x2
 8572 16de 91       		.byte	0x91
 8573 16df 50       		.sleb128 -48
 8574 16e0 1A       		.uleb128 0x1a
 8575 16e1 C9050000 		.4byte	.LASF86
 8576 16e5 01       		.byte	0x1
 8577 16e6 C612     		.2byte	0x12c6
 8578 16e8 C9040000 		.4byte	0x4c9
 8579 16ec 02       		.uleb128 0x2
 8580 16ed 91       		.byte	0x91
 8581 16ee 74       		.sleb128 -12
 8582 16ef 1A       		.uleb128 0x1a
 8583 16f0 FB020000 		.4byte	.LASF175
 8584 16f4 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 245


 8585 16f5 C712     		.2byte	0x12c7
 8586 16f7 CA000000 		.4byte	0xca
 8587 16fb 02       		.uleb128 0x2
 8588 16fc 91       		.byte	0x91
 8589 16fd 6B       		.sleb128 -21
 8590 16fe 1A       		.uleb128 0x1a
 8591 16ff A3090000 		.4byte	.LASF113
 8592 1703 01       		.byte	0x1
 8593 1704 C812     		.2byte	0x12c8
 8594 1706 40010000 		.4byte	0x140
 8595 170a 02       		.uleb128 0x2
 8596 170b 91       		.byte	0x91
 8597 170c 6C       		.sleb128 -20
 8598 170d 21       		.uleb128 0x21
 8599 170e B1030000 		.4byte	0x3b1
 8600 1712 10000000 		.4byte	.LBB180
 8601 1716 12000000 		.4byte	.LBE180-.LBB180
 8602 171a 01       		.byte	0x1
 8603 171b CA12     		.2byte	0x12ca
 8604 171d 34170000 		.4byte	0x1734
 8605 1721 1B       		.uleb128 0x1b
 8606 1722 10000000 		.4byte	.LBB181
 8607 1726 12000000 		.4byte	.LBE181-.LBB181
 8608 172a 1F       		.uleb128 0x1f
 8609 172b BD030000 		.4byte	0x3bd
 8610 172f 02       		.uleb128 0x2
 8611 1730 91       		.byte	0x91
 8612 1731 5C       		.sleb128 -36
 8613 1732 00       		.byte	0
 8614 1733 00       		.byte	0
 8615 1734 21       		.uleb128 0x21
 8616 1735 C9030000 		.4byte	0x3c9
 8617 1739 2C000000 		.4byte	.LBB182
 8618 173d 1A000000 		.4byte	.LBE182-.LBB182
 8619 1741 01       		.byte	0x1
 8620 1742 E012     		.2byte	0x12e0
 8621 1744 63170000 		.4byte	0x1763
 8622 1748 1B       		.uleb128 0x1b
 8623 1749 2C000000 		.4byte	.LBB183
 8624 174d 1A000000 		.4byte	.LBE183-.LBB183
 8625 1751 1F       		.uleb128 0x1f
 8626 1752 D9030000 		.4byte	0x3d9
 8627 1756 02       		.uleb128 0x2
 8628 1757 91       		.byte	0x91
 8629 1758 60       		.sleb128 -32
 8630 1759 1F       		.uleb128 0x1f
 8631 175a E4030000 		.4byte	0x3e4
 8632 175e 02       		.uleb128 0x2
 8633 175f 91       		.byte	0x91
 8634 1760 58       		.sleb128 -40
 8635 1761 00       		.byte	0
 8636 1762 00       		.byte	0
 8637 1763 21       		.uleb128 0x21
 8638 1764 B1030000 		.4byte	0x3b1
 8639 1768 70000000 		.4byte	.LBB184
 8640 176c 12000000 		.4byte	.LBE184-.LBB184
 8641 1770 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 246


 8642 1771 F012     		.2byte	0x12f0
 8643 1773 8A170000 		.4byte	0x178a
 8644 1777 1B       		.uleb128 0x1b
 8645 1778 70000000 		.4byte	.LBB185
 8646 177c 12000000 		.4byte	.LBE185-.LBB185
 8647 1780 1F       		.uleb128 0x1f
 8648 1781 BD030000 		.4byte	0x3bd
 8649 1785 02       		.uleb128 0x2
 8650 1786 91       		.byte	0x91
 8651 1787 70       		.sleb128 -16
 8652 1788 00       		.byte	0
 8653 1789 00       		.byte	0
 8654 178a 1E       		.uleb128 0x1e
 8655 178b F0030000 		.4byte	0x3f0
 8656 178f FA000000 		.4byte	.LBB186
 8657 1793 06000000 		.4byte	.LBE186-.LBB186
 8658 1797 01       		.byte	0x1
 8659 1798 1413     		.2byte	0x1314
 8660 179a 22       		.uleb128 0x22
 8661 179b FC030000 		.4byte	0x3fc
 8662 179f 02       		.uleb128 0x2
 8663 17a0 91       		.byte	0x91
 8664 17a1 64       		.sleb128 -28
 8665 17a2 00       		.byte	0
 8666 17a3 00       		.byte	0
 8667 17a4 18       		.uleb128 0x18
 8668 17a5 34010000 		.4byte	.LASF179
 8669 17a9 01       		.byte	0x1
 8670 17aa 1D13     		.2byte	0x131d
 8671 17ac 35010000 		.4byte	0x135
 8672 17b0 00000000 		.4byte	.LFB183
 8673 17b4 4C000000 		.4byte	.LFE183-.LFB183
 8674 17b8 01       		.uleb128 0x1
 8675 17b9 9C       		.byte	0x9c
 8676 17ba EC170000 		.4byte	0x17ec
 8677 17be 19       		.uleb128 0x19
 8678 17bf 1F070000 		.4byte	.LASF99
 8679 17c3 01       		.byte	0x1
 8680 17c4 1D13     		.2byte	0x131d
 8681 17c6 43020000 		.4byte	0x243
 8682 17ca 02       		.uleb128 0x2
 8683 17cb 91       		.byte	0x91
 8684 17cc 6C       		.sleb128 -20
 8685 17cd 1A       		.uleb128 0x1a
 8686 17ce C9050000 		.4byte	.LASF86
 8687 17d2 01       		.byte	0x1
 8688 17d3 1F13     		.2byte	0x131f
 8689 17d5 C9040000 		.4byte	0x4c9
 8690 17d9 02       		.uleb128 0x2
 8691 17da 91       		.byte	0x91
 8692 17db 70       		.sleb128 -16
 8693 17dc 1A       		.uleb128 0x1a
 8694 17dd AF040000 		.4byte	.LASF80
 8695 17e1 01       		.byte	0x1
 8696 17e2 2013     		.2byte	0x1320
 8697 17e4 35010000 		.4byte	0x135
 8698 17e8 02       		.uleb128 0x2
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 247


 8699 17e9 91       		.byte	0x91
 8700 17ea 74       		.sleb128 -12
 8701 17eb 00       		.byte	0
 8702 17ec 1C       		.uleb128 0x1c
 8703 17ed 0C0A0000 		.4byte	.LASF180
 8704 17f1 01       		.byte	0x1
 8705 17f2 3B13     		.2byte	0x133b
 8706 17f4 00000000 		.4byte	.LFB184
 8707 17f8 A8000000 		.4byte	.LFE184-.LFB184
 8708 17fc 01       		.uleb128 0x1
 8709 17fd 9C       		.byte	0x9c
 8710 17fe 3F180000 		.4byte	0x183f
 8711 1802 19       		.uleb128 0x19
 8712 1803 25020000 		.4byte	.LASF133
 8713 1807 01       		.byte	0x1
 8714 1808 3B13     		.2byte	0x133b
 8715 180a 4B010000 		.4byte	0x14b
 8716 180e 02       		.uleb128 0x2
 8717 180f 91       		.byte	0x91
 8718 1810 6C       		.sleb128 -20
 8719 1811 19       		.uleb128 0x19
 8720 1812 0F000000 		.4byte	.LASF181
 8721 1816 01       		.byte	0x1
 8722 1817 3B13     		.2byte	0x133b
 8723 1819 A40F0000 		.4byte	0xfa4
 8724 181d 02       		.uleb128 0x2
 8725 181e 91       		.byte	0x91
 8726 181f 68       		.sleb128 -24
 8727 1820 1A       		.uleb128 0x1a
 8728 1821 6D080000 		.4byte	.LASF91
 8729 1825 01       		.byte	0x1
 8730 1826 3D13     		.2byte	0x133d
 8731 1828 4B010000 		.4byte	0x14b
 8732 182c 02       		.uleb128 0x2
 8733 182d 91       		.byte	0x91
 8734 182e 70       		.sleb128 -16
 8735 182f 1A       		.uleb128 0x1a
 8736 1830 34080000 		.4byte	.LASF94
 8737 1834 01       		.byte	0x1
 8738 1835 3E13     		.2byte	0x133e
 8739 1837 2B070000 		.4byte	0x72b
 8740 183b 02       		.uleb128 0x2
 8741 183c 91       		.byte	0x91
 8742 183d 74       		.sleb128 -12
 8743 183e 00       		.byte	0
 8744 183f 0B       		.uleb128 0xb
 8745 1840 38020000 		.4byte	0x238
 8746 1844 4F180000 		.4byte	0x184f
 8747 1848 0C       		.uleb128 0xc
 8748 1849 A9000000 		.4byte	0xa9
 8749 184d 06       		.byte	0x6
 8750 184e 00       		.byte	0
 8751 184f 1A       		.uleb128 0x1a
 8752 1850 150B0000 		.4byte	.LASF182
 8753 1854 01       		.byte	0x1
 8754 1855 5F01     		.2byte	0x15f
 8755 1857 3F180000 		.4byte	0x183f
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 248


 8756 185b 05       		.uleb128 0x5
 8757 185c 03       		.byte	0x3
 8758 185d 04000000 		.4byte	pxReadyTasksLists
 8759 1861 1A       		.uleb128 0x1a
 8760 1862 500B0000 		.4byte	.LASF183
 8761 1866 01       		.byte	0x1
 8762 1867 6001     		.2byte	0x160
 8763 1869 38020000 		.4byte	0x238
 8764 186d 05       		.uleb128 0x5
 8765 186e 03       		.byte	0x3
 8766 186f 90000000 		.4byte	xDelayedTaskList1
 8767 1873 1A       		.uleb128 0x1a
 8768 1874 B7040000 		.4byte	.LASF184
 8769 1878 01       		.byte	0x1
 8770 1879 6101     		.2byte	0x161
 8771 187b 38020000 		.4byte	0x238
 8772 187f 05       		.uleb128 0x5
 8773 1880 03       		.byte	0x3
 8774 1881 A4000000 		.4byte	xDelayedTaskList2
 8775 1885 1A       		.uleb128 0x1a
 8776 1886 430D0000 		.4byte	.LASF185
 8777 188a 01       		.byte	0x1
 8778 188b 6201     		.2byte	0x162
 8779 188d 97180000 		.4byte	0x1897
 8780 1891 05       		.uleb128 0x5
 8781 1892 03       		.byte	0x3
 8782 1893 B8000000 		.4byte	pxDelayedTaskList
 8783 1897 08       		.uleb128 0x8
 8784 1898 A50D0000 		.4byte	0xda5
 8785 189c 1A       		.uleb128 0x1a
 8786 189d DE060000 		.4byte	.LASF186
 8787 18a1 01       		.byte	0x1
 8788 18a2 6301     		.2byte	0x163
 8789 18a4 97180000 		.4byte	0x1897
 8790 18a8 05       		.uleb128 0x5
 8791 18a9 03       		.byte	0x3
 8792 18aa BC000000 		.4byte	pxOverflowDelayedTaskList
 8793 18ae 1A       		.uleb128 0x1a
 8794 18af CF010000 		.4byte	.LASF187
 8795 18b3 01       		.byte	0x1
 8796 18b4 6401     		.2byte	0x164
 8797 18b6 38020000 		.4byte	0x238
 8798 18ba 05       		.uleb128 0x5
 8799 18bb 03       		.byte	0x3
 8800 18bc C0000000 		.4byte	xPendingReadyList
 8801 18c0 1A       		.uleb128 0x1a
 8802 18c1 25070000 		.4byte	.LASF188
 8803 18c5 01       		.byte	0x1
 8804 18c6 6801     		.2byte	0x168
 8805 18c8 38020000 		.4byte	0x238
 8806 18cc 05       		.uleb128 0x5
 8807 18cd 03       		.byte	0x3
 8808 18ce D4000000 		.4byte	xTasksWaitingTermination
 8809 18d2 1A       		.uleb128 0x1a
 8810 18d3 8F0A0000 		.4byte	.LASF189
 8811 18d7 01       		.byte	0x1
 8812 18d8 6901     		.2byte	0x169
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 249


 8813 18da 2D020000 		.4byte	0x22d
 8814 18de 05       		.uleb128 0x5
 8815 18df 03       		.byte	0x3
 8816 18e0 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8817 18e4 1A       		.uleb128 0x1a
 8818 18e5 0D010000 		.4byte	.LASF190
 8819 18e9 01       		.byte	0x1
 8820 18ea 6F01     		.2byte	0x16f
 8821 18ec 38020000 		.4byte	0x238
 8822 18f0 05       		.uleb128 0x5
 8823 18f1 03       		.byte	0x3
 8824 18f2 EC000000 		.4byte	xSuspendedTaskList
 8825 18f6 1A       		.uleb128 0x1a
 8826 18f7 7C000000 		.4byte	.LASF191
 8827 18fb 01       		.byte	0x1
 8828 18fc 7401     		.2byte	0x174
 8829 18fe 2D020000 		.4byte	0x22d
 8830 1902 05       		.uleb128 0x5
 8831 1903 03       		.byte	0x3
 8832 1904 00010000 		.4byte	uxCurrentNumberOfTasks
 8833 1908 1A       		.uleb128 0x1a
 8834 1909 970B0000 		.4byte	.LASF192
 8835 190d 01       		.byte	0x1
 8836 190e 7501     		.2byte	0x175
 8837 1910 1A190000 		.4byte	0x191a
 8838 1914 05       		.uleb128 0x5
 8839 1915 03       		.byte	0x3
 8840 1916 04010000 		.4byte	xTickCount
 8841 191a 08       		.uleb128 0x8
 8842 191b 4B010000 		.4byte	0x14b
 8843 191f 1A       		.uleb128 0x1a
 8844 1920 A3070000 		.4byte	.LASF193
 8845 1924 01       		.byte	0x1
 8846 1925 7601     		.2byte	0x176
 8847 1927 2D020000 		.4byte	0x22d
 8848 192b 05       		.uleb128 0x5
 8849 192c 03       		.byte	0x3
 8850 192d 08010000 		.4byte	uxTopReadyPriority
 8851 1931 1A       		.uleb128 0x1a
 8852 1932 CA080000 		.4byte	.LASF194
 8853 1936 01       		.byte	0x1
 8854 1937 7701     		.2byte	0x177
 8855 1939 43190000 		.4byte	0x1943
 8856 193d 05       		.uleb128 0x5
 8857 193e 03       		.byte	0x3
 8858 193f 0C010000 		.4byte	xSchedulerRunning
 8859 1943 08       		.uleb128 0x8
 8860 1944 35010000 		.4byte	0x135
 8861 1948 1A       		.uleb128 0x1a
 8862 1949 F10D0000 		.4byte	.LASF195
 8863 194d 01       		.byte	0x1
 8864 194e 7801     		.2byte	0x178
 8865 1950 2D020000 		.4byte	0x22d
 8866 1954 05       		.uleb128 0x5
 8867 1955 03       		.byte	0x3
 8868 1956 10010000 		.4byte	uxPendedTicks
 8869 195a 1A       		.uleb128 0x1a
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 250


 8870 195b B5000000 		.4byte	.LASF196
 8871 195f 01       		.byte	0x1
 8872 1960 7901     		.2byte	0x179
 8873 1962 43190000 		.4byte	0x1943
 8874 1966 05       		.uleb128 0x5
 8875 1967 03       		.byte	0x3
 8876 1968 14010000 		.4byte	xYieldPending
 8877 196c 1A       		.uleb128 0x1a
 8878 196d 740B0000 		.4byte	.LASF197
 8879 1971 01       		.byte	0x1
 8880 1972 7A01     		.2byte	0x17a
 8881 1974 43190000 		.4byte	0x1943
 8882 1978 05       		.uleb128 0x5
 8883 1979 03       		.byte	0x3
 8884 197a 18010000 		.4byte	xNumOfOverflows
 8885 197e 1A       		.uleb128 0x1a
 8886 197f F10A0000 		.4byte	.LASF198
 8887 1983 01       		.byte	0x1
 8888 1984 7B01     		.2byte	0x17b
 8889 1986 40010000 		.4byte	0x140
 8890 198a 05       		.uleb128 0x5
 8891 198b 03       		.byte	0x3
 8892 198c 1C010000 		.4byte	uxTaskNumber
 8893 1990 1A       		.uleb128 0x1a
 8894 1991 77070000 		.4byte	.LASF199
 8895 1995 01       		.byte	0x1
 8896 1996 7C01     		.2byte	0x17c
 8897 1998 1A190000 		.4byte	0x191a
 8898 199c 05       		.uleb128 0x5
 8899 199d 03       		.byte	0x3
 8900 199e 20010000 		.4byte	xNextTaskUnblockTime
 8901 19a2 1A       		.uleb128 0x1a
 8902 19a3 050B0000 		.4byte	.LASF200
 8903 19a7 01       		.byte	0x1
 8904 19a8 7D01     		.2byte	0x17d
 8905 19aa 43020000 		.4byte	0x243
 8906 19ae 05       		.uleb128 0x5
 8907 19af 03       		.byte	0x3
 8908 19b0 24010000 		.4byte	xIdleTaskHandle
 8909 19b4 1A       		.uleb128 0x1a
 8910 19b5 70040000 		.4byte	.LASF201
 8911 19b9 01       		.byte	0x1
 8912 19ba 8701     		.2byte	0x187
 8913 19bc 2D020000 		.4byte	0x22d
 8914 19c0 05       		.uleb128 0x5
 8915 19c1 03       		.byte	0x3
 8916 19c2 28010000 		.4byte	uxSchedulerSuspended
 8917 19c6 2A       		.uleb128 0x2a
 8918 19c7 A8010000 		.4byte	.LASF202
 8919 19cb 09       		.byte	0x9
 8920 19cc F907     		.2byte	0x7f9
 8921 19ce D2190000 		.4byte	0x19d2
 8922 19d2 08       		.uleb128 0x8
 8923 19d3 E0000000 		.4byte	0xe0
 8924 19d7 2B       		.uleb128 0x2b
 8925 19d8 5E060000 		.4byte	.LASF203
 8926 19dc 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 251


 8927 19dd 5C01     		.2byte	0x15c
 8928 19df E9190000 		.4byte	0x19e9
 8929 19e3 05       		.uleb128 0x5
 8930 19e4 03       		.byte	0x3
 8931 19e5 00000000 		.4byte	pxCurrentTCB
 8932 19e9 08       		.uleb128 0x8
 8933 19ea C9040000 		.4byte	0x4c9
 8934 19ee 00       		.byte	0
 8935              		.section	.debug_abbrev,"",%progbits
 8936              	.Ldebug_abbrev0:
 8937 0000 01       		.uleb128 0x1
 8938 0001 11       		.uleb128 0x11
 8939 0002 01       		.byte	0x1
 8940 0003 25       		.uleb128 0x25
 8941 0004 0E       		.uleb128 0xe
 8942 0005 13       		.uleb128 0x13
 8943 0006 0B       		.uleb128 0xb
 8944 0007 03       		.uleb128 0x3
 8945 0008 0E       		.uleb128 0xe
 8946 0009 1B       		.uleb128 0x1b
 8947 000a 0E       		.uleb128 0xe
 8948 000b 55       		.uleb128 0x55
 8949 000c 17       		.uleb128 0x17
 8950 000d 11       		.uleb128 0x11
 8951 000e 01       		.uleb128 0x1
 8952 000f 10       		.uleb128 0x10
 8953 0010 17       		.uleb128 0x17
 8954 0011 00       		.byte	0
 8955 0012 00       		.byte	0
 8956 0013 02       		.uleb128 0x2
 8957 0014 16       		.uleb128 0x16
 8958 0015 00       		.byte	0
 8959 0016 03       		.uleb128 0x3
 8960 0017 0E       		.uleb128 0xe
 8961 0018 3A       		.uleb128 0x3a
 8962 0019 0B       		.uleb128 0xb
 8963 001a 3B       		.uleb128 0x3b
 8964 001b 0B       		.uleb128 0xb
 8965 001c 49       		.uleb128 0x49
 8966 001d 13       		.uleb128 0x13
 8967 001e 00       		.byte	0
 8968 001f 00       		.byte	0
 8969 0020 03       		.uleb128 0x3
 8970 0021 24       		.uleb128 0x24
 8971 0022 00       		.byte	0
 8972 0023 0B       		.uleb128 0xb
 8973 0024 0B       		.uleb128 0xb
 8974 0025 3E       		.uleb128 0x3e
 8975 0026 0B       		.uleb128 0xb
 8976 0027 03       		.uleb128 0x3
 8977 0028 0E       		.uleb128 0xe
 8978 0029 00       		.byte	0
 8979 002a 00       		.byte	0
 8980 002b 04       		.uleb128 0x4
 8981 002c 24       		.uleb128 0x24
 8982 002d 00       		.byte	0
 8983 002e 0B       		.uleb128 0xb
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 252


 8984 002f 0B       		.uleb128 0xb
 8985 0030 3E       		.uleb128 0x3e
 8986 0031 0B       		.uleb128 0xb
 8987 0032 03       		.uleb128 0x3
 8988 0033 08       		.uleb128 0x8
 8989 0034 00       		.byte	0
 8990 0035 00       		.byte	0
 8991 0036 05       		.uleb128 0x5
 8992 0037 0F       		.uleb128 0xf
 8993 0038 00       		.byte	0
 8994 0039 0B       		.uleb128 0xb
 8995 003a 0B       		.uleb128 0xb
 8996 003b 00       		.byte	0
 8997 003c 00       		.byte	0
 8998 003d 06       		.uleb128 0x6
 8999 003e 0F       		.uleb128 0xf
 9000 003f 00       		.byte	0
 9001 0040 0B       		.uleb128 0xb
 9002 0041 0B       		.uleb128 0xb
 9003 0042 49       		.uleb128 0x49
 9004 0043 13       		.uleb128 0x13
 9005 0044 00       		.byte	0
 9006 0045 00       		.byte	0
 9007 0046 07       		.uleb128 0x7
 9008 0047 26       		.uleb128 0x26
 9009 0048 00       		.byte	0
 9010 0049 49       		.uleb128 0x49
 9011 004a 13       		.uleb128 0x13
 9012 004b 00       		.byte	0
 9013 004c 00       		.byte	0
 9014 004d 08       		.uleb128 0x8
 9015 004e 35       		.uleb128 0x35
 9016 004f 00       		.byte	0
 9017 0050 49       		.uleb128 0x49
 9018 0051 13       		.uleb128 0x13
 9019 0052 00       		.byte	0
 9020 0053 00       		.byte	0
 9021 0054 09       		.uleb128 0x9
 9022 0055 15       		.uleb128 0x15
 9023 0056 01       		.byte	0x1
 9024 0057 27       		.uleb128 0x27
 9025 0058 19       		.uleb128 0x19
 9026 0059 01       		.uleb128 0x1
 9027 005a 13       		.uleb128 0x13
 9028 005b 00       		.byte	0
 9029 005c 00       		.byte	0
 9030 005d 0A       		.uleb128 0xa
 9031 005e 05       		.uleb128 0x5
 9032 005f 00       		.byte	0
 9033 0060 49       		.uleb128 0x49
 9034 0061 13       		.uleb128 0x13
 9035 0062 00       		.byte	0
 9036 0063 00       		.byte	0
 9037 0064 0B       		.uleb128 0xb
 9038 0065 01       		.uleb128 0x1
 9039 0066 01       		.byte	0x1
 9040 0067 49       		.uleb128 0x49
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 253


 9041 0068 13       		.uleb128 0x13
 9042 0069 01       		.uleb128 0x1
 9043 006a 13       		.uleb128 0x13
 9044 006b 00       		.byte	0
 9045 006c 00       		.byte	0
 9046 006d 0C       		.uleb128 0xc
 9047 006e 21       		.uleb128 0x21
 9048 006f 00       		.byte	0
 9049 0070 49       		.uleb128 0x49
 9050 0071 13       		.uleb128 0x13
 9051 0072 2F       		.uleb128 0x2f
 9052 0073 0B       		.uleb128 0xb
 9053 0074 00       		.byte	0
 9054 0075 00       		.byte	0
 9055 0076 0D       		.uleb128 0xd
 9056 0077 13       		.uleb128 0x13
 9057 0078 01       		.byte	0x1
 9058 0079 03       		.uleb128 0x3
 9059 007a 0E       		.uleb128 0xe
 9060 007b 0B       		.uleb128 0xb
 9061 007c 0B       		.uleb128 0xb
 9062 007d 3A       		.uleb128 0x3a
 9063 007e 0B       		.uleb128 0xb
 9064 007f 3B       		.uleb128 0x3b
 9065 0080 0B       		.uleb128 0xb
 9066 0081 01       		.uleb128 0x1
 9067 0082 13       		.uleb128 0x13
 9068 0083 00       		.byte	0
 9069 0084 00       		.byte	0
 9070 0085 0E       		.uleb128 0xe
 9071 0086 0D       		.uleb128 0xd
 9072 0087 00       		.byte	0
 9073 0088 03       		.uleb128 0x3
 9074 0089 0E       		.uleb128 0xe
 9075 008a 3A       		.uleb128 0x3a
 9076 008b 0B       		.uleb128 0xb
 9077 008c 3B       		.uleb128 0x3b
 9078 008d 0B       		.uleb128 0xb
 9079 008e 49       		.uleb128 0x49
 9080 008f 13       		.uleb128 0x13
 9081 0090 38       		.uleb128 0x38
 9082 0091 0B       		.uleb128 0xb
 9083 0092 00       		.byte	0
 9084 0093 00       		.byte	0
 9085 0094 0F       		.uleb128 0xf
 9086 0095 04       		.uleb128 0x4
 9087 0096 01       		.byte	0x1
 9088 0097 0B       		.uleb128 0xb
 9089 0098 0B       		.uleb128 0xb
 9090 0099 49       		.uleb128 0x49
 9091 009a 13       		.uleb128 0x13
 9092 009b 3A       		.uleb128 0x3a
 9093 009c 0B       		.uleb128 0xb
 9094 009d 3B       		.uleb128 0x3b
 9095 009e 0B       		.uleb128 0xb
 9096 009f 01       		.uleb128 0x1
 9097 00a0 13       		.uleb128 0x13
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 254


 9098 00a1 00       		.byte	0
 9099 00a2 00       		.byte	0
 9100 00a3 10       		.uleb128 0x10
 9101 00a4 28       		.uleb128 0x28
 9102 00a5 00       		.byte	0
 9103 00a6 03       		.uleb128 0x3
 9104 00a7 0E       		.uleb128 0xe
 9105 00a8 1C       		.uleb128 0x1c
 9106 00a9 0B       		.uleb128 0xb
 9107 00aa 00       		.byte	0
 9108 00ab 00       		.byte	0
 9109 00ac 11       		.uleb128 0x11
 9110 00ad 13       		.uleb128 0x13
 9111 00ae 01       		.byte	0x1
 9112 00af 03       		.uleb128 0x3
 9113 00b0 0E       		.uleb128 0xe
 9114 00b1 0B       		.uleb128 0xb
 9115 00b2 0B       		.uleb128 0xb
 9116 00b3 3A       		.uleb128 0x3a
 9117 00b4 0B       		.uleb128 0xb
 9118 00b5 3B       		.uleb128 0x3b
 9119 00b6 05       		.uleb128 0x5
 9120 00b7 01       		.uleb128 0x1
 9121 00b8 13       		.uleb128 0x13
 9122 00b9 00       		.byte	0
 9123 00ba 00       		.byte	0
 9124 00bb 12       		.uleb128 0x12
 9125 00bc 0D       		.uleb128 0xd
 9126 00bd 00       		.byte	0
 9127 00be 03       		.uleb128 0x3
 9128 00bf 0E       		.uleb128 0xe
 9129 00c0 3A       		.uleb128 0x3a
 9130 00c1 0B       		.uleb128 0xb
 9131 00c2 3B       		.uleb128 0x3b
 9132 00c3 05       		.uleb128 0x5
 9133 00c4 49       		.uleb128 0x49
 9134 00c5 13       		.uleb128 0x13
 9135 00c6 38       		.uleb128 0x38
 9136 00c7 0B       		.uleb128 0xb
 9137 00c8 00       		.byte	0
 9138 00c9 00       		.byte	0
 9139 00ca 13       		.uleb128 0x13
 9140 00cb 16       		.uleb128 0x16
 9141 00cc 00       		.byte	0
 9142 00cd 03       		.uleb128 0x3
 9143 00ce 0E       		.uleb128 0xe
 9144 00cf 3A       		.uleb128 0x3a
 9145 00d0 0B       		.uleb128 0xb
 9146 00d1 3B       		.uleb128 0x3b
 9147 00d2 05       		.uleb128 0x5
 9148 00d3 49       		.uleb128 0x49
 9149 00d4 13       		.uleb128 0x13
 9150 00d5 00       		.byte	0
 9151 00d6 00       		.byte	0
 9152 00d7 14       		.uleb128 0x14
 9153 00d8 2E       		.uleb128 0x2e
 9154 00d9 01       		.byte	0x1
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 255


 9155 00da 03       		.uleb128 0x3
 9156 00db 0E       		.uleb128 0xe
 9157 00dc 3A       		.uleb128 0x3a
 9158 00dd 0B       		.uleb128 0xb
 9159 00de 3B       		.uleb128 0x3b
 9160 00df 0B       		.uleb128 0xb
 9161 00e0 27       		.uleb128 0x27
 9162 00e1 19       		.uleb128 0x19
 9163 00e2 20       		.uleb128 0x20
 9164 00e3 0B       		.uleb128 0xb
 9165 00e4 01       		.uleb128 0x1
 9166 00e5 13       		.uleb128 0x13
 9167 00e6 00       		.byte	0
 9168 00e7 00       		.byte	0
 9169 00e8 15       		.uleb128 0x15
 9170 00e9 34       		.uleb128 0x34
 9171 00ea 00       		.byte	0
 9172 00eb 03       		.uleb128 0x3
 9173 00ec 0E       		.uleb128 0xe
 9174 00ed 3A       		.uleb128 0x3a
 9175 00ee 0B       		.uleb128 0xb
 9176 00ef 3B       		.uleb128 0x3b
 9177 00f0 0B       		.uleb128 0xb
 9178 00f1 49       		.uleb128 0x49
 9179 00f2 13       		.uleb128 0x13
 9180 00f3 00       		.byte	0
 9181 00f4 00       		.byte	0
 9182 00f5 16       		.uleb128 0x16
 9183 00f6 2E       		.uleb128 0x2e
 9184 00f7 01       		.byte	0x1
 9185 00f8 03       		.uleb128 0x3
 9186 00f9 0E       		.uleb128 0xe
 9187 00fa 3A       		.uleb128 0x3a
 9188 00fb 0B       		.uleb128 0xb
 9189 00fc 3B       		.uleb128 0x3b
 9190 00fd 0B       		.uleb128 0xb
 9191 00fe 27       		.uleb128 0x27
 9192 00ff 19       		.uleb128 0x19
 9193 0100 49       		.uleb128 0x49
 9194 0101 13       		.uleb128 0x13
 9195 0102 20       		.uleb128 0x20
 9196 0103 0B       		.uleb128 0xb
 9197 0104 01       		.uleb128 0x1
 9198 0105 13       		.uleb128 0x13
 9199 0106 00       		.byte	0
 9200 0107 00       		.byte	0
 9201 0108 17       		.uleb128 0x17
 9202 0109 05       		.uleb128 0x5
 9203 010a 00       		.byte	0
 9204 010b 03       		.uleb128 0x3
 9205 010c 0E       		.uleb128 0xe
 9206 010d 3A       		.uleb128 0x3a
 9207 010e 0B       		.uleb128 0xb
 9208 010f 3B       		.uleb128 0x3b
 9209 0110 0B       		.uleb128 0xb
 9210 0111 49       		.uleb128 0x49
 9211 0112 13       		.uleb128 0x13
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 256


 9212 0113 00       		.byte	0
 9213 0114 00       		.byte	0
 9214 0115 18       		.uleb128 0x18
 9215 0116 2E       		.uleb128 0x2e
 9216 0117 01       		.byte	0x1
 9217 0118 3F       		.uleb128 0x3f
 9218 0119 19       		.uleb128 0x19
 9219 011a 03       		.uleb128 0x3
 9220 011b 0E       		.uleb128 0xe
 9221 011c 3A       		.uleb128 0x3a
 9222 011d 0B       		.uleb128 0xb
 9223 011e 3B       		.uleb128 0x3b
 9224 011f 05       		.uleb128 0x5
 9225 0120 27       		.uleb128 0x27
 9226 0121 19       		.uleb128 0x19
 9227 0122 49       		.uleb128 0x49
 9228 0123 13       		.uleb128 0x13
 9229 0124 11       		.uleb128 0x11
 9230 0125 01       		.uleb128 0x1
 9231 0126 12       		.uleb128 0x12
 9232 0127 06       		.uleb128 0x6
 9233 0128 40       		.uleb128 0x40
 9234 0129 18       		.uleb128 0x18
 9235 012a 9642     		.uleb128 0x2116
 9236 012c 19       		.uleb128 0x19
 9237 012d 01       		.uleb128 0x1
 9238 012e 13       		.uleb128 0x13
 9239 012f 00       		.byte	0
 9240 0130 00       		.byte	0
 9241 0131 19       		.uleb128 0x19
 9242 0132 05       		.uleb128 0x5
 9243 0133 00       		.byte	0
 9244 0134 03       		.uleb128 0x3
 9245 0135 0E       		.uleb128 0xe
 9246 0136 3A       		.uleb128 0x3a
 9247 0137 0B       		.uleb128 0xb
 9248 0138 3B       		.uleb128 0x3b
 9249 0139 05       		.uleb128 0x5
 9250 013a 49       		.uleb128 0x49
 9251 013b 13       		.uleb128 0x13
 9252 013c 02       		.uleb128 0x2
 9253 013d 18       		.uleb128 0x18
 9254 013e 00       		.byte	0
 9255 013f 00       		.byte	0
 9256 0140 1A       		.uleb128 0x1a
 9257 0141 34       		.uleb128 0x34
 9258 0142 00       		.byte	0
 9259 0143 03       		.uleb128 0x3
 9260 0144 0E       		.uleb128 0xe
 9261 0145 3A       		.uleb128 0x3a
 9262 0146 0B       		.uleb128 0xb
 9263 0147 3B       		.uleb128 0x3b
 9264 0148 05       		.uleb128 0x5
 9265 0149 49       		.uleb128 0x49
 9266 014a 13       		.uleb128 0x13
 9267 014b 02       		.uleb128 0x2
 9268 014c 18       		.uleb128 0x18
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 257


 9269 014d 00       		.byte	0
 9270 014e 00       		.byte	0
 9271 014f 1B       		.uleb128 0x1b
 9272 0150 0B       		.uleb128 0xb
 9273 0151 01       		.byte	0x1
 9274 0152 11       		.uleb128 0x11
 9275 0153 01       		.uleb128 0x1
 9276 0154 12       		.uleb128 0x12
 9277 0155 06       		.uleb128 0x6
 9278 0156 00       		.byte	0
 9279 0157 00       		.byte	0
 9280 0158 1C       		.uleb128 0x1c
 9281 0159 2E       		.uleb128 0x2e
 9282 015a 01       		.byte	0x1
 9283 015b 03       		.uleb128 0x3
 9284 015c 0E       		.uleb128 0xe
 9285 015d 3A       		.uleb128 0x3a
 9286 015e 0B       		.uleb128 0xb
 9287 015f 3B       		.uleb128 0x3b
 9288 0160 05       		.uleb128 0x5
 9289 0161 27       		.uleb128 0x27
 9290 0162 19       		.uleb128 0x19
 9291 0163 11       		.uleb128 0x11
 9292 0164 01       		.uleb128 0x1
 9293 0165 12       		.uleb128 0x12
 9294 0166 06       		.uleb128 0x6
 9295 0167 40       		.uleb128 0x40
 9296 0168 18       		.uleb128 0x18
 9297 0169 9642     		.uleb128 0x2116
 9298 016b 19       		.uleb128 0x19
 9299 016c 01       		.uleb128 0x1
 9300 016d 13       		.uleb128 0x13
 9301 016e 00       		.byte	0
 9302 016f 00       		.byte	0
 9303 0170 1D       		.uleb128 0x1d
 9304 0171 34       		.uleb128 0x34
 9305 0172 00       		.byte	0
 9306 0173 03       		.uleb128 0x3
 9307 0174 08       		.uleb128 0x8
 9308 0175 3A       		.uleb128 0x3a
 9309 0176 0B       		.uleb128 0xb
 9310 0177 3B       		.uleb128 0x3b
 9311 0178 05       		.uleb128 0x5
 9312 0179 49       		.uleb128 0x49
 9313 017a 13       		.uleb128 0x13
 9314 017b 02       		.uleb128 0x2
 9315 017c 18       		.uleb128 0x18
 9316 017d 00       		.byte	0
 9317 017e 00       		.byte	0
 9318 017f 1E       		.uleb128 0x1e
 9319 0180 1D       		.uleb128 0x1d
 9320 0181 01       		.byte	0x1
 9321 0182 31       		.uleb128 0x31
 9322 0183 13       		.uleb128 0x13
 9323 0184 11       		.uleb128 0x11
 9324 0185 01       		.uleb128 0x1
 9325 0186 12       		.uleb128 0x12
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 258


 9326 0187 06       		.uleb128 0x6
 9327 0188 58       		.uleb128 0x58
 9328 0189 0B       		.uleb128 0xb
 9329 018a 59       		.uleb128 0x59
 9330 018b 05       		.uleb128 0x5
 9331 018c 00       		.byte	0
 9332 018d 00       		.byte	0
 9333 018e 1F       		.uleb128 0x1f
 9334 018f 34       		.uleb128 0x34
 9335 0190 00       		.byte	0
 9336 0191 31       		.uleb128 0x31
 9337 0192 13       		.uleb128 0x13
 9338 0193 02       		.uleb128 0x2
 9339 0194 18       		.uleb128 0x18
 9340 0195 00       		.byte	0
 9341 0196 00       		.byte	0
 9342 0197 20       		.uleb128 0x20
 9343 0198 2E       		.uleb128 0x2e
 9344 0199 01       		.byte	0x1
 9345 019a 3F       		.uleb128 0x3f
 9346 019b 19       		.uleb128 0x19
 9347 019c 03       		.uleb128 0x3
 9348 019d 0E       		.uleb128 0xe
 9349 019e 3A       		.uleb128 0x3a
 9350 019f 0B       		.uleb128 0xb
 9351 01a0 3B       		.uleb128 0x3b
 9352 01a1 05       		.uleb128 0x5
 9353 01a2 27       		.uleb128 0x27
 9354 01a3 19       		.uleb128 0x19
 9355 01a4 11       		.uleb128 0x11
 9356 01a5 01       		.uleb128 0x1
 9357 01a6 12       		.uleb128 0x12
 9358 01a7 06       		.uleb128 0x6
 9359 01a8 40       		.uleb128 0x40
 9360 01a9 18       		.uleb128 0x18
 9361 01aa 9642     		.uleb128 0x2116
 9362 01ac 19       		.uleb128 0x19
 9363 01ad 01       		.uleb128 0x1
 9364 01ae 13       		.uleb128 0x13
 9365 01af 00       		.byte	0
 9366 01b0 00       		.byte	0
 9367 01b1 21       		.uleb128 0x21
 9368 01b2 1D       		.uleb128 0x1d
 9369 01b3 01       		.byte	0x1
 9370 01b4 31       		.uleb128 0x31
 9371 01b5 13       		.uleb128 0x13
 9372 01b6 11       		.uleb128 0x11
 9373 01b7 01       		.uleb128 0x1
 9374 01b8 12       		.uleb128 0x12
 9375 01b9 06       		.uleb128 0x6
 9376 01ba 58       		.uleb128 0x58
 9377 01bb 0B       		.uleb128 0xb
 9378 01bc 59       		.uleb128 0x59
 9379 01bd 05       		.uleb128 0x5
 9380 01be 01       		.uleb128 0x1
 9381 01bf 13       		.uleb128 0x13
 9382 01c0 00       		.byte	0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 259


 9383 01c1 00       		.byte	0
 9384 01c2 22       		.uleb128 0x22
 9385 01c3 05       		.uleb128 0x5
 9386 01c4 00       		.byte	0
 9387 01c5 31       		.uleb128 0x31
 9388 01c6 13       		.uleb128 0x13
 9389 01c7 02       		.uleb128 0x2
 9390 01c8 18       		.uleb128 0x18
 9391 01c9 00       		.byte	0
 9392 01ca 00       		.byte	0
 9393 01cb 23       		.uleb128 0x23
 9394 01cc 2E       		.uleb128 0x2e
 9395 01cd 01       		.byte	0x1
 9396 01ce 03       		.uleb128 0x3
 9397 01cf 0E       		.uleb128 0xe
 9398 01d0 3A       		.uleb128 0x3a
 9399 01d1 0B       		.uleb128 0xb
 9400 01d2 3B       		.uleb128 0x3b
 9401 01d3 05       		.uleb128 0x5
 9402 01d4 27       		.uleb128 0x27
 9403 01d5 19       		.uleb128 0x19
 9404 01d6 49       		.uleb128 0x49
 9405 01d7 13       		.uleb128 0x13
 9406 01d8 11       		.uleb128 0x11
 9407 01d9 01       		.uleb128 0x1
 9408 01da 12       		.uleb128 0x12
 9409 01db 06       		.uleb128 0x6
 9410 01dc 40       		.uleb128 0x40
 9411 01dd 18       		.uleb128 0x18
 9412 01de 9742     		.uleb128 0x2117
 9413 01e0 19       		.uleb128 0x19
 9414 01e1 01       		.uleb128 0x1
 9415 01e2 13       		.uleb128 0x13
 9416 01e3 00       		.byte	0
 9417 01e4 00       		.byte	0
 9418 01e5 24       		.uleb128 0x24
 9419 01e6 2E       		.uleb128 0x2e
 9420 01e7 00       		.byte	0
 9421 01e8 3F       		.uleb128 0x3f
 9422 01e9 19       		.uleb128 0x19
 9423 01ea 03       		.uleb128 0x3
 9424 01eb 0E       		.uleb128 0xe
 9425 01ec 3A       		.uleb128 0x3a
 9426 01ed 0B       		.uleb128 0xb
 9427 01ee 3B       		.uleb128 0x3b
 9428 01ef 05       		.uleb128 0x5
 9429 01f0 27       		.uleb128 0x27
 9430 01f1 19       		.uleb128 0x19
 9431 01f2 11       		.uleb128 0x11
 9432 01f3 01       		.uleb128 0x1
 9433 01f4 12       		.uleb128 0x12
 9434 01f5 06       		.uleb128 0x6
 9435 01f6 40       		.uleb128 0x40
 9436 01f7 18       		.uleb128 0x18
 9437 01f8 9742     		.uleb128 0x2117
 9438 01fa 19       		.uleb128 0x19
 9439 01fb 00       		.byte	0
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 260


 9440 01fc 00       		.byte	0
 9441 01fd 25       		.uleb128 0x25
 9442 01fe 2E       		.uleb128 0x2e
 9443 01ff 01       		.byte	0x1
 9444 0200 3F       		.uleb128 0x3f
 9445 0201 19       		.uleb128 0x19
 9446 0202 03       		.uleb128 0x3
 9447 0203 0E       		.uleb128 0xe
 9448 0204 3A       		.uleb128 0x3a
 9449 0205 0B       		.uleb128 0xb
 9450 0206 3B       		.uleb128 0x3b
 9451 0207 05       		.uleb128 0x5
 9452 0208 27       		.uleb128 0x27
 9453 0209 19       		.uleb128 0x19
 9454 020a 49       		.uleb128 0x49
 9455 020b 13       		.uleb128 0x13
 9456 020c 11       		.uleb128 0x11
 9457 020d 01       		.uleb128 0x1
 9458 020e 12       		.uleb128 0x12
 9459 020f 06       		.uleb128 0x6
 9460 0210 40       		.uleb128 0x40
 9461 0211 18       		.uleb128 0x18
 9462 0212 9742     		.uleb128 0x2117
 9463 0214 19       		.uleb128 0x19
 9464 0215 01       		.uleb128 0x1
 9465 0216 13       		.uleb128 0x13
 9466 0217 00       		.byte	0
 9467 0218 00       		.byte	0
 9468 0219 26       		.uleb128 0x26
 9469 021a 2E       		.uleb128 0x2e
 9470 021b 00       		.byte	0
 9471 021c 3F       		.uleb128 0x3f
 9472 021d 19       		.uleb128 0x19
 9473 021e 03       		.uleb128 0x3
 9474 021f 0E       		.uleb128 0xe
 9475 0220 3A       		.uleb128 0x3a
 9476 0221 0B       		.uleb128 0xb
 9477 0222 3B       		.uleb128 0x3b
 9478 0223 05       		.uleb128 0x5
 9479 0224 27       		.uleb128 0x27
 9480 0225 19       		.uleb128 0x19
 9481 0226 49       		.uleb128 0x49
 9482 0227 13       		.uleb128 0x13
 9483 0228 11       		.uleb128 0x11
 9484 0229 01       		.uleb128 0x1
 9485 022a 12       		.uleb128 0x12
 9486 022b 06       		.uleb128 0x6
 9487 022c 40       		.uleb128 0x40
 9488 022d 18       		.uleb128 0x18
 9489 022e 9742     		.uleb128 0x2117
 9490 0230 19       		.uleb128 0x19
 9491 0231 00       		.byte	0
 9492 0232 00       		.byte	0
 9493 0233 27       		.uleb128 0x27
 9494 0234 0B       		.uleb128 0xb
 9495 0235 01       		.byte	0x1
 9496 0236 11       		.uleb128 0x11
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 261


 9497 0237 01       		.uleb128 0x1
 9498 0238 12       		.uleb128 0x12
 9499 0239 06       		.uleb128 0x6
 9500 023a 01       		.uleb128 0x1
 9501 023b 13       		.uleb128 0x13
 9502 023c 00       		.byte	0
 9503 023d 00       		.byte	0
 9504 023e 28       		.uleb128 0x28
 9505 023f 2E       		.uleb128 0x2e
 9506 0240 01       		.byte	0x1
 9507 0241 3F       		.uleb128 0x3f
 9508 0242 19       		.uleb128 0x19
 9509 0243 03       		.uleb128 0x3
 9510 0244 0E       		.uleb128 0xe
 9511 0245 3A       		.uleb128 0x3a
 9512 0246 0B       		.uleb128 0xb
 9513 0247 3B       		.uleb128 0x3b
 9514 0248 05       		.uleb128 0x5
 9515 0249 27       		.uleb128 0x27
 9516 024a 19       		.uleb128 0x19
 9517 024b 11       		.uleb128 0x11
 9518 024c 01       		.uleb128 0x1
 9519 024d 12       		.uleb128 0x12
 9520 024e 06       		.uleb128 0x6
 9521 024f 40       		.uleb128 0x40
 9522 0250 18       		.uleb128 0x18
 9523 0251 9742     		.uleb128 0x2117
 9524 0253 19       		.uleb128 0x19
 9525 0254 01       		.uleb128 0x1
 9526 0255 13       		.uleb128 0x13
 9527 0256 00       		.byte	0
 9528 0257 00       		.byte	0
 9529 0258 29       		.uleb128 0x29
 9530 0259 2E       		.uleb128 0x2e
 9531 025a 01       		.byte	0x1
 9532 025b 03       		.uleb128 0x3
 9533 025c 0E       		.uleb128 0xe
 9534 025d 3A       		.uleb128 0x3a
 9535 025e 0B       		.uleb128 0xb
 9536 025f 3B       		.uleb128 0x3b
 9537 0260 05       		.uleb128 0x5
 9538 0261 27       		.uleb128 0x27
 9539 0262 19       		.uleb128 0x19
 9540 0263 11       		.uleb128 0x11
 9541 0264 01       		.uleb128 0x1
 9542 0265 12       		.uleb128 0x12
 9543 0266 06       		.uleb128 0x6
 9544 0267 40       		.uleb128 0x40
 9545 0268 18       		.uleb128 0x18
 9546 0269 9742     		.uleb128 0x2117
 9547 026b 19       		.uleb128 0x19
 9548 026c 01       		.uleb128 0x1
 9549 026d 13       		.uleb128 0x13
 9550 026e 00       		.byte	0
 9551 026f 00       		.byte	0
 9552 0270 2A       		.uleb128 0x2a
 9553 0271 34       		.uleb128 0x34
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 262


 9554 0272 00       		.byte	0
 9555 0273 03       		.uleb128 0x3
 9556 0274 0E       		.uleb128 0xe
 9557 0275 3A       		.uleb128 0x3a
 9558 0276 0B       		.uleb128 0xb
 9559 0277 3B       		.uleb128 0x3b
 9560 0278 05       		.uleb128 0x5
 9561 0279 49       		.uleb128 0x49
 9562 027a 13       		.uleb128 0x13
 9563 027b 3F       		.uleb128 0x3f
 9564 027c 19       		.uleb128 0x19
 9565 027d 3C       		.uleb128 0x3c
 9566 027e 19       		.uleb128 0x19
 9567 027f 00       		.byte	0
 9568 0280 00       		.byte	0
 9569 0281 2B       		.uleb128 0x2b
 9570 0282 34       		.uleb128 0x34
 9571 0283 00       		.byte	0
 9572 0284 03       		.uleb128 0x3
 9573 0285 0E       		.uleb128 0xe
 9574 0286 3A       		.uleb128 0x3a
 9575 0287 0B       		.uleb128 0xb
 9576 0288 3B       		.uleb128 0x3b
 9577 0289 05       		.uleb128 0x5
 9578 028a 49       		.uleb128 0x49
 9579 028b 13       		.uleb128 0x13
 9580 028c 3F       		.uleb128 0x3f
 9581 028d 19       		.uleb128 0x19
 9582 028e 02       		.uleb128 0x2
 9583 028f 18       		.uleb128 0x18
 9584 0290 00       		.byte	0
 9585 0291 00       		.byte	0
 9586 0292 00       		.byte	0
 9587              		.section	.debug_aranges,"",%progbits
 9588 0000 9C010000 		.4byte	0x19c
 9589 0004 0200     		.2byte	0x2
 9590 0006 00000000 		.4byte	.Ldebug_info0
 9591 000a 04       		.byte	0x4
 9592 000b 00       		.byte	0
 9593 000c 0000     		.2byte	0
 9594 000e 0000     		.2byte	0
 9595 0010 00000000 		.4byte	.LFB136
 9596 0014 82000000 		.4byte	.LFE136-.LFB136
 9597 0018 00000000 		.4byte	.LFB137
 9598 001c 20010000 		.4byte	.LFE137-.LFB137
 9599 0020 00000000 		.4byte	.LFB138
 9600 0024 D8000000 		.4byte	.LFE138-.LFB138
 9601 0028 00000000 		.4byte	.LFB139
 9602 002c E4000000 		.4byte	.LFE139-.LFB139
 9603 0030 00000000 		.4byte	.LFB140
 9604 0034 F4000000 		.4byte	.LFE140-.LFB140
 9605 0038 00000000 		.4byte	.LFB141
 9606 003c 68000000 		.4byte	.LFE141-.LFB141
 9607 0040 00000000 		.4byte	.LFB142
 9608 0044 34000000 		.4byte	.LFE142-.LFB142
 9609 0048 00000000 		.4byte	.LFB143
 9610 004c 58000000 		.4byte	.LFE143-.LFB143
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 263


 9611 0050 00000000 		.4byte	.LFB144
 9612 0054 30010000 		.4byte	.LFE144-.LFB144
 9613 0058 00000000 		.4byte	.LFB145
 9614 005c E8000000 		.4byte	.LFE145-.LFB145
 9615 0060 00000000 		.4byte	.LFB146
 9616 0064 74000000 		.4byte	.LFE146-.LFB146
 9617 0068 00000000 		.4byte	.LFB147
 9618 006c BC000000 		.4byte	.LFE147-.LFB147
 9619 0070 00000000 		.4byte	.LFB148
 9620 0074 E0000000 		.4byte	.LFE148-.LFB148
 9621 0078 00000000 		.4byte	.LFB149
 9622 007c 98000000 		.4byte	.LFE149-.LFB149
 9623 0080 00000000 		.4byte	.LFB150
 9624 0084 30000000 		.4byte	.LFE150-.LFB150
 9625 0088 00000000 		.4byte	.LFB151
 9626 008c 1C000000 		.4byte	.LFE151-.LFB151
 9627 0090 00000000 		.4byte	.LFB152
 9628 0094 38010000 		.4byte	.LFE152-.LFB152
 9629 0098 00000000 		.4byte	.LFB153
 9630 009c 20000000 		.4byte	.LFE153-.LFB153
 9631 00a0 00000000 		.4byte	.LFB154
 9632 00a4 24000000 		.4byte	.LFE154-.LFB154
 9633 00a8 00000000 		.4byte	.LFB155
 9634 00ac 18000000 		.4byte	.LFE155-.LFB155
 9635 00b0 00000000 		.4byte	.LFB156
 9636 00b4 48000000 		.4byte	.LFE156-.LFB156
 9637 00b8 00000000 		.4byte	.LFB157
 9638 00bc 5C010000 		.4byte	.LFE157-.LFB157
 9639 00c0 00000000 		.4byte	.LFB158
 9640 00c4 04010000 		.4byte	.LFE158-.LFB158
 9641 00c8 00000000 		.4byte	.LFB159
 9642 00cc 48000000 		.4byte	.LFE159-.LFB159
 9643 00d0 00000000 		.4byte	.LFB160
 9644 00d4 74000000 		.4byte	.LFE160-.LFB160
 9645 00d8 00000000 		.4byte	.LFB161
 9646 00dc 54000000 		.4byte	.LFE161-.LFB161
 9647 00e0 00000000 		.4byte	.LFB162
 9648 00e4 C4000000 		.4byte	.LFE162-.LFB162
 9649 00e8 00000000 		.4byte	.LFB163
 9650 00ec C0000000 		.4byte	.LFE163-.LFB163
 9651 00f0 00000000 		.4byte	.LFB164
 9652 00f4 4C000000 		.4byte	.LFE164-.LFB164
 9653 00f8 00000000 		.4byte	.LFB165
 9654 00fc 2C000000 		.4byte	.LFE165-.LFB165
 9655 0100 00000000 		.4byte	.LFB166
 9656 0104 C0000000 		.4byte	.LFE166-.LFB166
 9657 0108 00000000 		.4byte	.LFB167
 9658 010c 18000000 		.4byte	.LFE167-.LFB167
 9659 0110 00000000 		.4byte	.LFB168
 9660 0114 30000000 		.4byte	.LFE168-.LFB168
 9661 0118 00000000 		.4byte	.LFB169
 9662 011c 40000000 		.4byte	.LFE169-.LFB169
 9663 0120 00000000 		.4byte	.LFB170
 9664 0124 4C000000 		.4byte	.LFE170-.LFB170
 9665 0128 00000000 		.4byte	.LFB171
 9666 012c 80000000 		.4byte	.LFE171-.LFB171
 9667 0130 00000000 		.4byte	.LFB172
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 264


 9668 0134 58000000 		.4byte	.LFE172-.LFB172
 9669 0138 00000000 		.4byte	.LFB173
 9670 013c 20000000 		.4byte	.LFE173-.LFB173
 9671 0140 00000000 		.4byte	.LFB174
 9672 0144 4C000000 		.4byte	.LFE174-.LFB174
 9673 0148 00000000 		.4byte	.LFB175
 9674 014c 20000000 		.4byte	.LFE175-.LFB175
 9675 0150 00000000 		.4byte	.LFB176
 9676 0154 3C000000 		.4byte	.LFE176-.LFB176
 9677 0158 00000000 		.4byte	.LFB177
 9678 015c 30000000 		.4byte	.LFE177-.LFB177
 9679 0160 00000000 		.4byte	.LFB178
 9680 0164 90000000 		.4byte	.LFE178-.LFB178
 9681 0168 00000000 		.4byte	.LFB179
 9682 016c B4000000 		.4byte	.LFE179-.LFB179
 9683 0170 00000000 		.4byte	.LFB180
 9684 0174 44010000 		.4byte	.LFE180-.LFB180
 9685 0178 00000000 		.4byte	.LFB181
 9686 017c 90010000 		.4byte	.LFE181-.LFB181
 9687 0180 00000000 		.4byte	.LFB182
 9688 0184 20010000 		.4byte	.LFE182-.LFB182
 9689 0188 00000000 		.4byte	.LFB183
 9690 018c 4C000000 		.4byte	.LFE183-.LFB183
 9691 0190 00000000 		.4byte	.LFB184
 9692 0194 A8000000 		.4byte	.LFE184-.LFB184
 9693 0198 00000000 		.4byte	0
 9694 019c 00000000 		.4byte	0
 9695              		.section	.debug_ranges,"",%progbits
 9696              	.Ldebug_ranges0:
 9697 0000 00000000 		.4byte	.LFB136
 9698 0004 82000000 		.4byte	.LFE136
 9699 0008 00000000 		.4byte	.LFB137
 9700 000c 20010000 		.4byte	.LFE137
 9701 0010 00000000 		.4byte	.LFB138
 9702 0014 D8000000 		.4byte	.LFE138
 9703 0018 00000000 		.4byte	.LFB139
 9704 001c E4000000 		.4byte	.LFE139
 9705 0020 00000000 		.4byte	.LFB140
 9706 0024 F4000000 		.4byte	.LFE140
 9707 0028 00000000 		.4byte	.LFB141
 9708 002c 68000000 		.4byte	.LFE141
 9709 0030 00000000 		.4byte	.LFB142
 9710 0034 34000000 		.4byte	.LFE142
 9711 0038 00000000 		.4byte	.LFB143
 9712 003c 58000000 		.4byte	.LFE143
 9713 0040 00000000 		.4byte	.LFB144
 9714 0044 30010000 		.4byte	.LFE144
 9715 0048 00000000 		.4byte	.LFB145
 9716 004c E8000000 		.4byte	.LFE145
 9717 0050 00000000 		.4byte	.LFB146
 9718 0054 74000000 		.4byte	.LFE146
 9719 0058 00000000 		.4byte	.LFB147
 9720 005c BC000000 		.4byte	.LFE147
 9721 0060 00000000 		.4byte	.LFB148
 9722 0064 E0000000 		.4byte	.LFE148
 9723 0068 00000000 		.4byte	.LFB149
 9724 006c 98000000 		.4byte	.LFE149
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 265


 9725 0070 00000000 		.4byte	.LFB150
 9726 0074 30000000 		.4byte	.LFE150
 9727 0078 00000000 		.4byte	.LFB151
 9728 007c 1C000000 		.4byte	.LFE151
 9729 0080 00000000 		.4byte	.LFB152
 9730 0084 38010000 		.4byte	.LFE152
 9731 0088 00000000 		.4byte	.LFB153
 9732 008c 20000000 		.4byte	.LFE153
 9733 0090 00000000 		.4byte	.LFB154
 9734 0094 24000000 		.4byte	.LFE154
 9735 0098 00000000 		.4byte	.LFB155
 9736 009c 18000000 		.4byte	.LFE155
 9737 00a0 00000000 		.4byte	.LFB156
 9738 00a4 48000000 		.4byte	.LFE156
 9739 00a8 00000000 		.4byte	.LFB157
 9740 00ac 5C010000 		.4byte	.LFE157
 9741 00b0 00000000 		.4byte	.LFB158
 9742 00b4 04010000 		.4byte	.LFE158
 9743 00b8 00000000 		.4byte	.LFB159
 9744 00bc 48000000 		.4byte	.LFE159
 9745 00c0 00000000 		.4byte	.LFB160
 9746 00c4 74000000 		.4byte	.LFE160
 9747 00c8 00000000 		.4byte	.LFB161
 9748 00cc 54000000 		.4byte	.LFE161
 9749 00d0 00000000 		.4byte	.LFB162
 9750 00d4 C4000000 		.4byte	.LFE162
 9751 00d8 00000000 		.4byte	.LFB163
 9752 00dc C0000000 		.4byte	.LFE163
 9753 00e0 00000000 		.4byte	.LFB164
 9754 00e4 4C000000 		.4byte	.LFE164
 9755 00e8 00000000 		.4byte	.LFB165
 9756 00ec 2C000000 		.4byte	.LFE165
 9757 00f0 00000000 		.4byte	.LFB166
 9758 00f4 C0000000 		.4byte	.LFE166
 9759 00f8 00000000 		.4byte	.LFB167
 9760 00fc 18000000 		.4byte	.LFE167
 9761 0100 00000000 		.4byte	.LFB168
 9762 0104 30000000 		.4byte	.LFE168
 9763 0108 00000000 		.4byte	.LFB169
 9764 010c 40000000 		.4byte	.LFE169
 9765 0110 00000000 		.4byte	.LFB170
 9766 0114 4C000000 		.4byte	.LFE170
 9767 0118 00000000 		.4byte	.LFB171
 9768 011c 80000000 		.4byte	.LFE171
 9769 0120 00000000 		.4byte	.LFB172
 9770 0124 58000000 		.4byte	.LFE172
 9771 0128 00000000 		.4byte	.LFB173
 9772 012c 20000000 		.4byte	.LFE173
 9773 0130 00000000 		.4byte	.LFB174
 9774 0134 4C000000 		.4byte	.LFE174
 9775 0138 00000000 		.4byte	.LFB175
 9776 013c 20000000 		.4byte	.LFE175
 9777 0140 00000000 		.4byte	.LFB176
 9778 0144 3C000000 		.4byte	.LFE176
 9779 0148 00000000 		.4byte	.LFB177
 9780 014c 30000000 		.4byte	.LFE177
 9781 0150 00000000 		.4byte	.LFB178
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 266


 9782 0154 90000000 		.4byte	.LFE178
 9783 0158 00000000 		.4byte	.LFB179
 9784 015c B4000000 		.4byte	.LFE179
 9785 0160 00000000 		.4byte	.LFB180
 9786 0164 44010000 		.4byte	.LFE180
 9787 0168 00000000 		.4byte	.LFB181
 9788 016c 90010000 		.4byte	.LFE181
 9789 0170 00000000 		.4byte	.LFB182
 9790 0174 20010000 		.4byte	.LFE182
 9791 0178 00000000 		.4byte	.LFB183
 9792 017c 4C000000 		.4byte	.LFE183
 9793 0180 00000000 		.4byte	.LFB184
 9794 0184 A8000000 		.4byte	.LFE184
 9795 0188 00000000 		.4byte	0
 9796 018c 00000000 		.4byte	0
 9797              		.section	.debug_line,"",%progbits
 9798              	.Ldebug_line0:
 9799 0000 150E0000 		.section	.debug_str,"MS",%progbits,1
 9799      0200C402 
 9799      00000201 
 9799      FB0E0D00 
 9799      01010101 
 9800              	.LASF50:
 9801 0000 784F7665 		.ascii	"xOverflowCount\000"
 9801      72666C6F 
 9801      77436F75 
 9801      6E7400
 9802              	.LASF181:
 9803 000f 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9803      426C6F63 
 9803      6B496E64 
 9803      6566696E 
 9803      6974656C 
 9804              	.LASF71:
 9805 0025 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 9805      6967696E 
 9805      616C4241 
 9805      53455052 
 9805      4900
 9806              	.LASF132:
 9807 0037 70784576 		.ascii	"pxEventList\000"
 9807      656E744C 
 9807      69737400 
 9808              	.LASF108:
 9809 0043 76546173 		.ascii	"vTaskSuspend\000"
 9809      6B537573 
 9809      70656E64 
 9809      00
 9810              	.LASF97:
 9811 0050 78546173 		.ascii	"xTaskCreate\000"
 9811      6B437265 
 9811      61746500 
 9812              	.LASF4:
 9813 005c 73697A65 		.ascii	"size_t\000"
 9813      5F7400
 9814              	.LASF36:
 9815 0063 4D696E69 		.ascii	"MiniListItem_t\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 267


 9815      4C697374 
 9815      4974656D 
 9815      5F7400
 9816              	.LASF52:
 9817 0072 54696D65 		.ascii	"TimeOut_t\000"
 9817      4F75745F 
 9817      7400
 9818              	.LASF191:
 9819 007c 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9819      7272656E 
 9819      744E756D 
 9819      6265724F 
 9819      66546173 
 9820              	.LASF172:
 9821 0093 756C5661 		.ascii	"ulValue\000"
 9821      6C756500 
 9822              	.LASF162:
 9823 009b 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9823      736B5265 
 9823      73657445 
 9823      76656E74 
 9823      4974656D 
 9824              	.LASF196:
 9825 00b5 78596965 		.ascii	"xYieldPending\000"
 9825      6C645065 
 9825      6E64696E 
 9825      6700
 9826              	.LASF160:
 9827 00c3 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9827      6B476574 
 9827      43757272 
 9827      656E7454 
 9827      61736B48 
 9828              	.LASF3:
 9829 00dd 7369676E 		.ascii	"signed char\000"
 9829      65642063 
 9829      68617200 
 9830              	.LASF5:
 9831 00e9 5F5F7569 		.ascii	"__uint8_t\000"
 9831      6E74385F 
 9831      7400
 9832              	.LASF176:
 9833 00f3 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 9833      6B47656E 
 9833      65726963 
 9833      4E6F7469 
 9833      66794672 
 9834              	.LASF190:
 9835 010d 78537573 		.ascii	"xSuspendedTaskList\000"
 9835      70656E64 
 9835      65645461 
 9835      736B4C69 
 9835      737400
 9836              	.LASF95:
 9837 0120 76546173 		.ascii	"vTaskDelay\000"
 9837      6B44656C 
 9837      617900
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 268


 9838              	.LASF11:
 9839 012b 6C6F6E67 		.ascii	"long int\000"
 9839      20696E74 
 9839      00
 9840              	.LASF179:
 9841 0134 78546173 		.ascii	"xTaskNotifyStateClear\000"
 9841      6B4E6F74 
 9841      69667953 
 9841      74617465 
 9841      436C6561 
 9842              	.LASF70:
 9843 014a 756C4E65 		.ascii	"ulNewBASEPRI\000"
 9843      77424153 
 9843      45505249 
 9843      00
 9844              	.LASF14:
 9845 0157 6C6F6E67 		.ascii	"long long unsigned int\000"
 9845      206C6F6E 
 9845      6720756E 
 9845      7369676E 
 9845      65642069 
 9846              	.LASF61:
 9847 016e 78457665 		.ascii	"xEventListItem\000"
 9847      6E744C69 
 9847      73744974 
 9847      656D00
 9848              	.LASF92:
 9849 017d 78416C72 		.ascii	"xAlreadyYielded\000"
 9849      65616479 
 9849      5969656C 
 9849      64656400 
 9850              	.LASF142:
 9851 018d 70785469 		.ascii	"pxTimeOut\000"
 9851      6D654F75 
 9851      7400
 9852              	.LASF39:
 9853 0197 7078496E 		.ascii	"pxIndex\000"
 9853      64657800 
 9854              	.LASF40:
 9855 019f 784C6973 		.ascii	"xListEnd\000"
 9855      74456E64 
 9855      00
 9856              	.LASF202:
 9857 01a8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9857      52784275 
 9857      66666572 
 9857      00
 9858              	.LASF49:
 9859 01b5 7854494D 		.ascii	"xTIME_OUT\000"
 9859      455F4F55 
 9859      5400
 9860              	.LASF35:
 9861 01bf 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9861      495F4C49 
 9861      53545F49 
 9861      54454D00 
 9862              	.LASF187:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 269


 9863 01cf 7850656E 		.ascii	"xPendingReadyList\000"
 9863      64696E67 
 9863      52656164 
 9863      794C6973 
 9863      7400
 9864              	.LASF118:
 9865 01e1 78546173 		.ascii	"xTaskGetTickCount\000"
 9865      6B476574 
 9865      5469636B 
 9865      436F756E 
 9865      7400
 9866              	.LASF1:
 9867 01f3 6C6F6E67 		.ascii	"long long int\000"
 9867      206C6F6E 
 9867      6720696E 
 9867      7400
 9868              	.LASF48:
 9869 0201 654E6F74 		.ascii	"eNotifyAction\000"
 9869      69667941 
 9869      6374696F 
 9869      6E00
 9870              	.LASF106:
 9871 020f 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 9871      696F7269 
 9871      74795573 
 9871      65644F6E 
 9871      456E7472 
 9872              	.LASF133:
 9873 0225 78546963 		.ascii	"xTicksToWait\000"
 9873      6B73546F 
 9873      57616974 
 9873      00
 9874              	.LASF150:
 9875 0232 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 9875      6B536574 
 9875      54687265 
 9875      61644C6F 
 9875      63616C53 
 9876              	.LASF151:
 9877 0254 78546173 		.ascii	"xTaskToSet\000"
 9877      6B546F53 
 9877      657400
 9878              	.LASF60:
 9879 025f 78537461 		.ascii	"xStateListItem\000"
 9879      74654C69 
 9879      73744974 
 9879      656D00
 9880              	.LASF88:
 9881 026e 76546173 		.ascii	"vTaskDelayUntil\000"
 9881      6B44656C 
 9881      6179556E 
 9881      74696C00 
 9882              	.LASF173:
 9883 027e 65416374 		.ascii	"eAction\000"
 9883      696F6E00 
 9884              	.LASF54:
 9885 0286 70764261 		.ascii	"pvBaseAddress\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 270


 9885      73654164 
 9885      64726573 
 9885      7300
 9886              	.LASF65:
 9887 0294 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 9887      72656164 
 9887      4C6F6361 
 9887      6C53746F 
 9887      72616765 
 9888              	.LASF207:
 9889 02b1 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 9889      72745261 
 9889      69736542 
 9889      41534550 
 9889      524900
 9890              	.LASF58:
 9891 02c4 74736B54 		.ascii	"tskTaskControlBlock\000"
 9891      61736B43 
 9891      6F6E7472 
 9891      6F6C426C 
 9891      6F636B00 
 9892              	.LASF79:
 9893 02d8 70784E65 		.ascii	"pxNewTCB\000"
 9893      77544342 
 9893      00
 9894              	.LASF177:
 9895 02e1 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9895      67686572 
 9895      5072696F 
 9895      72697479 
 9895      5461736B 
 9896              	.LASF175:
 9897 02fb 75634F72 		.ascii	"ucOriginalNotifyState\000"
 9897      6967696E 
 9897      616C4E6F 
 9897      74696679 
 9897      53746174 
 9898              	.LASF120:
 9899 0311 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9899      6B476574 
 9899      5469636B 
 9899      436F756E 
 9899      7446726F 
 9900              	.LASF42:
 9901 032a 5461736B 		.ascii	"TaskHandle_t\000"
 9901      48616E64 
 9901      6C655F74 
 9901      00
 9902              	.LASF63:
 9903 0337 70785374 		.ascii	"pxStack\000"
 9903      61636B00 
 9904              	.LASF27:
 9905 033f 5469636B 		.ascii	"TickType_t\000"
 9905      54797065 
 9905      5F7400
 9906              	.LASF57:
 9907 034a 4D656D6F 		.ascii	"MemoryRegion_t\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 271


 9907      72795265 
 9907      67696F6E 
 9907      5F7400
 9908              	.LASF18:
 9909 0359 75696E74 		.ascii	"uint16_t\000"
 9909      31365F74 
 9909      00
 9910              	.LASF22:
 9911 0362 646F7562 		.ascii	"double\000"
 9911      6C6500
 9912              	.LASF25:
 9913 0369 42617365 		.ascii	"BaseType_t\000"
 9913      54797065 
 9913      5F7400
 9914              	.LASF174:
 9915 0374 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9915      72657669 
 9915      6F75734E 
 9915      6F746966 
 9915      69636174 
 9916              	.LASF159:
 9917 0391 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9917      65736574 
 9917      4E657874 
 9917      5461736B 
 9917      556E626C 
 9918              	.LASF76:
 9919 03ad 75735374 		.ascii	"usStackDepth\000"
 9919      61636B44 
 9919      65707468 
 9919      00
 9920              	.LASF122:
 9921 03ba 78546173 		.ascii	"xTaskToQuery\000"
 9921      6B546F51 
 9921      75657279 
 9921      00
 9922              	.LASF103:
 9923 03c7 76546173 		.ascii	"vTaskPrioritySet\000"
 9923      6B507269 
 9923      6F726974 
 9923      79536574 
 9923      00
 9924              	.LASF206:
 9925 03d8 433A5C55 		.ascii	"C:\\Users\\stijn\\OneDrive\\Documenten\\PSoC Creato"
 9925      73657273 
 9925      5C737469 
 9925      6A6E5C4F 
 9925      6E654472 
 9926 0406 725C4144 		.ascii	"r\\ADC Klodden\\RTOS_I2C_Test.cydsn\000"
 9926      43204B6C 
 9926      6F646465 
 9926      6E5C5254 
 9926      4F535F49 
 9927              	.LASF114:
 9928 0428 76546173 		.ascii	"vTaskStartScheduler\000"
 9928      6B537461 
 9928      72745363 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 272


 9928      68656475 
 9928      6C657200 
 9929              	.LASF123:
 9930 043c 78546173 		.ascii	"xTaskIncrementTick\000"
 9930      6B496E63 
 9930      72656D65 
 9930      6E745469 
 9930      636B00
 9931              	.LASF131:
 9932 044f 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9932      6B506C61 
 9932      63654F6E 
 9932      4576656E 
 9932      744C6973 
 9933              	.LASF12:
 9934 0465 5F5F7569 		.ascii	"__uint32_t\000"
 9934      6E743332 
 9934      5F7400
 9935              	.LASF201:
 9936 0470 75785363 		.ascii	"uxSchedulerSuspended\000"
 9936      68656475 
 9936      6C657253 
 9936      75737065 
 9936      6E646564 
 9937              	.LASF208:
 9938 0485 756C4E65 		.ascii	"ulNewMaskValue\000"
 9938      774D6173 
 9938      6B56616C 
 9938      756500
 9939              	.LASF112:
 9940 0494 78546173 		.ascii	"xTaskResumeFromISR\000"
 9940      6B526573 
 9940      756D6546 
 9940      726F6D49 
 9940      535200
 9941              	.LASF31:
 9942 04a7 70764F77 		.ascii	"pvOwner\000"
 9942      6E657200 
 9943              	.LASF80:
 9944 04af 78526574 		.ascii	"xReturn\000"
 9944      75726E00 
 9945              	.LASF184:
 9946 04b7 7844656C 		.ascii	"xDelayedTaskList2\000"
 9946      61796564 
 9946      5461736B 
 9946      4C697374 
 9946      3200
 9947              	.LASF51:
 9948 04c9 7854696D 		.ascii	"xTimeOnEntering\000"
 9948      654F6E45 
 9948      6E746572 
 9948      696E6700 
 9949              	.LASF134:
 9950 04d9 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9950      6B506C61 
 9950      63654F6E 
 9950      556E6F72 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 273


 9950      64657265 
 9951              	.LASF78:
 9952 04f8 70784372 		.ascii	"pxCreatedTask\000"
 9952      65617465 
 9952      64546173 
 9952      6B00
 9953              	.LASF38:
 9954 0506 75784E75 		.ascii	"uxNumberOfItems\000"
 9954      6D626572 
 9954      4F664974 
 9954      656D7300 
 9955              	.LASF13:
 9956 0516 6C6F6E67 		.ascii	"long unsigned int\000"
 9956      20756E73 
 9956      69676E65 
 9956      6420696E 
 9956      7400
 9957              	.LASF205:
 9958 0528 47656E65 		.ascii	"Generated_Source\\PSoC6\\pdl\\rtos\\FreeRTOS\\10.0."
 9958      72617465 
 9958      645F536F 
 9958      75726365 
 9958      5C50536F 
 9959 0556 315C536F 		.ascii	"1\\Source\\tasks.c\000"
 9959      75726365 
 9959      5C746173 
 9959      6B732E63 
 9959      00
 9960              	.LASF171:
 9961 0567 78546173 		.ascii	"xTaskToNotify\000"
 9961      6B546F4E 
 9961      6F746966 
 9961      7900
 9962              	.LASF19:
 9963 0575 696E7433 		.ascii	"int32_t\000"
 9963      325F7400 
 9964              	.LASF59:
 9965 057d 7078546F 		.ascii	"pxTopOfStack\000"
 9965      704F6653 
 9965      7461636B 
 9965      00
 9966              	.LASF77:
 9967 058a 70765061 		.ascii	"pvParameters\000"
 9967      72616D65 
 9967      74657273 
 9967      00
 9968              	.LASF68:
 9969 0597 74736B54 		.ascii	"tskTCB\000"
 9969      434200
 9970              	.LASF130:
 9971 059e 7078436F 		.ascii	"pxConstList\000"
 9971      6E73744C 
 9971      69737400 
 9972              	.LASF9:
 9973 05aa 73686F72 		.ascii	"short unsigned int\000"
 9973      7420756E 
 9973      7369676E 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 274


 9973      65642069 
 9973      6E7400
 9974              	.LASF24:
 9975 05bd 53746163 		.ascii	"StackType_t\000"
 9975      6B547970 
 9975      655F7400 
 9976              	.LASF86:
 9977 05c9 70785443 		.ascii	"pxTCB\000"
 9977      4200
 9978              	.LASF107:
 9979 05cf 78596965 		.ascii	"xYieldRequired\000"
 9979      6C645265 
 9979      71756972 
 9979      656400
 9980              	.LASF167:
 9981 05de 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9981      7473546F 
 9981      436C6561 
 9981      724F6E45 
 9981      6E747279 
 9982              	.LASF84:
 9983 05f3 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9983      64644E65 
 9983      77546173 
 9983      6B546F52 
 9983      65616479 
 9984              	.LASF110:
 9985 060c 76546173 		.ascii	"vTaskResume\000"
 9985      6B526573 
 9985      756D6500 
 9986              	.LASF124:
 9987 0618 78537769 		.ascii	"xSwitchRequired\000"
 9987      74636852 
 9987      65717569 
 9987      72656400 
 9988              	.LASF100:
 9989 0628 75785265 		.ascii	"uxReturn\000"
 9989      7475726E 
 9989      00
 9990              	.LASF152:
 9991 0631 78496E64 		.ascii	"xIndex\000"
 9991      657800
 9992              	.LASF156:
 9993 0638 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9993      6E697469 
 9993      616C6973 
 9993      65546173 
 9993      6B4C6973 
 9994              	.LASF53:
 9995 064f 784D454D 		.ascii	"xMEMORY_REGION\000"
 9995      4F52595F 
 9995      52454749 
 9995      4F4E00
 9996              	.LASF203:
 9997 065e 70784375 		.ascii	"pxCurrentTCB\000"
 9997      7272656E 
 9997      74544342 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 275


 9997      00
 9998              	.LASF72:
 9999 066b 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 9999      74526169 
 9999      73654241 
 9999      53455052 
 9999      4900
 10000              	.LASF145:
 10001 067d 70785469 		.ascii	"pxTicksToWait\000"
 10001      636B7354 
 10001      6F576169 
 10001      7400
 10002              	.LASF158:
 10003 068b 70727644 		.ascii	"prvDeleteTCB\000"
 10003      656C6574 
 10003      65544342 
 10003      00
 10004              	.LASF149:
 10005 0698 70727649 		.ascii	"prvIdleTask\000"
 10005      646C6554 
 10005      61736B00 
 10006              	.LASF146:
 10007 06a4 78456C61 		.ascii	"xElapsedTime\000"
 10007      70736564 
 10007      54696D65 
 10007      00
 10008              	.LASF126:
 10009 06b1 76546173 		.ascii	"vTaskSwitchContext\000"
 10009      6B537769 
 10009      74636843 
 10009      6F6E7465 
 10009      787400
 10010              	.LASF45:
 10011 06c4 65496E63 		.ascii	"eIncrement\000"
 10011      72656D65 
 10011      6E7400
 10012              	.LASF109:
 10013 06cf 78546173 		.ascii	"xTaskToSuspend\000"
 10013      6B546F53 
 10013      75737065 
 10013      6E6400
 10014              	.LASF186:
 10015 06de 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 10015      6572666C 
 10015      6F774465 
 10015      6C617965 
 10015      64546173 
 10016              	.LASF56:
 10017 06f8 756C5061 		.ascii	"ulParameters\000"
 10017      72616D65 
 10017      74657273 
 10017      00
 10018              	.LASF82:
 10019 0705 78526567 		.ascii	"xRegions\000"
 10019      696F6E73 
 10019      00
 10020              	.LASF163:
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 276


 10021 070e 756C5461 		.ascii	"ulTaskNotifyTake\000"
 10021      736B4E6F 
 10021      74696679 
 10021      54616B65 
 10021      00
 10022              	.LASF99:
 10023 071f 78546173 		.ascii	"xTask\000"
 10023      6B00
 10024              	.LASF188:
 10025 0725 78546173 		.ascii	"xTasksWaitingTermination\000"
 10025      6B735761 
 10025      6974696E 
 10025      67546572 
 10025      6D696E61 
 10026              	.LASF104:
 10027 073e 75784E65 		.ascii	"uxNewPriority\000"
 10027      77507269 
 10027      6F726974 
 10027      7900
 10028              	.LASF74:
 10029 074c 70785461 		.ascii	"pxTaskCode\000"
 10029      736B436F 
 10029      646500
 10030              	.LASF81:
 10031 0757 756C5374 		.ascii	"ulStackDepth\000"
 10031      61636B44 
 10031      65707468 
 10031      00
 10032              	.LASF89:
 10033 0764 70785072 		.ascii	"pxPreviousWakeTime\000"
 10033      6576696F 
 10033      75735761 
 10033      6B655469 
 10033      6D6500
 10034              	.LASF199:
 10035 0777 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 10035      74546173 
 10035      6B556E62 
 10035      6C6F636B 
 10035      54696D65 
 10036              	.LASF46:
 10037 078c 65536574 		.ascii	"eSetValueWithOverwrite\000"
 10037      56616C75 
 10037      65576974 
 10037      684F7665 
 10037      72777269 
 10038              	.LASF193:
 10039 07a3 7578546F 		.ascii	"uxTopReadyPriority\000"
 10039      70526561 
 10039      64795072 
 10039      696F7269 
 10039      747900
 10040              	.LASF55:
 10041 07b6 756C4C65 		.ascii	"ulLengthInBytes\000"
 10041      6E677468 
 10041      496E4279 
 10041      74657300 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 277


 10042              	.LASF73:
 10043 07c6 76506F72 		.ascii	"vPortSetBASEPRI\000"
 10043      74536574 
 10043      42415345 
 10043      50524900 
 10044              	.LASF33:
 10045 07d6 4C697374 		.ascii	"ListItem_t\000"
 10045      4974656D 
 10045      5F7400
 10046              	.LASF129:
 10047 07e1 7578546F 		.ascii	"uxTopPriority\000"
 10047      70507269 
 10047      6F726974 
 10047      7900
 10048              	.LASF169:
 10049 07ef 70756C4E 		.ascii	"pulNotificationValue\000"
 10049      6F746966 
 10049      69636174 
 10049      696F6E56 
 10049      616C7565 
 10050              	.LASF30:
 10051 0804 70785072 		.ascii	"pxPrevious\000"
 10051      6576696F 
 10051      757300
 10052              	.LASF85:
 10053 080f 78546173 		.ascii	"xTaskToDelete\000"
 10053      6B546F44 
 10053      656C6574 
 10053      6500
 10054              	.LASF153:
 10055 081d 70765661 		.ascii	"pvValue\000"
 10055      6C756500 
 10056              	.LASF21:
 10057 0825 666C6F61 		.ascii	"float\000"
 10057      7400
 10058              	.LASF155:
 10059 082b 70765265 		.ascii	"pvReturn\000"
 10059      7475726E 
 10059      00
 10060              	.LASF94:
 10061 0834 78436F6E 		.ascii	"xConstTickCount\000"
 10061      73745469 
 10061      636B436F 
 10061      756E7400 
 10062              	.LASF32:
 10063 0844 7076436F 		.ascii	"pvContainer\000"
 10063      6E746169 
 10063      6E657200 
 10064              	.LASF138:
 10065 0850 7078556E 		.ascii	"pxUnblockedTCB\000"
 10065      626C6F63 
 10065      6B656454 
 10065      434200
 10066              	.LASF67:
 10067 085f 75634E6F 		.ascii	"ucNotifyState\000"
 10067      74696679 
 10067      53746174 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 278


 10067      6500
 10068              	.LASF91:
 10069 086d 7854696D 		.ascii	"xTimeToWake\000"
 10069      65546F57 
 10069      616B6500 
 10070              	.LASF6:
 10071 0879 756E7369 		.ascii	"unsigned char\000"
 10071      676E6564 
 10071      20636861 
 10071      7200
 10072              	.LASF66:
 10073 0887 756C4E6F 		.ascii	"ulNotifiedValue\000"
 10073      74696669 
 10073      65645661 
 10073      6C756500 
 10074              	.LASF105:
 10075 0897 75784375 		.ascii	"uxCurrentBasePriority\000"
 10075      7272656E 
 10075      74426173 
 10075      65507269 
 10075      6F726974 
 10076              	.LASF69:
 10077 08ad 5443425F 		.ascii	"TCB_t\000"
 10077      7400
 10078              	.LASF7:
 10079 08b3 73686F72 		.ascii	"short int\000"
 10079      7420696E 
 10079      7400
 10080              	.LASF128:
 10081 08bd 756C4368 		.ascii	"ulCheckValue\000"
 10081      65636B56 
 10081      616C7565 
 10081      00
 10082              	.LASF194:
 10083 08ca 78536368 		.ascii	"xSchedulerRunning\000"
 10083      6564756C 
 10083      65725275 
 10083      6E6E696E 
 10083      6700
 10084              	.LASF115:
 10085 08dc 76546173 		.ascii	"vTaskEndScheduler\000"
 10085      6B456E64 
 10085      53636865 
 10085      64756C65 
 10085      7200
 10086              	.LASF117:
 10087 08ee 75785065 		.ascii	"uxPendedCounts\000"
 10087      6E646564 
 10087      436F756E 
 10087      747300
 10088              	.LASF111:
 10089 08fd 78546173 		.ascii	"xTaskToResume\000"
 10089      6B546F52 
 10089      6573756D 
 10089      6500
 10090              	.LASF116:
 10091 090b 78546173 		.ascii	"xTaskResumeAll\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 279


 10091      6B526573 
 10091      756D6541 
 10091      6C6C00
 10092              	.LASF23:
 10093 091a 5461736B 		.ascii	"TaskFunction_t\000"
 10093      46756E63 
 10093      74696F6E 
 10093      5F7400
 10094              	.LASF37:
 10095 0929 784C4953 		.ascii	"xLIST\000"
 10095      5400
 10096              	.LASF101:
 10097 092f 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 10097      736B5072 
 10097      696F7269 
 10097      74794765 
 10097      7446726F 
 10098              	.LASF148:
 10099 0948 76546173 		.ascii	"vTaskMissedYield\000"
 10099      6B4D6973 
 10099      73656459 
 10099      69656C64 
 10099      00
 10100              	.LASF178:
 10101 0959 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 10101      6B4E6F74 
 10101      69667947 
 10101      69766546 
 10101      726F6D49 
 10102              	.LASF41:
 10103 0970 4C697374 		.ascii	"List_t\000"
 10103      5F7400
 10104              	.LASF83:
 10105 0977 70727649 		.ascii	"prvInitialiseNewTask\000"
 10105      6E697469 
 10105      616C6973 
 10105      654E6577 
 10105      5461736B 
 10106              	.LASF161:
 10107 098c 78546173 		.ascii	"xTaskGetSchedulerState\000"
 10107      6B476574 
 10107      53636865 
 10107      64756C65 
 10107      72537461 
 10108              	.LASF113:
 10109 09a3 75785361 		.ascii	"uxSavedInterruptStatus\000"
 10109      76656449 
 10109      6E746572 
 10109      72757074 
 10109      53746174 
 10110              	.LASF93:
 10111 09ba 7853686F 		.ascii	"xShouldDelay\000"
 10111      756C6444 
 10111      656C6179 
 10111      00
 10112              	.LASF157:
 10113 09c7 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 280


 10113      6865636B 
 10113      5461736B 
 10113      73576169 
 10113      74696E67 
 10114              	.LASF20:
 10115 09e7 75696E74 		.ascii	"uint32_t\000"
 10115      33325F74 
 10115      00
 10116              	.LASF147:
 10117 09f0 76546173 		.ascii	"vTaskSuspendAll\000"
 10117      6B537573 
 10117      70656E64 
 10117      416C6C00 
 10118              	.LASF2:
 10119 0a00 6C6F6E67 		.ascii	"long double\000"
 10119      20646F75 
 10119      626C6500 
 10120              	.LASF180:
 10121 0a0c 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 10121      64644375 
 10121      7272656E 
 10121      74546173 
 10121      6B546F44 
 10122              	.LASF16:
 10123 0a2b 63686172 		.ascii	"char\000"
 10123      00
 10124              	.LASF121:
 10125 0a30 70635461 		.ascii	"pcTaskGetName\000"
 10125      736B4765 
 10125      744E616D 
 10125      6500
 10126              	.LASF137:
 10127 0a3e 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 10127      6B52656D 
 10127      6F766546 
 10127      726F6D45 
 10127      76656E74 
 10128              	.LASF28:
 10129 0a57 78497465 		.ascii	"xItemValue\000"
 10129      6D56616C 
 10129      756500
 10130              	.LASF0:
 10131 0a62 756E7369 		.ascii	"unsigned int\000"
 10131      676E6564 
 10131      20696E74 
 10131      00
 10132              	.LASF8:
 10133 0a6f 5F5F7569 		.ascii	"__uint16_t\000"
 10133      6E743136 
 10133      5F7400
 10134              	.LASF87:
 10135 0a7a 76546173 		.ascii	"vTaskDelete\000"
 10135      6B44656C 
 10135      65746500 
 10136              	.LASF44:
 10137 0a86 65536574 		.ascii	"eSetBits\000"
 10137      42697473 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 281


 10137      00
 10138              	.LASF189:
 10139 0a8f 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 10139      6C657465 
 10139      64546173 
 10139      6B735761 
 10139      6974696E 
 10140              	.LASF102:
 10141 0aac 75785361 		.ascii	"uxSavedInterruptState\000"
 10141      76656449 
 10141      6E746572 
 10141      72757074 
 10141      53746174 
 10142              	.LASF10:
 10143 0ac2 5F5F696E 		.ascii	"__int32_t\000"
 10143      7433325F 
 10143      7400
 10144              	.LASF144:
 10145 0acc 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 10145      6B436865 
 10145      636B466F 
 10145      7254696D 
 10145      654F7574 
 10146              	.LASF140:
 10147 0ae1 70784576 		.ascii	"pxEventListItem\000"
 10147      656E744C 
 10147      69737449 
 10147      74656D00 
 10148              	.LASF198:
 10149 0af1 75785461 		.ascii	"uxTaskNumber\000"
 10149      736B4E75 
 10149      6D626572 
 10149      00
 10150              	.LASF125:
 10151 0afe 70785465 		.ascii	"pxTemp\000"
 10151      6D7000
 10152              	.LASF200:
 10153 0b05 7849646C 		.ascii	"xIdleTaskHandle\000"
 10153      65546173 
 10153      6B48616E 
 10153      646C6500 
 10154              	.LASF182:
 10155 0b15 70785265 		.ascii	"pxReadyTasksLists\000"
 10155      61647954 
 10155      61736B73 
 10155      4C697374 
 10155      7300
 10156              	.LASF136:
 10157 0b27 78576169 		.ascii	"xWaitIndefinitely\000"
 10157      74496E64 
 10157      6566696E 
 10157      6974656C 
 10157      7900
 10158              	.LASF210:
 10159 0b39 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 10159      736B4765 
 10159      744E756D 
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 282


 10159      6265724F 
 10159      66546173 
 10160              	.LASF183:
 10161 0b50 7844656C 		.ascii	"xDelayedTaskList1\000"
 10161      61796564 
 10161      5461736B 
 10161      4C697374 
 10161      3100
 10162              	.LASF164:
 10163 0b62 78436C65 		.ascii	"xClearCountOnExit\000"
 10163      6172436F 
 10163      756E744F 
 10163      6E457869 
 10163      7400
 10164              	.LASF197:
 10165 0b74 784E756D 		.ascii	"xNumOfOverflows\000"
 10165      4F664F76 
 10165      6572666C 
 10165      6F777300 
 10166              	.LASF170:
 10167 0b84 78546173 		.ascii	"xTaskGenericNotify\000"
 10167      6B47656E 
 10167      65726963 
 10167      4E6F7469 
 10167      667900
 10168              	.LASF192:
 10169 0b97 78546963 		.ascii	"xTickCount\000"
 10169      6B436F75 
 10169      6E7400
 10170              	.LASF143:
 10171 0ba2 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 10171      6B496E74 
 10171      65726E61 
 10171      6C536574 
 10171      54696D65 
 10172              	.LASF96:
 10173 0bbf 78546963 		.ascii	"xTicksToDelay\000"
 10173      6B73546F 
 10173      44656C61 
 10173      7900
 10174              	.LASF90:
 10175 0bcd 7854696D 		.ascii	"xTimeIncrement\000"
 10175      65496E63 
 10175      72656D65 
 10175      6E7400
 10176              	.LASF47:
 10177 0bdc 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 10177      56616C75 
 10177      65576974 
 10177      686F7574 
 10177      4F766572 
 10178              	.LASF64:
 10179 0bf6 70635461 		.ascii	"pcTaskName\000"
 10179      736B4E61 
 10179      6D6500
 10180              	.LASF17:
 10181 0c01 75696E74 		.ascii	"uint8_t\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 283


 10181      385F7400 
 10182              	.LASF119:
 10183 0c09 78546963 		.ascii	"xTicks\000"
 10183      6B7300
 10184              	.LASF209:
 10185 0c10 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 10185      61736B49 
 10185      73546173 
 10185      6B537573 
 10185      70656E64 
 10186              	.LASF43:
 10187 0c27 654E6F41 		.ascii	"eNoAction\000"
 10187      6374696F 
 10187      6E00
 10188              	.LASF15:
 10189 0c31 73697A65 		.ascii	"sizetype\000"
 10189      74797065 
 10189      00
 10190              	.LASF29:
 10191 0c3a 70784E65 		.ascii	"pxNext\000"
 10191      787400
 10192              	.LASF135:
 10193 0c41 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 10193      6B506C61 
 10193      63654F6E 
 10193      4576656E 
 10193      744C6973 
 10194              	.LASF166:
 10195 0c61 78546173 		.ascii	"xTaskNotifyWait\000"
 10195      6B4E6F74 
 10195      69667957 
 10195      61697400 
 10196              	.LASF165:
 10197 0c71 756C5265 		.ascii	"ulReturn\000"
 10197      7475726E 
 10197      00
 10198              	.LASF34:
 10199 0c7a 784C4953 		.ascii	"xLIST_ITEM\000"
 10199      545F4954 
 10199      454D00
 10200              	.LASF204:
 10201 0c85 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 10201      43313120 
 10201      352E342E 
 10201      31203230 
 10201      31363036 
 10202 0cb8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m4 -mfloat-abi=s"
 10202      20726576 
 10202      6973696F 
 10202      6E203233 
 10202      37373135 
 10203 0ceb 6F667466 		.ascii	"oftfp -mfpu=fpv4-sp-d16 -mthumb -g -O0 -ffunction-s"
 10203      70202D6D 
 10203      6670753D 
 10203      66707634 
 10203      2D73702D 
 10204 0d1e 65637469 		.ascii	"ections -ffat-lto-objects\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 284


 10204      6F6E7320 
 10204      2D666661 
 10204      742D6C74 
 10204      6F2D6F62 
 10205              	.LASF62:
 10206 0d38 75785072 		.ascii	"uxPriority\000"
 10206      696F7269 
 10206      747900
 10207              	.LASF185:
 10208 0d43 70784465 		.ascii	"pxDelayedTaskList\000"
 10208      6C617965 
 10208      64546173 
 10208      6B4C6973 
 10208      7400
 10209              	.LASF154:
 10210 0d55 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 10210      736B4765 
 10210      74546872 
 10210      6561644C 
 10210      6F63616C 
 10211              	.LASF75:
 10212 0d78 70634E61 		.ascii	"pcName\000"
 10212      6D6500
 10213              	.LASF98:
 10214 0d7f 75785461 		.ascii	"uxTaskPriorityGet\000"
 10214      736B5072 
 10214      696F7269 
 10214      74794765 
 10214      7400
 10215              	.LASF141:
 10216 0d91 76546173 		.ascii	"vTaskSetTimeOutState\000"
 10216      6B536574 
 10216      54696D65 
 10216      4F757453 
 10216      74617465 
 10217              	.LASF168:
 10218 0da6 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 10218      7473546F 
 10218      436C6561 
 10218      724F6E45 
 10218      78697400 
 10219              	.LASF26:
 10220 0dba 55426173 		.ascii	"UBaseType_t\000"
 10220      65547970 
 10220      655F7400 
 10221              	.LASF139:
 10222 0dc6 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 10222      6B52656D 
 10222      6F766546 
 10222      726F6D55 
 10222      6E6F7264 
 10223              	.LASF127:
 10224 0de8 70756C53 		.ascii	"pulStack\000"
 10224      7461636B 
 10224      00
 10225              	.LASF195:
 10226 0df1 75785065 		.ascii	"uxPendedTicks\000"
ARM GAS  C:\Users\stijn\AppData\Local\Temp\cc60SkrY.s 			page 285


 10226      6E646564 
 10226      5469636B 
 10226      7300
 10227              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
